
P1_FFT_SA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006008  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011ffc  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018194  08018194  00030074  2**0
                  CONTENTS
  4 .ARM          00000000  08018194  08018194  00030074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08018194  08018194  00030074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018194  08018194  00028194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018198  08018198  00028198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0801819c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a1c  20000074  08018210  00030074  2**2
                  ALLOC
 10 ._user_heap_stack 000011a0  20004a90  08018210  00034a90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f178  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050f7  00000000  00000000  0005f21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  00064318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019f0  00000000  00000000  00065868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a032  00000000  00000000  00067258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c2e0  00000000  00000000  0009128a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb544  00000000  00000000  000ad56a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c8  00000000  00000000  001a8aae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000583c  00000000  00000000  001a8b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000069ab  00000000  00000000  001ae3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006180 	.word	0x08006180

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006180 	.word	0x08006180

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <ADC_init>:
 *      Author: eduardomunoz
 */
#include "ADC.h"

void ADC_init(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
    //enable ADC on RCC
    RCC->AHB2ENR |= (RCC_AHB2ENR_ADCEN);
 80001e4:	4b51      	ldr	r3, [pc, #324]	; (800032c <ADC_init+0x14c>)
 80001e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e8:	4a50      	ldr	r2, [pc, #320]	; (800032c <ADC_init+0x14c>)
 80001ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001ee:	64d3      	str	r3, [r2, #76]	; 0x4c
    //set ADC to use HCLK
    ADC123_COMMON-> CCR = (ADC123_COMMON->CCR & ~(ADC_CCR_CKMODE))|
 80001f0:	4b4f      	ldr	r3, [pc, #316]	; (8000330 <ADC_init+0x150>)
 80001f2:	689b      	ldr	r3, [r3, #8]
 80001f4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80001f8:	4a4d      	ldr	r2, [pc, #308]	; (8000330 <ADC_init+0x150>)
 80001fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001fe:	6093      	str	r3, [r2, #8]
            (1<<ADC_CCR_CKMODE_Pos);

    //take ADC out of deep power down mode
    ADC1->CR &= ~(ADC_CR_DEEPPWD);
 8000200:	4b4c      	ldr	r3, [pc, #304]	; (8000334 <ADC_init+0x154>)
 8000202:	689b      	ldr	r3, [r3, #8]
 8000204:	4a4b      	ldr	r2, [pc, #300]	; (8000334 <ADC_init+0x154>)
 8000206:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800020a:	6093      	str	r3, [r2, #8]
    //and turn on the voltage regulator
    ADC1->CR |= (ADC_CR_ADVREGEN);
 800020c:	4b49      	ldr	r3, [pc, #292]	; (8000334 <ADC_init+0x154>)
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	4a48      	ldr	r2, [pc, #288]	; (8000334 <ADC_init+0x154>)
 8000212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000216:	6093      	str	r3, [r2, #8]

    //    delay_us(20);  //wait 20us for ADC to power up
    HAL_Delay(1);
 8000218:	2001      	movs	r0, #1
 800021a:	f000 ff19 	bl	8001050 <HAL_Delay>


    //single ended calibration, ensure ADC is disabled
    ADC1->CR &= ~(ADC_CR_ADEN |ADC_CR_ADCALDIF);
 800021e:	4b45      	ldr	r3, [pc, #276]	; (8000334 <ADC_init+0x154>)
 8000220:	689b      	ldr	r3, [r3, #8]
 8000222:	4a44      	ldr	r2, [pc, #272]	; (8000334 <ADC_init+0x154>)
 8000224:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000228:	f023 0301 	bic.w	r3, r3, #1
 800022c:	6093      	str	r3, [r2, #8]
    ADC1->CR |= (ADC_CR_ADCAL);
 800022e:	4b41      	ldr	r3, [pc, #260]	; (8000334 <ADC_init+0x154>)
 8000230:	689b      	ldr	r3, [r3, #8]
 8000232:	4a40      	ldr	r2, [pc, #256]	; (8000334 <ADC_init+0x154>)
 8000234:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000238:	6093      	str	r3, [r2, #8]
    while(ADC1->CR & ADC_CR_ADCAL); //wait for ADCAL to become
 800023a:	bf00      	nop
 800023c:	4b3d      	ldr	r3, [pc, #244]	; (8000334 <ADC_init+0x154>)
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	2b00      	cmp	r3, #0
 8000242:	dbfb      	blt.n	800023c <ADC_init+0x5c>

    //configure single ended for channel 5
    ADC1->DIFSEL &= ~(ADC_DIFSEL_DIFSEL_5);
 8000244:	4b3b      	ldr	r3, [pc, #236]	; (8000334 <ADC_init+0x154>)
 8000246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800024a:	4a3a      	ldr	r2, [pc, #232]	; (8000334 <ADC_init+0x154>)
 800024c:	f023 0320 	bic.w	r3, r3, #32
 8000250:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

    //enable ADC FINALLY!!!!! (software procedure to enable the ADC)
    ADC1-> ISR |= (ADC_ISR_ADRDY);
 8000254:	4b37      	ldr	r3, [pc, #220]	; (8000334 <ADC_init+0x154>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a36      	ldr	r2, [pc, #216]	; (8000334 <ADC_init+0x154>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6013      	str	r3, [r2, #0]
    ADC1->CR   |= (ADC_CR_ADEN);
 8000260:	4b34      	ldr	r3, [pc, #208]	; (8000334 <ADC_init+0x154>)
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	4a33      	ldr	r2, [pc, #204]	; (8000334 <ADC_init+0x154>)
 8000266:	f043 0301 	orr.w	r3, r3, #1
 800026a:	6093      	str	r3, [r2, #8]
    while(!(ADC1->ISR & ADC_ISR_ADRDY)); //wait for ADRDY to become
 800026c:	bf00      	nop
 800026e:	4b31      	ldr	r3, [pc, #196]	; (8000334 <ADC_init+0x154>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f003 0301 	and.w	r3, r3, #1
 8000276:	2b00      	cmp	r3, #0
 8000278:	d0f9      	beq.n	800026e <ADC_init+0x8e>
    ADC1-> ISR |= ADC_ISR_ADRDY; //clear ADRDY bit
 800027a:	4b2e      	ldr	r3, [pc, #184]	; (8000334 <ADC_init+0x154>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a2d      	ldr	r2, [pc, #180]	; (8000334 <ADC_init+0x154>)
 8000280:	f043 0301 	orr.w	r3, r3, #1
 8000284:	6013      	str	r3, [r2, #0]

    //configure ADC
    //12-bit resolution so set to 00
    ADC1 -> CFGR &= ~(ADC_CFGR_RES);
 8000286:	4b2b      	ldr	r3, [pc, #172]	; (8000334 <ADC_init+0x154>)
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	4a2a      	ldr	r2, [pc, #168]	; (8000334 <ADC_init+0x154>)
 800028c:	f023 0318 	bic.w	r3, r3, #24
 8000290:	60d3      	str	r3, [r2, #12]
    ADC1 -> CFGR |= (ADC_CFGR_DMACFG); //enable dma circ mode
 8000292:	4b28      	ldr	r3, [pc, #160]	; (8000334 <ADC_init+0x154>)
 8000294:	68db      	ldr	r3, [r3, #12]
 8000296:	4a27      	ldr	r2, [pc, #156]	; (8000334 <ADC_init+0x154>)
 8000298:	f043 0302 	orr.w	r3, r3, #2
 800029c:	60d3      	str	r3, [r2, #12]
    ADC1 -> CFGR |= (ADC_CFGR_DMAEN); //enable dma
 800029e:	4b25      	ldr	r3, [pc, #148]	; (8000334 <ADC_init+0x154>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	4a24      	ldr	r2, [pc, #144]	; (8000334 <ADC_init+0x154>)
 80002a4:	f043 0301 	orr.w	r3, r3, #1
 80002a8:	60d3      	str	r3, [r2, #12]


    //trigger off of extsel
    ADC1 -> CFGR |= ADC_CFGR_EXTEN_0|ADC_CFGR_EXTEN_1;//enables triggers of external rising edge
 80002aa:	4b22      	ldr	r3, [pc, #136]	; (8000334 <ADC_init+0x154>)
 80002ac:	68db      	ldr	r3, [r3, #12]
 80002ae:	4a21      	ldr	r2, [pc, #132]	; (8000334 <ADC_init+0x154>)
 80002b0:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80002b4:	60d3      	str	r3, [r2, #12]
    ADC1 -> CFGR &= ~(ADC_CFGR_EXTSEL); //clear bits
 80002b6:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <ADC_init+0x154>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	4a1e      	ldr	r2, [pc, #120]	; (8000334 <ADC_init+0x154>)
 80002bc:	f423 7370 	bic.w	r3, r3, #960	; 0x3c0
 80002c0:	60d3      	str	r3, [r2, #12]
    ADC1 -> CFGR |= (ADC_CFGR_EXTSEL_0|ADC_CFGR_EXTSEL_1); //EXT3 TIM2CH2 011
 80002c2:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <ADC_init+0x154>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	4a1b      	ldr	r2, [pc, #108]	; (8000334 <ADC_init+0x154>)
 80002c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002cc:	60d3      	str	r3, [r2, #12]

    //sampling time on channel 5 is 2.5 clocks
    ADC1->SMPR1 &= ~(ADC_SMPR1_SMP5);
 80002ce:	4b19      	ldr	r3, [pc, #100]	; (8000334 <ADC_init+0x154>)
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	4a18      	ldr	r2, [pc, #96]	; (8000334 <ADC_init+0x154>)
 80002d4:	f423 3360 	bic.w	r3, r3, #229376	; 0x38000
 80002d8:	6153      	str	r3, [r2, #20]
    ADC1->SMPR1 |= (ADC_SMPR1_SMP5_0 | ADC_SMPR1_SMP5_1 |ADC_SMPR1_SMP5_2);
 80002da:	4b16      	ldr	r3, [pc, #88]	; (8000334 <ADC_init+0x154>)
 80002dc:	695b      	ldr	r3, [r3, #20]
 80002de:	4a15      	ldr	r2, [pc, #84]	; (8000334 <ADC_init+0x154>)
 80002e0:	f443 3360 	orr.w	r3, r3, #229376	; 0x38000
 80002e4:	6153      	str	r3, [r2, #20]

    //put channel 5 in the regular sequence, length of 1
    ADC1->SQR1 = (ADC1->SQR1 & ~(ADC_SQR1_SQ1 | ADC_SQR1_L))|
 80002e6:	4b13      	ldr	r3, [pc, #76]	; (8000334 <ADC_init+0x154>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ea:	f423 63f9 	bic.w	r3, r3, #1992	; 0x7c8
 80002ee:	f023 0307 	bic.w	r3, r3, #7
 80002f2:	4a10      	ldr	r2, [pc, #64]	; (8000334 <ADC_init+0x154>)
 80002f4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80002f8:	6313      	str	r3, [r2, #48]	; 0x30
            (5 << ADC_SQR1_SQ1_Pos);

    //configure GPIO PA0 for analog input
    RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 80002fa:	4b0c      	ldr	r3, [pc, #48]	; (800032c <ADC_init+0x14c>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fe:	4a0b      	ldr	r2, [pc, #44]	; (800032c <ADC_init+0x14c>)
 8000300:	f043 0301 	orr.w	r3, r3, #1
 8000304:	64d3      	str	r3, [r2, #76]	; 0x4c
    GPIOA ->MODER |= (GPIO_MODER_MODE0); //analog mode
 8000306:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000310:	f043 0303 	orr.w	r3, r3, #3
 8000314:	6013      	str	r3, [r2, #0]
    GPIOA ->ASCR |= GPIO_ASCR_ASC0;      //connect analog PA0
 8000316:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800031a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800031c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	62d3      	str	r3, [r2, #44]	; 0x2c

//    //start regular sequence
//    ADC1->CR |= ADC_CR_ADSTART;
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000
 8000330:	50040300 	.word	0x50040300
 8000334:	50040000 	.word	0x50040000

08000338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	4603      	mov	r3, r0
 8000340:	6039      	str	r1, [r7, #0]
 8000342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000348:	2b00      	cmp	r3, #0
 800034a:	db0a      	blt.n	8000362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	b2da      	uxtb	r2, r3
 8000350:	490c      	ldr	r1, [pc, #48]	; (8000384 <__NVIC_SetPriority+0x4c>)
 8000352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000356:	0112      	lsls	r2, r2, #4
 8000358:	b2d2      	uxtb	r2, r2
 800035a:	440b      	add	r3, r1
 800035c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000360:	e00a      	b.n	8000378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	b2da      	uxtb	r2, r3
 8000366:	4908      	ldr	r1, [pc, #32]	; (8000388 <__NVIC_SetPriority+0x50>)
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	f003 030f 	and.w	r3, r3, #15
 800036e:	3b04      	subs	r3, #4
 8000370:	0112      	lsls	r2, r2, #4
 8000372:	b2d2      	uxtb	r2, r2
 8000374:	440b      	add	r3, r1
 8000376:	761a      	strb	r2, [r3, #24]
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	e000e100 	.word	0xe000e100
 8000388:	e000ed00 	.word	0xe000ed00

0800038c <DMA1channel1_ADC_init>:
 * for  DMA1channel1_ADC_init(uint32_t * dest)
 * interrupts are enabled in order to allow for synchronizing calculations with semaphores
 */

void DMA1channel1_ADC_init(uint32_t * dest)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
	//enabling clock
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8000394:	4b2e      	ldr	r3, [pc, #184]	; (8000450 <DMA1channel1_ADC_init+0xc4>)
 8000396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000398:	4a2d      	ldr	r2, [pc, #180]	; (8000450 <DMA1channel1_ADC_init+0xc4>)
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	6493      	str	r3, [r2, #72]	; 0x48

    //memory to memory initialization
	DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S); //select dma channel
 80003a0:	4b2c      	ldr	r3, [pc, #176]	; (8000454 <DMA1channel1_ADC_init+0xc8>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a2b      	ldr	r2, [pc, #172]	; (8000454 <DMA1channel1_ADC_init+0xc8>)
 80003a6:	f023 030f 	bic.w	r3, r3, #15
 80003aa:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CPAR = (uint32_t)&(ADC1->DR); //with DIR set to 0 this is the source address
 80003ac:	4b2a      	ldr	r3, [pc, #168]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 80003ae:	4a2b      	ldr	r2, [pc, #172]	; (800045c <DMA1channel1_ADC_init+0xd0>)
 80003b0:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)(dest); // with DIR set to 0 this is the destination address
 80003b2:	4a29      	ldr	r2, [pc, #164]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	60d3      	str	r3, [r2, #12]
	DMA1_Channel1->CNDTR = NUM_TO_COPY;  // number to copy
 80003b8:	4b27      	ldr	r3, [pc, #156]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 80003ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003be:	605a      	str	r2, [r3, #4]
	DMA1_Channel1->CCR &= ~(DMA_CCR_DIR); //setting DIR to 0
 80003c0:	4b25      	ldr	r3, [pc, #148]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a24      	ldr	r2, [pc, #144]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 80003c6:	f023 0310 	bic.w	r3, r3, #16
 80003ca:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (DMA_CCR_CIRC); //enable circular mode
 80003cc:	4b22      	ldr	r3, [pc, #136]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a21      	ldr	r2, [pc, #132]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 80003d2:	f043 0320 	orr.w	r3, r3, #32
 80003d6:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (DMA_CCR_MINC); //increments address
 80003d8:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a1e      	ldr	r2, [pc, #120]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 80003de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e2:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR &= ~(DMA_CCR_PINC);//keeps address the same
 80003e4:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a1b      	ldr	r2, [pc, #108]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 80003ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003ee:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR = ((DMA1_Channel1->CCR)&~(DMA_CCR_MSIZE))|(DMA_CCR_MSIZE_0);//clearing size and setting length to 16bits
 80003f0:	4b19      	ldr	r3, [pc, #100]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80003f8:	4a17      	ldr	r2, [pc, #92]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 80003fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003fe:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR = ((DMA1_Channel1->CCR)&~(DMA_CCR_PSIZE))|(DMA_CCR_PSIZE_0);//clearing size and setting length to 16bits
 8000400:	4b15      	ldr	r3, [pc, #84]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000408:	4a13      	ldr	r2, [pc, #76]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 800040a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800040e:	6013      	str	r3, [r2, #0]

	DMA1_Channel1->CCR |= (DMA_CCR_TCIE); //enable interrupts at transfer complete
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a10      	ldr	r2, [pc, #64]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 8000416:	f043 0302 	orr.w	r3, r3, #2
 800041a:	6013      	str	r3, [r2, #0]
	DMA1_Channel1->CCR |= (DMA_CCR_HTIE); //enable interrupts at half transfer
 800041c:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a0d      	ldr	r2, [pc, #52]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	6013      	str	r3, [r2, #0]


	NVIC->ISER[0] = (1<<(DMA1_Channel1_IRQn & 0x1F)); //enable interrupts for channel 1
 8000428:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <DMA1channel1_ADC_init+0xd4>)
 800042a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800042e:	601a      	str	r2, [r3, #0]

	//this mcu uses 4 bits for priority level, uses msb
//	NVIC->IP[DMA1_Channel1_IRQn] = (0x70 << ((DMA1_Channel1_IRQn%4)*8)); //modulus since the remainder determines position in register for priority
	NVIC_SetPriority(DMA1_Channel1_IRQn, 0x19);
 8000430:	2119      	movs	r1, #25
 8000432:	200b      	movs	r0, #11
 8000434:	f7ff ff80 	bl	8000338 <__NVIC_SetPriority>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000438:	b662      	cpsie	i
}
 800043a:	bf00      	nop
	__enable_irq();

	DMA1_Channel1->CCR |= (DMA_CCR_EN); //activating channel
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a05      	ldr	r2, [pc, #20]	; (8000458 <DMA1channel1_ADC_init+0xcc>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	6013      	str	r3, [r2, #0]

}
 8000448:	bf00      	nop
 800044a:	3708      	adds	r7, #8
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40021000 	.word	0x40021000
 8000454:	400200a8 	.word	0x400200a8
 8000458:	40020008 	.word	0x40020008
 800045c:	50040040 	.word	0x50040040
 8000460:	e000e100 	.word	0xe000e100

08000464 <DMA1_Channel3_IRQHandler>:



void DMA1_Channel3_IRQHandler()
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
	if(DMA1->ISR & DMA_ISR_TCIF3)
 8000468:	4b14      	ldr	r3, [pc, #80]	; (80004bc <DMA1_Channel3_IRQHandler+0x58>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000470:	2b00      	cmp	r3, #0
 8000472:	d01d      	beq.n	80004b0 <DMA1_Channel3_IRQHandler+0x4c>
	{
	  	GPIOC->ODR ^= GPIO_ODR_OD1; //toggle off
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <DMA1_Channel3_IRQHandler+0x5c>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	4a11      	ldr	r2, [pc, #68]	; (80004c0 <DMA1_Channel3_IRQHandler+0x5c>)
 800047a:	f083 0302 	eor.w	r3, r3, #2
 800047e:	6153      	str	r3, [r2, #20]
		  DMA1_Channel3->CCR &= ~(DMA_CCR_EN); //disable channel 3
 8000480:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <DMA1_Channel3_IRQHandler+0x60>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a0f      	ldr	r2, [pc, #60]	; (80004c4 <DMA1_Channel3_IRQHandler+0x60>)
 8000486:	f023 0301 	bic.w	r3, r3, #1
 800048a:	6013      	str	r3, [r2, #0]
		  DMA1->IFCR |= (DMA_IFCR_CTCIF3); //clear interrupt flag
 800048c:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <DMA1_Channel3_IRQHandler+0x58>)
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <DMA1_Channel3_IRQHandler+0x58>)
 8000492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000496:	6053      	str	r3, [r2, #4]
		  DMA1->IFCR |= (DMA_IFCR_CGIF3); //clear global interrupt flag
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <DMA1_Channel3_IRQHandler+0x58>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4a07      	ldr	r2, [pc, #28]	; (80004bc <DMA1_Channel3_IRQHandler+0x58>)
 800049e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004a2:	6053      	str	r3, [r2, #4]
		  DMA1->IFCR |= (DMA_IFCR_CHTIF3); //clear half transfer flag
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <DMA1_Channel3_IRQHandler+0x58>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	4a04      	ldr	r2, [pc, #16]	; (80004bc <DMA1_Channel3_IRQHandler+0x58>)
 80004aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ae:	6053      	str	r3, [r2, #4]

	}
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40020000 	.word	0x40020000
 80004c0:	48000800 	.word	0x48000800
 80004c4:	40020030 	.word	0x40020030

080004c8 <DMA1_Channel1_IRQHandler>:


void DMA1_Channel1_IRQHandler()
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80004ce:	2300      	movs	r3, #0
 80004d0:	607b      	str	r3, [r7, #4]

	if(DMA1->ISR & DMA_ISR_HTIF1)
 80004d2:	4b18      	ldr	r3, [pc, #96]	; (8000534 <DMA1_Channel1_IRQHandler+0x6c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f003 0304 	and.w	r3, r3, #4
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d00d      	beq.n	80004fa <DMA1_Channel1_IRQHandler+0x32>
	{
		DMA1->IFCR |= (DMA_IFCR_CHTIF1); //clear half transfer flag
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <DMA1_Channel1_IRQHandler+0x6c>)
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	4a14      	ldr	r2, [pc, #80]	; (8000534 <DMA1_Channel1_IRQHandler+0x6c>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	6053      	str	r3, [r2, #4]


		xSemaphoreGiveFromISR(calculateSemaphore1, &xHigherPriorityTaskWoken );
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <DMA1_Channel1_IRQHandler+0x70>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	1d3a      	adds	r2, r7, #4
 80004f0:	4611      	mov	r1, r2
 80004f2:	4618      	mov	r0, r3
 80004f4:	f002 fc4f 	bl	8002d96 <xQueueGiveFromISR>
		  DMA1->IFCR |= (DMA_IFCR_CGIF1); //clear global interrupt flag
		  xSemaphoreGiveFromISR(calculateSemaphore2, &xHigherPriorityTaskWoken );

	}

}
 80004f8:	e018      	b.n	800052c <DMA1_Channel1_IRQHandler+0x64>
	else if(DMA1->ISR & DMA_ISR_TCIF1)
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <DMA1_Channel1_IRQHandler+0x6c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f003 0302 	and.w	r3, r3, #2
 8000502:	2b00      	cmp	r3, #0
 8000504:	d012      	beq.n	800052c <DMA1_Channel1_IRQHandler+0x64>
		  DMA1->IFCR |= (DMA_IFCR_CTCIF1); //clear interrupt flag
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <DMA1_Channel1_IRQHandler+0x6c>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <DMA1_Channel1_IRQHandler+0x6c>)
 800050c:	f043 0302 	orr.w	r3, r3, #2
 8000510:	6053      	str	r3, [r2, #4]
		  DMA1->IFCR |= (DMA_IFCR_CGIF1); //clear global interrupt flag
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <DMA1_Channel1_IRQHandler+0x6c>)
 8000514:	685b      	ldr	r3, [r3, #4]
 8000516:	4a07      	ldr	r2, [pc, #28]	; (8000534 <DMA1_Channel1_IRQHandler+0x6c>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6053      	str	r3, [r2, #4]
		  xSemaphoreGiveFromISR(calculateSemaphore2, &xHigherPriorityTaskWoken );
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <DMA1_Channel1_IRQHandler+0x74>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	1d3a      	adds	r2, r7, #4
 8000524:	4611      	mov	r1, r2
 8000526:	4618      	mov	r0, r3
 8000528:	f002 fc35 	bl	8002d96 <xQueueGiveFromISR>
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40020000 	.word	0x40020000
 8000538:	20000094 	.word	0x20000094
 800053c:	20000098 	.word	0x20000098

08000540 <GPIO_init>:
 */
#include "GPIO.h"
#include "main.h"

void GPIO_init()
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

	//setup on PC0 for toggling output
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOCEN); //enable clock
 8000544:	4b1d      	ldr	r3, [pc, #116]	; (80005bc <GPIO_init+0x7c>)
 8000546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000548:	4a1c      	ldr	r2, [pc, #112]	; (80005bc <GPIO_init+0x7c>)
 800054a:	f043 0304 	orr.w	r3, r3, #4
 800054e:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOC->MODER &= ~(GPIO_MODER_MODE0); //clearing bits setting to input
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <GPIO_init+0x80>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a1a      	ldr	r2, [pc, #104]	; (80005c0 <GPIO_init+0x80>)
 8000556:	f023 0303 	bic.w	r3, r3, #3
 800055a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE0_0); //setting output;
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <GPIO_init+0x80>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <GPIO_init+0x80>)
 8000562:	f043 0301 	orr.w	r3, r3, #1
 8000566:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR0); //clear bits
 8000568:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <GPIO_init+0x80>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <GPIO_init+0x80>)
 800056e:	f023 0303 	bic.w	r3, r3, #3
 8000572:	60d3      	str	r3, [r2, #12]
	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT0); //clear bit, set to push pull
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <GPIO_init+0x80>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <GPIO_init+0x80>)
 800057a:	f023 0301 	bic.w	r3, r3, #1
 800057e:	6053      	str	r3, [r2, #4]

	GPIOC->MODER &= ~(GPIO_MODER_MODE1); //clearing bits setting to input
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <GPIO_init+0x80>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <GPIO_init+0x80>)
 8000586:	f023 030c 	bic.w	r3, r3, #12
 800058a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE1_0); //setting output;
 800058c:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <GPIO_init+0x80>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <GPIO_init+0x80>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR1); //clear bits
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <GPIO_init+0x80>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <GPIO_init+0x80>)
 800059e:	f023 030c 	bic.w	r3, r3, #12
 80005a2:	60d3      	str	r3, [r2, #12]
	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT1); //clear bit, set to push pull
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <GPIO_init+0x80>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	4a05      	ldr	r2, [pc, #20]	; (80005c0 <GPIO_init+0x80>)
 80005aa:	f023 0302 	bic.w	r3, r3, #2
 80005ae:	6053      	str	r3, [r2, #4]


}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40021000 	.word	0x40021000
 80005c0:	48000800 	.word	0x48000800

080005c4 <calculate>:
SemaphoreHandle_t calculateSemaphore2 = NULL;
q15_t testOutput[SIZEOUTPUT_FFTSA] = {0};
q15_t max;

void calculate(void *argument)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08e      	sub	sp, #56	; 0x38
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

	arm_rfft_instance_q15 fft1;
	uint16_t freq;

	uint32_t index;
	q15_t * sampleloc1 =  (q15_t *)&collectedsamples;
 80005cc:	4b49      	ldr	r3, [pc, #292]	; (80006f4 <calculate+0x130>)
 80005ce:	637b      	str	r3, [r7, #52]	; 0x34
	q15_t * sampleloc2 =  (q15_t *)&collectedsamples[2047];
 80005d0:	4b49      	ldr	r3, [pc, #292]	; (80006f8 <calculate+0x134>)
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
	arm_rfft_init_q15(&fft1, SIZEFFT_FOR_SA, 0, 1);
 80005d4:	f107 000c 	add.w	r0, r7, #12
 80005d8:	2301      	movs	r3, #1
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	f005 f840 	bl	8005664 <arm_rfft_init_q15>

	printSemaphore = xSemaphoreCreateBinary();//creating the semaphore once
 80005e4:	2203      	movs	r2, #3
 80005e6:	2100      	movs	r1, #0
 80005e8:	2001      	movs	r0, #1
 80005ea:	f002 f9dd 	bl	80029a8 <xQueueGenericCreate>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a42      	ldr	r2, [pc, #264]	; (80006fc <calculate+0x138>)
 80005f2:	6013      	str	r3, [r2, #0]

	calculateSemaphore1 = xSemaphoreCreateBinary();
 80005f4:	2203      	movs	r2, #3
 80005f6:	2100      	movs	r1, #0
 80005f8:	2001      	movs	r0, #1
 80005fa:	f002 f9d5 	bl	80029a8 <xQueueGenericCreate>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a3f      	ldr	r2, [pc, #252]	; (8000700 <calculate+0x13c>)
 8000602:	6013      	str	r3, [r2, #0]
	calculateSemaphore2 = xSemaphoreCreateBinary();
 8000604:	2203      	movs	r2, #3
 8000606:	2100      	movs	r1, #0
 8000608:	2001      	movs	r0, #1
 800060a:	f002 f9cd 	bl	80029a8 <xQueueGenericCreate>
 800060e:	4603      	mov	r3, r0
 8000610:	4a3c      	ldr	r2, [pc, #240]	; (8000704 <calculate+0x140>)
 8000612:	6013      	str	r3, [r2, #0]


	if(printSemaphore != NULL && calculateSemaphore1 !=NULL)
 8000614:	4b39      	ldr	r3, [pc, #228]	; (80006fc <calculate+0x138>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d066      	beq.n	80006ea <calculate+0x126>
 800061c:	4b38      	ldr	r3, [pc, #224]	; (8000700 <calculate+0x13c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d062      	beq.n	80006ea <calculate+0x126>
	{
		for(;;)
		{

			q15_t * outputloc = &testOutput[0];
 8000624:	4b38      	ldr	r3, [pc, #224]	; (8000708 <calculate+0x144>)
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
			q15_t * maxfreq = &testOutput[1];
 8000628:	4b38      	ldr	r3, [pc, #224]	; (800070c <calculate+0x148>)
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
		    //start regular sequence
		    ADC1->CR |= ADC_CR_ADSTART;
 800062c:	4b38      	ldr	r3, [pc, #224]	; (8000710 <calculate+0x14c>)
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	4a37      	ldr	r2, [pc, #220]	; (8000710 <calculate+0x14c>)
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	6093      	str	r3, [r2, #8]

				if(xSemaphoreTake(calculateSemaphore1, ( TickType_t ) 400 ) == pdTRUE)
 8000638:	4b31      	ldr	r3, [pc, #196]	; (8000700 <calculate+0x13c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000640:	4618      	mov	r0, r3
 8000642:	f002 fd15 	bl	8003070 <xQueueSemaphoreTake>
 8000646:	4603      	mov	r3, r0
 8000648:	2b01      	cmp	r3, #1
 800064a:	d124      	bne.n	8000696 <calculate+0xd2>
				{



					arm_rfft_q15(&fft1, sampleloc1, outputloc);
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000652:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000654:	4618      	mov	r0, r3
 8000656:	f004 ff6b 	bl	8005530 <arm_rfft_q15>

					arm_max_q15(&testOutput[1], SIZEOUTPUT_FFTSA/2-1 ,&max ,&index);
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	4a2d      	ldr	r2, [pc, #180]	; (8000714 <calculate+0x150>)
 8000660:	21ff      	movs	r1, #255	; 0xff
 8000662:	482a      	ldr	r0, [pc, #168]	; (800070c <calculate+0x148>)
 8000664:	f004 ff12 	bl	800548c <arm_max_q15>

					freq = index/2;
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	085b      	lsrs	r3, r3, #1
 800066c:	84fb      	strh	r3, [r7, #38]	; 0x26
					GPIOC->ODR ^= GPIO_ODR_OD1;
 800066e:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <calculate+0x154>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a29      	ldr	r2, [pc, #164]	; (8000718 <calculate+0x154>)
 8000674:	f083 0302 	eor.w	r3, r3, #2
 8000678:	6153      	str	r3, [r2, #20]

					itoa(freq*(2048/256), freqstring, 10);
 800067a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800067c:	00db      	lsls	r3, r3, #3
 800067e:	220a      	movs	r2, #10
 8000680:	4926      	ldr	r1, [pc, #152]	; (800071c <calculate+0x158>)
 8000682:	4618      	mov	r0, r3
 8000684:	f005 fc5a 	bl	8005f3c <itoa>
					xSemaphoreGive(printSemaphore);
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <calculate+0x138>)
 800068a:	6818      	ldr	r0, [r3, #0]
 800068c:	2300      	movs	r3, #0
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	f002 f9e7 	bl	8002a64 <xQueueGenericSend>



				}

				if(xSemaphoreTake(calculateSemaphore2, ( TickType_t ) 400 )== pdTRUE)
 8000696:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <calculate+0x140>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 fce6 	bl	8003070 <xQueueSemaphoreTake>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d1bc      	bne.n	8000624 <calculate+0x60>
				{

					arm_rfft_q15(&fft1, sampleloc2, outputloc);
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 ff3c 	bl	8005530 <arm_rfft_q15>
					arm_max_q15(&testOutput[1], SIZEOUTPUT_FFTSA/2-1 ,&max ,&index);
 80006b8:	f107 0308 	add.w	r3, r7, #8
 80006bc:	4a15      	ldr	r2, [pc, #84]	; (8000714 <calculate+0x150>)
 80006be:	21ff      	movs	r1, #255	; 0xff
 80006c0:	4812      	ldr	r0, [pc, #72]	; (800070c <calculate+0x148>)
 80006c2:	f004 fee3 	bl	800548c <arm_max_q15>
					freq = index/2;
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	085b      	lsrs	r3, r3, #1
 80006ca:	84fb      	strh	r3, [r7, #38]	; 0x26
					itoa(freq*(2048/256), freqstring, 10);
 80006cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	220a      	movs	r2, #10
 80006d2:	4912      	ldr	r1, [pc, #72]	; (800071c <calculate+0x158>)
 80006d4:	4618      	mov	r0, r3
 80006d6:	f005 fc31 	bl	8005f3c <itoa>
					xSemaphoreGive(printSemaphore);
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <calculate+0x138>)
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	2300      	movs	r3, #0
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	f002 f9be 	bl	8002a64 <xQueueGenericSend>
		{
 80006e8:	e79c      	b.n	8000624 <calculate+0x60>
//		vTaskDelay(10/portTICK_PERIOD_MS);


		}
	}
}
 80006ea:	bf00      	nop
 80006ec:	3738      	adds	r7, #56	; 0x38
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000049c 	.word	0x2000049c
 80006f8:	2000149a 	.word	0x2000149a
 80006fc:	20000090 	.word	0x20000090
 8000700:	20000094 	.word	0x20000094
 8000704:	20000098 	.word	0x20000098
 8000708:	2000009c 	.word	0x2000009c
 800070c:	2000009e 	.word	0x2000009e
 8000710:	50040000 	.word	0x50040000
 8000714:	200049f0 	.word	0x200049f0
 8000718:	48000800 	.word	0x48000800
 800071c:	200049e4 	.word	0x200049e4

08000720 <print>:

void print(void *argument)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	printgraph();
 8000728:	f000 f9d0 	bl	8000acc <printgraph>
	printnumbers();
 800072c:	f000 fa1e 	bl	8000b6c <printnumbers>
	eraseplot();
 8000730:	f000 f99c 	bl	8000a6c <eraseplot>

	for(;;)
	{

		if(xSemaphoreTake(printSemaphore, ( TickType_t ) 400) == pdTRUE)
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <print+0x64>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800073c:	4618      	mov	r0, r3
 800073e:	f002 fc97 	bl	8003070 <xQueueSemaphoreTake>
 8000742:	4603      	mov	r3, r0
 8000744:	2b01      	cmp	r3, #1
 8000746:	d1f5      	bne.n	8000734 <print+0x14>
		{
			GPIOC->ODR ^=GPIO_ODR_OD0;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <print+0x68>)
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <print+0x68>)
 800074e:	f083 0301 	eor.w	r3, r3, #1
 8000752:	6153      	str	r3, [r2, #20]
			eraseplot();
 8000754:	f000 f98a 	bl	8000a6c <eraseplot>
			printmag(testOutput,max);
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <print+0x6c>)
 800075a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800075e:	b29b      	uxth	r3, r3
 8000760:	4619      	mov	r1, r3
 8000762:	480b      	ldr	r0, [pc, #44]	; (8000790 <print+0x70>)
 8000764:	f000 f8e2 	bl	800092c <printmag>
			UART_escapes("[H");
 8000768:	480a      	ldr	r0, [pc, #40]	; (8000794 <print+0x74>)
 800076a:	f000 f8c7 	bl	80008fc <UART_escapes>
			UART_escapes("[11C");
 800076e:	480a      	ldr	r0, [pc, #40]	; (8000798 <print+0x78>)
 8000770:	f000 f8c4 	bl	80008fc <UART_escapes>
			UART_escapes("[K");
 8000774:	4809      	ldr	r0, [pc, #36]	; (800079c <print+0x7c>)
 8000776:	f000 f8c1 	bl	80008fc <UART_escapes>
			UART_print(freqstring);
 800077a:	4809      	ldr	r0, [pc, #36]	; (80007a0 <print+0x80>)
 800077c:	f000 f870 	bl	8000860 <UART_print>
		if(xSemaphoreTake(printSemaphore, ( TickType_t ) 400) == pdTRUE)
 8000780:	e7d8      	b.n	8000734 <print+0x14>
 8000782:	bf00      	nop
 8000784:	20000090 	.word	0x20000090
 8000788:	48000800 	.word	0x48000800
 800078c:	200049f0 	.word	0x200049f0
 8000790:	2000009c 	.word	0x2000009c
 8000794:	08006198 	.word	0x08006198
 8000798:	080061ac 	.word	0x080061ac
 800079c:	080061b4 	.word	0x080061b4
 80007a0:	200049e4 	.word	0x200049e4

080007a4 <UART_Init>:
#include <string.h>



void UART_Init()
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

	//Will be utilizing GPIOA Ports A2(TX) and A3(RX) for USART2
	GPIOA->AFR[0] =  (GPIOA->AFR[0]&~(GPIO_AFRL_AFSEL3_Msk|GPIO_AFRL_AFSEL2_Msk)) | (0x77<<GPIO_AFRL_AFSEL2_Pos);; //makes it AF7 for usart2
 80007a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007ac:	6a1b      	ldr	r3, [r3, #32]
 80007ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80007b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007b6:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80007ba:	6213      	str	r3, [r2, #32]
	GPIOA->MODER = ((GPIOA->MODER) &~ (GPIO_MODER_MODE3_Msk|GPIO_MODER_MODE2_Msk))|(0b1010<<GPIO_MODER_MODE2_Pos); //set as AF
 80007bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80007c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007ca:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80007ce:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR = GPIOA->PUPDR &~ (GPIO_PUPDR_PUPD3_Msk|GPIO_PUPDR_PUPD2_Msk); // set pull-up pull-down to 00
 80007d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80007de:	60d3      	str	r3, [r2, #12]
	GPIOA->OTYPER = GPIOA->OTYPER &~ (GPIO_OTYPER_OT3_Msk|GPIO_OTYPER_OT2_Msk); // set push-pull
 80007e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007ea:	f023 030c 	bic.w	r3, r3, #12
 80007ee:	6053      	str	r3, [r2, #4]

	RCC->APB1ENR1 |= (RCC_APB1ENR1_USART2EN_Msk);
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <UART_Init+0xb0>)
 80007f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f4:	4a17      	ldr	r2, [pc, #92]	; (8000854 <UART_Init+0xb0>)
 80007f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fa:	6593      	str	r3, [r2, #88]	; 0x58

	//Declare the length of the transmitted word: 8 for ascii
	USART2->CR1 = USART2->CR1 &~ (USART_CR1_M1_Msk|USART_CR1_M0_Msk); //set 0 0 for length 8
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <UART_Init+0xb4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a15      	ldr	r2, [pc, #84]	; (8000858 <UART_Init+0xb4>)
 8000802:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000806:	6013      	str	r3, [r2, #0]
	//Declare desired baud rate: for 4M/9600 = 416 also oversampling by 16
	USART2->BRR = BRR_VALUE;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <UART_Init+0xb4>)
 800080a:	f242 028d 	movw	r2, #8333	; 0x208d
 800080e:	60da      	str	r2, [r3, #12]
	//Declare the amount of stop bits: 1
	USART2->CR2 &= ~(USART_CR2_STOP_Msk);
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <UART_Init+0xb4>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	4a10      	ldr	r2, [pc, #64]	; (8000858 <UART_Init+0xb4>)
 8000816:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800081a:	6053      	str	r3, [r2, #4]

	//Usart Enable Bit
	USART2->CR1 |= (USART_CR1_UE);
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <UART_Init+0xb4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0d      	ldr	r2, [pc, #52]	; (8000858 <UART_Init+0xb4>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6013      	str	r3, [r2, #0]

	//Transmit And Receive Enable Bits
	USART2->CR1 |= (USART_CR1_TE|USART_CR1_RE);
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <UART_Init+0xb4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0a      	ldr	r2, [pc, #40]	; (8000858 <UART_Init+0xb4>)
 800082e:	f043 030c 	orr.w	r3, r3, #12
 8000832:	6013      	str	r3, [r2, #0]

	//Receive interrupt enable
	USART2->CR1 |= (USART_CR1_RXNEIE);
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <UART_Init+0xb4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a07      	ldr	r2, [pc, #28]	; (8000858 <UART_Init+0xb4>)
 800083a:	f043 0320 	orr.w	r3, r3, #32
 800083e:	6013      	str	r3, [r2, #0]

	//enable USART2 ISR in NVIC
	NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <UART_Init+0xb8>)
 8000842:	2240      	movs	r2, #64	; 0x40
 8000844:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000846:	b662      	cpsie	i
}
 8000848:	bf00      	nop


	__enable_irq();
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	40021000 	.word	0x40021000
 8000858:	40004400 	.word	0x40004400
 800085c:	e000e100 	.word	0xe000e100

08000860 <UART_print>:

void UART_print(char *outputstring)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	for(uint16_t currchar = 0; currchar<strlen(outputstring);currchar++)
 8000868:	2300      	movs	r3, #0
 800086a:	81fb      	strh	r3, [r7, #14]
 800086c:	e010      	b.n	8000890 <UART_print+0x30>
	{
		while(!(USART2->ISR & USART_ISR_TXE)); //Transmit data register empty, using negation since value of 0 means data has not been transferred
 800086e:	bf00      	nop
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <UART_print+0x48>)
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000878:	2b00      	cmp	r3, #0
 800087a:	d0f9      	beq.n	8000870 <UART_print+0x10>

		USART2->TDR = outputstring[currchar];
 800087c:	89fb      	ldrh	r3, [r7, #14]
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	781a      	ldrb	r2, [r3, #0]
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <UART_print+0x48>)
 8000886:	b292      	uxth	r2, r2
 8000888:	851a      	strh	r2, [r3, #40]	; 0x28
	for(uint16_t currchar = 0; currchar<strlen(outputstring);currchar++)
 800088a:	89fb      	ldrh	r3, [r7, #14]
 800088c:	3301      	adds	r3, #1
 800088e:	81fb      	strh	r3, [r7, #14]
 8000890:	89fc      	ldrh	r4, [r7, #14]
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff fc9c 	bl	80001d0 <strlen>
 8000898:	4603      	mov	r3, r0
 800089a:	429c      	cmp	r4, r3
 800089c:	d3e7      	bcc.n	800086e <UART_print+0xe>
	}

}
 800089e:	bf00      	nop
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd90      	pop	{r4, r7, pc}
 80008a8:	40004400 	.word	0x40004400

080008ac <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
	uint8_t RX = USART2->RDR;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <USART2_IRQHandler+0x40>)
 80008b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	71fb      	strb	r3, [r7, #7]
	char tempstr[6]={'\0'};
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	2300      	movs	r3, #0
 80008c0:	80bb      	strh	r3, [r7, #4]
	switch(RX)
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b0d      	cmp	r3, #13
 80008c6:	d002      	beq.n	80008ce <USART2_IRQHandler+0x22>
 80008c8:	2b4a      	cmp	r3, #74	; 0x4a
 80008ca:	d007      	beq.n	80008dc <USART2_IRQHandler+0x30>

			if(RX-0x30>=0 && RX-0x30<=9)
			{

			}
				break;
 80008cc:	e00a      	b.n	80008e4 <USART2_IRQHandler+0x38>
			UART_escapes("[1B");//move down 1 line
 80008ce:	4808      	ldr	r0, [pc, #32]	; (80008f0 <USART2_IRQHandler+0x44>)
 80008d0:	f000 f814 	bl	80008fc <UART_escapes>
			UART_escapes("\r"); //carriage return
 80008d4:	4807      	ldr	r0, [pc, #28]	; (80008f4 <USART2_IRQHandler+0x48>)
 80008d6:	f000 f811 	bl	80008fc <UART_escapes>
			break;
 80008da:	e003      	b.n	80008e4 <USART2_IRQHandler+0x38>
			UART_escapes("[2J"); //clear everything
 80008dc:	4806      	ldr	r0, [pc, #24]	; (80008f8 <USART2_IRQHandler+0x4c>)
 80008de:	f000 f80d 	bl	80008fc <UART_escapes>
			break;
 80008e2:	bf00      	nop
	}
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40004400 	.word	0x40004400
 80008f0:	080061b8 	.word	0x080061b8
 80008f4:	080061bc 	.word	0x080061bc
 80008f8:	080061c0 	.word	0x080061c0

080008fc <UART_escapes>:

void UART_escapes(char *escstring)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	while(!(USART2->ISR & USART_ISR_TXE));//do not advance until receiving transmit flag
 8000904:	bf00      	nop
 8000906:	4b08      	ldr	r3, [pc, #32]	; (8000928 <UART_escapes+0x2c>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0f9      	beq.n	8000906 <UART_escapes+0xa>
	USART2->TDR = (0x1B);  // ESC
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <UART_escapes+0x2c>)
 8000914:	221b      	movs	r2, #27
 8000916:	851a      	strh	r2, [r3, #40]	; 0x28
	UART_print(escstring);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ffa1 	bl	8000860 <UART_print>

}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40004400 	.word	0x40004400

0800092c <printmag>:
#include "DMA.h"
#include "UART_plotter.h"
#include "UART.h"

void printmag(int16_t outputpoints[512], uint16_t max)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	807b      	strh	r3, [r7, #2]
	int16_t outputmag = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	817b      	strh	r3, [r7, #10]
	uint8_t mag = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]

	UART_escapes("[H");
 8000940:	4840      	ldr	r0, [pc, #256]	; (8000a44 <printmag+0x118>)
 8000942:	f7ff ffdb 	bl	80008fc <UART_escapes>
	UART_escapes("[4C");
 8000946:	4840      	ldr	r0, [pc, #256]	; (8000a48 <printmag+0x11c>)
 8000948:	f7ff ffd8 	bl	80008fc <UART_escapes>
	UART_escapes("[3B");
 800094c:	483f      	ldr	r0, [pc, #252]	; (8000a4c <printmag+0x120>)
 800094e:	f7ff ffd5 	bl	80008fc <UART_escapes>
	UART_escapes("[2C");
 8000952:	483f      	ldr	r0, [pc, #252]	; (8000a50 <printmag+0x124>)
 8000954:	f7ff ffd2 	bl	80008fc <UART_escapes>
	UART_escapes("[24B");
 8000958:	483e      	ldr	r0, [pc, #248]	; (8000a54 <printmag+0x128>)
 800095a:	f7ff ffcf 	bl	80008fc <UART_escapes>
	UART_escapes("[s");
 800095e:	483e      	ldr	r0, [pc, #248]	; (8000a58 <printmag+0x12c>)
 8000960:	f7ff ffcc 	bl	80008fc <UART_escapes>
	for(mag = 0; mag<(outputpoints[0]*10)/(3*max); mag++)
 8000964:	2300      	movs	r3, #0
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	e00b      	b.n	8000982 <printmag+0x56>
	{
		UART_print("*");
 800096a:	483c      	ldr	r0, [pc, #240]	; (8000a5c <printmag+0x130>)
 800096c:	f7ff ff78 	bl	8000860 <UART_print>
		UART_escapes("[1A");
 8000970:	483b      	ldr	r0, [pc, #236]	; (8000a60 <printmag+0x134>)
 8000972:	f7ff ffc3 	bl	80008fc <UART_escapes>
		UART_escapes("[1D");
 8000976:	483b      	ldr	r0, [pc, #236]	; (8000a64 <printmag+0x138>)
 8000978:	f7ff ffc0 	bl	80008fc <UART_escapes>
	for(mag = 0; mag<(outputpoints[0]*10)/(3*max); mag++)
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	3301      	adds	r3, #1
 8000980:	73fb      	strb	r3, [r7, #15]
 8000982:	7bf9      	ldrb	r1, [r7, #15]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800098a:	461a      	mov	r2, r3
 800098c:	4613      	mov	r3, r2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	4413      	add	r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	4618      	mov	r0, r3
 8000996:	887a      	ldrh	r2, [r7, #2]
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	fb90 f3f3 	sdiv	r3, r0, r3
 80009a2:	4299      	cmp	r1, r3
 80009a4:	dbe1      	blt.n	800096a <printmag+0x3e>

	}



	for(uint16_t index = 2; index+2 < LENGTH_OF_FFT; index=index+4)
 80009a6:	2302      	movs	r3, #2
 80009a8:	81bb      	strh	r3, [r7, #12]
 80009aa:	e043      	b.n	8000a34 <printmag+0x108>
	{
		outputpoints[index];
		outputmag = ((outputpoints[index]*20)/max+(outputpoints[index+2]*20)/max)/2;
 80009ac:	89bb      	ldrh	r3, [r7, #12]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	4413      	add	r3, r2
 80009b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4613      	mov	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	461a      	mov	r2, r3
 80009c4:	887b      	ldrh	r3, [r7, #2]
 80009c6:	fb92 f2f3 	sdiv	r2, r2, r3
 80009ca:	89bb      	ldrh	r3, [r7, #12]
 80009cc:	3302      	adds	r3, #2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	6879      	ldr	r1, [r7, #4]
 80009d2:	440b      	add	r3, r1
 80009d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009d8:	4619      	mov	r1, r3
 80009da:	460b      	mov	r3, r1
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	440b      	add	r3, r1
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4619      	mov	r1, r3
 80009e4:	887b      	ldrh	r3, [r7, #2]
 80009e6:	fb91 f3f3 	sdiv	r3, r1, r3
 80009ea:	4413      	add	r3, r2
 80009ec:	0fda      	lsrs	r2, r3, #31
 80009ee:	4413      	add	r3, r2
 80009f0:	105b      	asrs	r3, r3, #1
 80009f2:	817b      	strh	r3, [r7, #10]
		UART_escapes("8");
 80009f4:	481c      	ldr	r0, [pc, #112]	; (8000a68 <printmag+0x13c>)
 80009f6:	f7ff ff81 	bl	80008fc <UART_escapes>
		UART_escapes("[2C");
 80009fa:	4815      	ldr	r0, [pc, #84]	; (8000a50 <printmag+0x124>)
 80009fc:	f7ff ff7e 	bl	80008fc <UART_escapes>
		UART_escapes("[s");
 8000a00:	4815      	ldr	r0, [pc, #84]	; (8000a58 <printmag+0x12c>)
 8000a02:	f7ff ff7b 	bl	80008fc <UART_escapes>

		for(mag = 0; mag<outputmag; mag++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	73fb      	strb	r3, [r7, #15]
 8000a0a:	e00b      	b.n	8000a24 <printmag+0xf8>
		{
			UART_print("*");
 8000a0c:	4813      	ldr	r0, [pc, #76]	; (8000a5c <printmag+0x130>)
 8000a0e:	f7ff ff27 	bl	8000860 <UART_print>
			UART_escapes("[1A");
 8000a12:	4813      	ldr	r0, [pc, #76]	; (8000a60 <printmag+0x134>)
 8000a14:	f7ff ff72 	bl	80008fc <UART_escapes>
			UART_escapes("[1D");
 8000a18:	4812      	ldr	r0, [pc, #72]	; (8000a64 <printmag+0x138>)
 8000a1a:	f7ff ff6f 	bl	80008fc <UART_escapes>
		for(mag = 0; mag<outputmag; mag++)
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	3301      	adds	r3, #1
 8000a22:	73fb      	strb	r3, [r7, #15]
 8000a24:	7bfa      	ldrb	r2, [r7, #15]
 8000a26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	dbee      	blt.n	8000a0c <printmag+0xe0>
	for(uint16_t index = 2; index+2 < LENGTH_OF_FFT; index=index+4)
 8000a2e:	89bb      	ldrh	r3, [r7, #12]
 8000a30:	3304      	adds	r3, #4
 8000a32:	81bb      	strh	r3, [r7, #12]
 8000a34:	89bb      	ldrh	r3, [r7, #12]
 8000a36:	2bfd      	cmp	r3, #253	; 0xfd
 8000a38:	d9b8      	bls.n	80009ac <printmag+0x80>
		}

	}

}
 8000a3a:	bf00      	nop
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	080061c4 	.word	0x080061c4
 8000a48:	080061c8 	.word	0x080061c8
 8000a4c:	080061cc 	.word	0x080061cc
 8000a50:	080061d0 	.word	0x080061d0
 8000a54:	080061d4 	.word	0x080061d4
 8000a58:	080061dc 	.word	0x080061dc
 8000a5c:	080061e0 	.word	0x080061e0
 8000a60:	080061e4 	.word	0x080061e4
 8000a64:	080061e8 	.word	0x080061e8
 8000a68:	080061ec 	.word	0x080061ec

08000a6c <eraseplot>:


void eraseplot()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	UART_escapes("[H");
 8000a72:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <eraseplot+0x48>)
 8000a74:	f7ff ff42 	bl	80008fc <UART_escapes>
	UART_escapes("[4C");
 8000a78:	480f      	ldr	r0, [pc, #60]	; (8000ab8 <eraseplot+0x4c>)
 8000a7a:	f7ff ff3f 	bl	80008fc <UART_escapes>
	UART_escapes("[3B");
 8000a7e:	480f      	ldr	r0, [pc, #60]	; (8000abc <eraseplot+0x50>)
 8000a80:	f7ff ff3c 	bl	80008fc <UART_escapes>
	UART_escapes("[2C");
 8000a84:	480e      	ldr	r0, [pc, #56]	; (8000ac0 <eraseplot+0x54>)
 8000a86:	f7ff ff39 	bl	80008fc <UART_escapes>
	for(uint16_t verticalborder = 0; verticalborder <25; verticalborder++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	80fb      	strh	r3, [r7, #6]
 8000a8e:	e008      	b.n	8000aa2 <eraseplot+0x36>
		{
			UART_escapes("[K");
 8000a90:	480c      	ldr	r0, [pc, #48]	; (8000ac4 <eraseplot+0x58>)
 8000a92:	f7ff ff33 	bl	80008fc <UART_escapes>
			UART_escapes("[1B");
 8000a96:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <eraseplot+0x5c>)
 8000a98:	f7ff ff30 	bl	80008fc <UART_escapes>
	for(uint16_t verticalborder = 0; verticalborder <25; verticalborder++)
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	80fb      	strh	r3, [r7, #6]
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	2b18      	cmp	r3, #24
 8000aa6:	d9f3      	bls.n	8000a90 <eraseplot+0x24>


		}
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	080061c4 	.word	0x080061c4
 8000ab8:	080061c8 	.word	0x080061c8
 8000abc:	080061cc 	.word	0x080061cc
 8000ac0:	080061d0 	.word	0x080061d0
 8000ac4:	080061f0 	.word	0x080061f0
 8000ac8:	080061f4 	.word	0x080061f4

08000acc <printgraph>:


void printgraph()
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
	UART_escapes("[H");
 8000ad2:	481d      	ldr	r0, [pc, #116]	; (8000b48 <printgraph+0x7c>)
 8000ad4:	f7ff ff12 	bl	80008fc <UART_escapes>

	//[nB down n lines, [nA up n lines, [nC right n lines, [nD left n lines
	UART_escapes("[4C");
 8000ad8:	481c      	ldr	r0, [pc, #112]	; (8000b4c <printgraph+0x80>)
 8000ada:	f7ff ff0f 	bl	80008fc <UART_escapes>
	UART_escapes("[3B");
 8000ade:	481c      	ldr	r0, [pc, #112]	; (8000b50 <printgraph+0x84>)
 8000ae0:	f7ff ff0c 	bl	80008fc <UART_escapes>
	UART_escapes("[1C");
 8000ae4:	481b      	ldr	r0, [pc, #108]	; (8000b54 <printgraph+0x88>)
 8000ae6:	f7ff ff09 	bl	80008fc <UART_escapes>
	UART_escapes("[s");
 8000aea:	481b      	ldr	r0, [pc, #108]	; (8000b58 <printgraph+0x8c>)
 8000aec:	f7ff ff06 	bl	80008fc <UART_escapes>
	UART_escapes("[1D");
 8000af0:	481a      	ldr	r0, [pc, #104]	; (8000b5c <printgraph+0x90>)
 8000af2:	f7ff ff03 	bl	80008fc <UART_escapes>
	for(uint16_t verticalborder = 0; verticalborder <25; verticalborder++)
 8000af6:	2300      	movs	r3, #0
 8000af8:	81fb      	strh	r3, [r7, #14]
 8000afa:	e00b      	b.n	8000b14 <printgraph+0x48>
	{
		UART_print("|");
 8000afc:	4818      	ldr	r0, [pc, #96]	; (8000b60 <printgraph+0x94>)
 8000afe:	f7ff feaf 	bl	8000860 <UART_print>
		UART_escapes("[1B");
 8000b02:	4818      	ldr	r0, [pc, #96]	; (8000b64 <printgraph+0x98>)
 8000b04:	f7ff fefa 	bl	80008fc <UART_escapes>
		UART_escapes("[1D");
 8000b08:	4814      	ldr	r0, [pc, #80]	; (8000b5c <printgraph+0x90>)
 8000b0a:	f7ff fef7 	bl	80008fc <UART_escapes>
	for(uint16_t verticalborder = 0; verticalborder <25; verticalborder++)
 8000b0e:	89fb      	ldrh	r3, [r7, #14]
 8000b10:	3301      	adds	r3, #1
 8000b12:	81fb      	strh	r3, [r7, #14]
 8000b14:	89fb      	ldrh	r3, [r7, #14]
 8000b16:	2b18      	cmp	r3, #24
 8000b18:	d9f0      	bls.n	8000afc <printgraph+0x30>


	}

	uint16_t freq = 128;
 8000b1a:	2380      	movs	r3, #128	; 0x80
 8000b1c:	817b      	strh	r3, [r7, #10]
	char freqstr1[4];
	UART_escapes("[1C");
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <printgraph+0x88>)
 8000b20:	f7ff feec 	bl	80008fc <UART_escapes>
	for(uint16_t horizontalborder = 0; horizontalborder <128; horizontalborder++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	81bb      	strh	r3, [r7, #12]
 8000b28:	e005      	b.n	8000b36 <printgraph+0x6a>
	{


			UART_print("_");
 8000b2a:	480f      	ldr	r0, [pc, #60]	; (8000b68 <printgraph+0x9c>)
 8000b2c:	f7ff fe98 	bl	8000860 <UART_print>
	for(uint16_t horizontalborder = 0; horizontalborder <128; horizontalborder++)
 8000b30:	89bb      	ldrh	r3, [r7, #12]
 8000b32:	3301      	adds	r3, #1
 8000b34:	81bb      	strh	r3, [r7, #12]
 8000b36:	89bb      	ldrh	r3, [r7, #12]
 8000b38:	2b7f      	cmp	r3, #127	; 0x7f
 8000b3a:	d9f6      	bls.n	8000b2a <printgraph+0x5e>
//		itoa(freq,freqstr1, 10);
//		UART_print(freqstr1);
//		freq +=128;
//	}

}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	080061c4 	.word	0x080061c4
 8000b4c:	080061c8 	.word	0x080061c8
 8000b50:	080061cc 	.word	0x080061cc
 8000b54:	080061f8 	.word	0x080061f8
 8000b58:	080061dc 	.word	0x080061dc
 8000b5c:	080061e8 	.word	0x080061e8
 8000b60:	080061fc 	.word	0x080061fc
 8000b64:	080061f4 	.word	0x080061f4
 8000b68:	08006200 	.word	0x08006200

08000b6c <printnumbers>:

void printnumbers()
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
	uint16_t freq = 128;
 8000b72:	2380      	movs	r3, #128	; 0x80
 8000b74:	81fb      	strh	r3, [r7, #14]
	uint16_t num = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	817b      	strh	r3, [r7, #10]
	char spacingstr[4];
	char freqstr1[4];
	UART_escapes("[127D");
 8000b7a:	4817      	ldr	r0, [pc, #92]	; (8000bd8 <printnumbers+0x6c>)
 8000b7c:	f7ff febe 	bl	80008fc <UART_escapes>
	UART_escapes("[1B");
 8000b80:	4816      	ldr	r0, [pc, #88]	; (8000bdc <printnumbers+0x70>)
 8000b82:	f7ff febb 	bl	80008fc <UART_escapes>
	uint16_t placenum=0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	81bb      	strh	r3, [r7, #12]
	for(placenum=0; placenum<8; ++placenum)
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	81bb      	strh	r3, [r7, #12]
 8000b8e:	e012      	b.n	8000bb6 <printnumbers+0x4a>
	{
		itoa(freq,freqstr1, 10);
 8000b90:	89fb      	ldrh	r3, [r7, #14]
 8000b92:	4639      	mov	r1, r7
 8000b94:	220a      	movs	r2, #10
 8000b96:	4618      	mov	r0, r3
 8000b98:	f005 f9d0 	bl	8005f3c <itoa>
//		num = 14-(sizeof(freqstr1)/sizeof(char));
//		sprintf(spacingstr, "[%dC", num);
		UART_escapes("[13C");
 8000b9c:	4810      	ldr	r0, [pc, #64]	; (8000be0 <printnumbers+0x74>)
 8000b9e:	f7ff fead 	bl	80008fc <UART_escapes>
		UART_print(freqstr1);
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fe5b 	bl	8000860 <UART_print>
		freq +=128;
 8000baa:	89fb      	ldrh	r3, [r7, #14]
 8000bac:	3380      	adds	r3, #128	; 0x80
 8000bae:	81fb      	strh	r3, [r7, #14]
	for(placenum=0; placenum<8; ++placenum)
 8000bb0:	89bb      	ldrh	r3, [r7, #12]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	81bb      	strh	r3, [r7, #12]
 8000bb6:	89bb      	ldrh	r3, [r7, #12]
 8000bb8:	2b07      	cmp	r3, #7
 8000bba:	d9e9      	bls.n	8000b90 <printnumbers+0x24>
	}
	UART_escapes("[1B");
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <printnumbers+0x70>)
 8000bbe:	f7ff fe9d 	bl	80008fc <UART_escapes>
	UART_escapes("[80D");
 8000bc2:	4808      	ldr	r0, [pc, #32]	; (8000be4 <printnumbers+0x78>)
 8000bc4:	f7ff fe9a 	bl	80008fc <UART_escapes>
	UART_print("Frequency (Hz)");
 8000bc8:	4807      	ldr	r0, [pc, #28]	; (8000be8 <printnumbers+0x7c>)
 8000bca:	f7ff fe49 	bl	8000860 <UART_print>

}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	08006204 	.word	0x08006204
 8000bdc:	080061f4 	.word	0x080061f4
 8000be0:	0800620c 	.word	0x0800620c
 8000be4:	08006214 	.word	0x08006214
 8000be8:	0800621c 	.word	0x0800621c

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf2:	f000 f9f4 	bl	8000fde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf6:	f000 f84f 	bl	8000c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfa:	f000 f89f 	bl	8000d3c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bfe:	f001 fcc1 	bl	8002584 <osKernelInitialize>
  /* Create the thread(s) */
  /* creation of defaultTask */
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

	GPIO_init();
 8000c02:	f7ff fc9d 	bl	8000540 <GPIO_init>
	ADC_init();
 8000c06:	f7ff faeb 	bl	80001e0 <ADC_init>
	DMA1channel1_ADC_init(collectedsamples);
 8000c0a:	4819      	ldr	r0, [pc, #100]	; (8000c70 <main+0x84>)
 8000c0c:	f7ff fbbe 	bl	800038c <DMA1channel1_ADC_init>
	tim2_init();
 8000c10:	f000 f974 	bl	8000efc <tim2_init>
	UART_Init();
 8000c14:	f7ff fdc6 	bl	80007a4 <UART_Init>
	UART_escapes("[H");
 8000c18:	4816      	ldr	r0, [pc, #88]	; (8000c74 <main+0x88>)
 8000c1a:	f7ff fe6f 	bl	80008fc <UART_escapes>
	UART_print("Frequency: ");
 8000c1e:	4816      	ldr	r0, [pc, #88]	; (8000c78 <main+0x8c>)
 8000c20:	f7ff fe1e 	bl	8000860 <UART_print>
	UART_escapes("[s");
 8000c24:	4815      	ldr	r0, [pc, #84]	; (8000c7c <main+0x90>)
 8000c26:	f7ff fe69 	bl	80008fc <UART_escapes>


//  retVal = xTaskCreate(setupFFT, "setupFFT", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+3, &setup_FFT_Handler);
//  if(retVal!=pdPASS){while(1);}//task creation failed

  retVal = xTaskCreate(calculate, "calculate", 4*configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+4, &calculate_freq_Handler);
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <main+0x94>)
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	2304      	movs	r3, #4
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2300      	movs	r3, #0
 8000c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c38:	4912      	ldr	r1, [pc, #72]	; (8000c84 <main+0x98>)
 8000c3a:	4813      	ldr	r0, [pc, #76]	; (8000c88 <main+0x9c>)
 8000c3c:	f002 fd07 	bl	800364e <xTaskCreate>
 8000c40:	6078      	str	r0, [r7, #4]
  if(retVal!=pdPASS){while(1);}//task creation failed
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d000      	beq.n	8000c4a <main+0x5e>
 8000c48:	e7fe      	b.n	8000c48 <main+0x5c>

  retVal = xTaskCreate(print, "print",configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY+1, &print_freq_Handler);
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <main+0xa0>)
 8000c4c:	9301      	str	r3, [sp, #4]
 8000c4e:	2301      	movs	r3, #1
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	2300      	movs	r3, #0
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	490e      	ldr	r1, [pc, #56]	; (8000c90 <main+0xa4>)
 8000c58:	480e      	ldr	r0, [pc, #56]	; (8000c94 <main+0xa8>)
 8000c5a:	f002 fcf8 	bl	800364e <xTaskCreate>
 8000c5e:	6078      	str	r0, [r7, #4]
  if(retVal!=pdPASS){while(1);}//task creation failed
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d000      	beq.n	8000c68 <main+0x7c>
 8000c66:	e7fe      	b.n	8000c66 <main+0x7a>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c68:	f001 fcb0 	bl	80025cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <main+0x80>
 8000c6e:	bf00      	nop
 8000c70:	2000049c 	.word	0x2000049c
 8000c74:	0800622c 	.word	0x0800622c
 8000c78:	08006230 	.word	0x08006230
 8000c7c:	0800623c 	.word	0x0800623c
 8000c80:	200049e0 	.word	0x200049e0
 8000c84:	08006240 	.word	0x08006240
 8000c88:	080005c5 	.word	0x080005c5
 8000c8c:	200049ec 	.word	0x200049ec
 8000c90:	0800624c 	.word	0x0800624c
 8000c94:	08000721 	.word	0x08000721

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b096      	sub	sp, #88	; 0x58
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	2244      	movs	r2, #68	; 0x44
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f005 f95a 	bl	8005f60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	463b      	mov	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cba:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cbe:	f000 fadb 	bl	8001278 <HAL_PWREx_ControlVoltageScaling>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cc8:	f000 f862 	bl	8000d90 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000cd8:	2360      	movs	r3, #96	; 0x60
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ce8:	2328      	movs	r3, #40	; 0x28
 8000cea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cec:	2307      	movs	r3, #7
 8000cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fb11 	bl	8001324 <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000d08:	f000 f842 	bl	8000d90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	230f      	movs	r3, #15
 8000d0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d10:	2303      	movs	r3, #3
 8000d12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d20:	463b      	mov	r3, r7
 8000d22:	2104      	movs	r1, #4
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 fed7 	bl	8001ad8 <HAL_RCC_ClockConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d30:	f000 f82e 	bl	8000d90 <Error_Handler>
  }
}
 8000d34:	bf00      	nop
 8000d36:	3758      	adds	r7, #88	; 0x58
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <MX_GPIO_Init+0x2c>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <MX_GPIO_Init+0x2c>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_GPIO_Init+0x2c>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]

}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000

08000d6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d101      	bne.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d7e:	f000 f947 	bl	8001010 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40001000 	.word	0x40001000

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <Error_Handler+0x8>
	...

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_MspInit+0x4c>)
 8000da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <HAL_MspInit+0x4c>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6613      	str	r3, [r2, #96]	; 0x60
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_MspInit+0x4c>)
 8000db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_MspInit+0x4c>)
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	210f      	movs	r1, #15
 8000dd6:	f06f 0001 	mvn.w	r0, #1
 8000dda:	f000 fa15 	bl	8001208 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40021000 	.word	0x40021000

08000dec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	; 0x30
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	2036      	movs	r0, #54	; 0x36
 8000e02:	f000 fa01 	bl	8001208 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e06:	2036      	movs	r0, #54	; 0x36
 8000e08:	f000 fa1a 	bl	8001240 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <HAL_InitTick+0x9c>)
 8000e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e10:	4a1d      	ldr	r2, [pc, #116]	; (8000e88 <HAL_InitTick+0x9c>)
 8000e12:	f043 0310 	orr.w	r3, r3, #16
 8000e16:	6593      	str	r3, [r2, #88]	; 0x58
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_InitTick+0x9c>)
 8000e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1c:	f003 0310 	and.w	r3, r3, #16
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e24:	f107 0210 	add.w	r2, r7, #16
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 f800 	bl	8001e34 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e34:	f000 ffe8 	bl	8001e08 <HAL_RCC_GetPCLK1Freq>
 8000e38:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e3c:	4a13      	ldr	r2, [pc, #76]	; (8000e8c <HAL_InitTick+0xa0>)
 8000e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e42:	0c9b      	lsrs	r3, r3, #18
 8000e44:	3b01      	subs	r3, #1
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_InitTick+0xa4>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <HAL_InitTick+0xa8>)
 8000e4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <HAL_InitTick+0xa4>)
 8000e50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e54:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_InitTick+0xa4>)
 8000e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_InitTick+0xa4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_InitTick+0xa4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e68:	4809      	ldr	r0, [pc, #36]	; (8000e90 <HAL_InitTick+0xa4>)
 8000e6a:	f001 f875 	bl	8001f58 <HAL_TIM_Base_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d104      	bne.n	8000e7e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e74:	4806      	ldr	r0, [pc, #24]	; (8000e90 <HAL_InitTick+0xa4>)
 8000e76:	f001 f8d1 	bl	800201c <HAL_TIM_Base_Start_IT>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	e000      	b.n	8000e80 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3730      	adds	r7, #48	; 0x30
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	431bde83 	.word	0x431bde83
 8000e90:	200049f4 	.word	0x200049f4
 8000e94:	40001000 	.word	0x40001000

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <NMI_Handler+0x4>

08000e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <TIM6_DAC_IRQHandler+0x10>)
 8000eca:	f001 f917 	bl	80020fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200049f4 	.word	0x200049f4

08000ed8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <tim2_init>:

/*
 * setup timer 2
 */
void tim2_init()
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
	//capture compare mode ch2
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; // enable clock for tim2
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <tim2_init+0x8c>)
 8000f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f04:	4a20      	ldr	r2, [pc, #128]	; (8000f88 <tim2_init+0x8c>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6593      	str	r3, [r2, #88]	; 0x58

	TIM2->CCER |= (TIM_CCER_CC2E);        // enable capture compare
 8000f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f16:	f043 0310 	orr.w	r3, r3, #16
 8000f1a:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~(TIM_CCER_CC2P);       // rising edge non inverted
 8000f1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f26:	f023 0320 	bic.w	r3, r3, #32
 8000f2a:	6213      	str	r3, [r2, #32]
	TIM2->CCER &= ~(TIM_CCER_CC2NP);
 8000f2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f3a:	6213      	str	r3, [r2, #32]
	TIM2->CCR2 = 0;
 8000f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f40:	2200      	movs	r2, #0
 8000f42:	639a      	str	r2, [r3, #56]	; 0x38

	TIM2->CCMR1 &= ~(TIM_CCMR1_CC2S); // set as output
 8000f44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f52:	6193      	str	r3, [r2, #24]

	TIM2-> CCMR1 |= (TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_0); //
 8000f54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f58:	699b      	ldr	r3, [r3, #24]
 8000f5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000f62:	6193      	str	r3, [r2, #24]

	TIM2->ARR = ARR_VALUE; //setting
 8000f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f68:	f649 0296 	movw	r2, #39062	; 0x9896
 8000f6c:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM2->CR1 |= (TIM_CR1_CEN);
 8000f6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6013      	str	r3, [r2, #0]

}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	40021000 	.word	0x40021000

08000f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f90:	f7ff ffa2 	bl	8000ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f96:	490d      	ldr	r1, [pc, #52]	; (8000fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <LoopForever+0xe>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fac:	4c0a      	ldr	r4, [pc, #40]	; (8000fd8 <LoopForever+0x16>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fba:	f004 ff83 	bl	8005ec4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fbe:	f7ff fe15 	bl	8000bec <main>

08000fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fc2:	e7fe      	b.n	8000fc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fc4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000fd0:	0801819c 	.word	0x0801819c
  ldr r2, =_sbss
 8000fd4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000fd8:	20004a90 	.word	0x20004a90

08000fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_2_IRQHandler>

08000fde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f902 	bl	80011f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fee:	200f      	movs	r0, #15
 8000ff0:	f7ff fefc 	bl	8000dec <HAL_InitTick>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d002      	beq.n	8001000 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
 8000ffe:	e001      	b.n	8001004 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001000:	f7ff fecc 	bl	8000d9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001004:	79fb      	ldrb	r3, [r7, #7]
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x20>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_IncTick+0x24>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_IncTick+0x24>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008
 8001034:	20004a40 	.word	0x20004a40

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20004a40 	.word	0x20004a40

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001068:	d005      	beq.n	8001076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <HAL_Delay+0x44>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4413      	add	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001076:	bf00      	nop
 8001078:	f7ff ffde 	bl	8001038 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8f7      	bhi.n	8001078 <HAL_Delay+0x28>
  {
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000008 	.word	0x20000008

08001098 <__NVIC_SetPriorityGrouping>:
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b4:	4013      	ands	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ca:	4a04      	ldr	r2, [pc, #16]	; (80010dc <__NVIC_SetPriorityGrouping+0x44>)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	60d3      	str	r3, [r2, #12]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_GetPriorityGrouping>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <__NVIC_GetPriorityGrouping+0x18>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	0a1b      	lsrs	r3, r3, #8
 80010ea:	f003 0307 	and.w	r3, r3, #7
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_EnableIRQ>:
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	2b00      	cmp	r3, #0
 800110c:	db0b      	blt.n	8001126 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	f003 021f 	and.w	r2, r3, #31
 8001114:	4907      	ldr	r1, [pc, #28]	; (8001134 <__NVIC_EnableIRQ+0x38>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	095b      	lsrs	r3, r3, #5
 800111c:	2001      	movs	r0, #1
 800111e:	fa00 f202 	lsl.w	r2, r0, r2
 8001122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000e100 	.word	0xe000e100

08001138 <__NVIC_SetPriority>:
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	db0a      	blt.n	8001162 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	490c      	ldr	r1, [pc, #48]	; (8001184 <__NVIC_SetPriority+0x4c>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	440b      	add	r3, r1
 800115c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001160:	e00a      	b.n	8001178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4908      	ldr	r1, [pc, #32]	; (8001188 <__NVIC_SetPriority+0x50>)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	3b04      	subs	r3, #4
 8001170:	0112      	lsls	r2, r2, #4
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	440b      	add	r3, r1
 8001176:	761a      	strb	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	bf28      	it	cs
 80011aa:	2304      	movcs	r3, #4
 80011ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3304      	adds	r3, #4
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d902      	bls.n	80011bc <NVIC_EncodePriority+0x30>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3b03      	subs	r3, #3
 80011ba:	e000      	b.n	80011be <NVIC_EncodePriority+0x32>
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	43d9      	mvns	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	4313      	orrs	r3, r2
         );
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff4c 	bl	8001098 <__NVIC_SetPriorityGrouping>
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800121a:	f7ff ff61 	bl	80010e0 <__NVIC_GetPriorityGrouping>
 800121e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	68b9      	ldr	r1, [r7, #8]
 8001224:	6978      	ldr	r0, [r7, #20]
 8001226:	f7ff ffb1 	bl	800118c <NVIC_EncodePriority>
 800122a:	4602      	mov	r2, r0
 800122c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff80 	bl	8001138 <__NVIC_SetPriority>
}
 8001238:	bf00      	nop
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff54 	bl	80010fc <__NVIC_EnableIRQ>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <HAL_PWREx_GetVoltageRange+0x18>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40007000 	.word	0x40007000

08001278 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001286:	d130      	bne.n	80012ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001294:	d038      	beq.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800129e:	4a1e      	ldr	r2, [pc, #120]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2232      	movs	r2, #50	; 0x32
 80012ac:	fb02 f303 	mul.w	r3, r2, r3
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	0c9b      	lsrs	r3, r3, #18
 80012b8:	3301      	adds	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012bc:	e002      	b.n	80012c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d0:	d102      	bne.n	80012d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f2      	bne.n	80012be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e4:	d110      	bne.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e00f      	b.n	800130a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f6:	d007      	beq.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001300:	4a05      	ldr	r2, [pc, #20]	; (8001318 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001306:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40007000 	.word	0x40007000
 800131c:	20000000 	.word	0x20000000
 8001320:	431bde83 	.word	0x431bde83

08001324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e3c6      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001336:	4ba1      	ldr	r3, [pc, #644]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001340:	4b9e      	ldr	r3, [pc, #632]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 80e4 	beq.w	8001520 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d007      	beq.n	800136e <HAL_RCC_OscConfig+0x4a>
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2b0c      	cmp	r3, #12
 8001362:	f040 808b 	bne.w	800147c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	2b01      	cmp	r3, #1
 800136a:	f040 8087 	bne.w	800147c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800136e:	4b93      	ldr	r3, [pc, #588]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_RCC_OscConfig+0x62>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e39e      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1a      	ldr	r2, [r3, #32]
 800138a:	4b8c      	ldr	r3, [pc, #560]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d004      	beq.n	80013a0 <HAL_RCC_OscConfig+0x7c>
 8001396:	4b89      	ldr	r3, [pc, #548]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800139e:	e005      	b.n	80013ac <HAL_RCC_OscConfig+0x88>
 80013a0:	4b86      	ldr	r3, [pc, #536]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80013a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013a6:	091b      	lsrs	r3, r3, #4
 80013a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d223      	bcs.n	80013f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a1b      	ldr	r3, [r3, #32]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fd6f 	bl	8001e98 <RCC_SetFlashLatencyFromMSIRange>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e37f      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c4:	4b7d      	ldr	r3, [pc, #500]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a7c      	ldr	r2, [pc, #496]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80013ca:	f043 0308 	orr.w	r3, r3, #8
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b7a      	ldr	r3, [pc, #488]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4977      	ldr	r1, [pc, #476]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e2:	4b76      	ldr	r3, [pc, #472]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	4972      	ldr	r1, [pc, #456]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	604b      	str	r3, [r1, #4]
 80013f6:	e025      	b.n	8001444 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013f8:	4b70      	ldr	r3, [pc, #448]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a6f      	ldr	r2, [pc, #444]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80013fe:	f043 0308 	orr.w	r3, r3, #8
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b6d      	ldr	r3, [pc, #436]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	496a      	ldr	r1, [pc, #424]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 8001412:	4313      	orrs	r3, r2
 8001414:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001416:	4b69      	ldr	r3, [pc, #420]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	4965      	ldr	r1, [pc, #404]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 8001426:	4313      	orrs	r3, r2
 8001428:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d109      	bne.n	8001444 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	4618      	mov	r0, r3
 8001436:	f000 fd2f 	bl	8001e98 <RCC_SetFlashLatencyFromMSIRange>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e33f      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001444:	f000 fc48 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001448:	4602      	mov	r2, r0
 800144a:	4b5c      	ldr	r3, [pc, #368]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	091b      	lsrs	r3, r3, #4
 8001450:	f003 030f 	and.w	r3, r3, #15
 8001454:	495a      	ldr	r1, [pc, #360]	; (80015c0 <HAL_RCC_OscConfig+0x29c>)
 8001456:	5ccb      	ldrb	r3, [r1, r3]
 8001458:	f003 031f 	and.w	r3, r3, #31
 800145c:	fa22 f303 	lsr.w	r3, r2, r3
 8001460:	4a58      	ldr	r2, [pc, #352]	; (80015c4 <HAL_RCC_OscConfig+0x2a0>)
 8001462:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001464:	4b58      	ldr	r3, [pc, #352]	; (80015c8 <HAL_RCC_OscConfig+0x2a4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fcbf 	bl	8000dec <HAL_InitTick>
 800146e:	4603      	mov	r3, r0
 8001470:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d052      	beq.n	800151e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	e323      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d032      	beq.n	80014ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001484:	4b4d      	ldr	r3, [pc, #308]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a4c      	ldr	r2, [pc, #304]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001490:	f7ff fdd2 	bl	8001038 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001498:	f7ff fdce 	bl	8001038 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e30c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014aa:	4b44      	ldr	r3, [pc, #272]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b6:	4b41      	ldr	r3, [pc, #260]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a40      	ldr	r2, [pc, #256]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80014bc:	f043 0308 	orr.w	r3, r3, #8
 80014c0:	6013      	str	r3, [r2, #0]
 80014c2:	4b3e      	ldr	r3, [pc, #248]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	493b      	ldr	r1, [pc, #236]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014d4:	4b39      	ldr	r3, [pc, #228]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	4936      	ldr	r1, [pc, #216]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]
 80014e8:	e01a      	b.n	8001520 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014ea:	4b34      	ldr	r3, [pc, #208]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a33      	ldr	r2, [pc, #204]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fd9f 	bl	8001038 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014fe:	f7ff fd9b 	bl	8001038 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e2d9      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001510:	4b2a      	ldr	r3, [pc, #168]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f0      	bne.n	80014fe <HAL_RCC_OscConfig+0x1da>
 800151c:	e000      	b.n	8001520 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800151e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	2b00      	cmp	r3, #0
 800152a:	d074      	beq.n	8001616 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b08      	cmp	r3, #8
 8001530:	d005      	beq.n	800153e <HAL_RCC_OscConfig+0x21a>
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	2b0c      	cmp	r3, #12
 8001536:	d10e      	bne.n	8001556 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b03      	cmp	r3, #3
 800153c:	d10b      	bne.n	8001556 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153e:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d064      	beq.n	8001614 <HAL_RCC_OscConfig+0x2f0>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d160      	bne.n	8001614 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e2b6      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155e:	d106      	bne.n	800156e <HAL_RCC_OscConfig+0x24a>
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a15      	ldr	r2, [pc, #84]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 8001566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	e01d      	b.n	80015aa <HAL_RCC_OscConfig+0x286>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001576:	d10c      	bne.n	8001592 <HAL_RCC_OscConfig+0x26e>
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 800157e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 800158a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	e00b      	b.n	80015aa <HAL_RCC_OscConfig+0x286>
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a09      	ldr	r2, [pc, #36]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 8001598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a06      	ldr	r2, [pc, #24]	; (80015bc <HAL_RCC_OscConfig+0x298>)
 80015a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d01c      	beq.n	80015ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b2:	f7ff fd41 	bl	8001038 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b8:	e011      	b.n	80015de <HAL_RCC_OscConfig+0x2ba>
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000
 80015c0:	0800626c 	.word	0x0800626c
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff fd34 	bl	8001038 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	; 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e272      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015de:	4baf      	ldr	r3, [pc, #700]	; (800189c <HAL_RCC_OscConfig+0x578>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0x2a8>
 80015ea:	e014      	b.n	8001616 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fd24 	bl	8001038 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f4:	f7ff fd20 	bl	8001038 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	; 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e25e      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001606:	4ba5      	ldr	r3, [pc, #660]	; (800189c <HAL_RCC_OscConfig+0x578>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x2d0>
 8001612:	e000      	b.n	8001616 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d060      	beq.n	80016e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	2b04      	cmp	r3, #4
 8001626:	d005      	beq.n	8001634 <HAL_RCC_OscConfig+0x310>
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2b0c      	cmp	r3, #12
 800162c:	d119      	bne.n	8001662 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d116      	bne.n	8001662 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001634:	4b99      	ldr	r3, [pc, #612]	; (800189c <HAL_RCC_OscConfig+0x578>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_OscConfig+0x328>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e23b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164c:	4b93      	ldr	r3, [pc, #588]	; (800189c <HAL_RCC_OscConfig+0x578>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	061b      	lsls	r3, r3, #24
 800165a:	4990      	ldr	r1, [pc, #576]	; (800189c <HAL_RCC_OscConfig+0x578>)
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001660:	e040      	b.n	80016e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d023      	beq.n	80016b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800166a:	4b8c      	ldr	r3, [pc, #560]	; (800189c <HAL_RCC_OscConfig+0x578>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a8b      	ldr	r2, [pc, #556]	; (800189c <HAL_RCC_OscConfig+0x578>)
 8001670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001676:	f7ff fcdf 	bl	8001038 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800167e:	f7ff fcdb 	bl	8001038 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e219      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001690:	4b82      	ldr	r3, [pc, #520]	; (800189c <HAL_RCC_OscConfig+0x578>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169c:	4b7f      	ldr	r3, [pc, #508]	; (800189c <HAL_RCC_OscConfig+0x578>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	061b      	lsls	r3, r3, #24
 80016aa:	497c      	ldr	r1, [pc, #496]	; (800189c <HAL_RCC_OscConfig+0x578>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
 80016b0:	e018      	b.n	80016e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b2:	4b7a      	ldr	r3, [pc, #488]	; (800189c <HAL_RCC_OscConfig+0x578>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a79      	ldr	r2, [pc, #484]	; (800189c <HAL_RCC_OscConfig+0x578>)
 80016b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016be:	f7ff fcbb 	bl	8001038 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c6:	f7ff fcb7 	bl	8001038 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e1f5      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016d8:	4b70      	ldr	r3, [pc, #448]	; (800189c <HAL_RCC_OscConfig+0x578>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f0      	bne.n	80016c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d03c      	beq.n	800176a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d01c      	beq.n	8001732 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f8:	4b68      	ldr	r3, [pc, #416]	; (800189c <HAL_RCC_OscConfig+0x578>)
 80016fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fe:	4a67      	ldr	r2, [pc, #412]	; (800189c <HAL_RCC_OscConfig+0x578>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001708:	f7ff fc96 	bl	8001038 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001710:	f7ff fc92 	bl	8001038 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e1d0      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001722:	4b5e      	ldr	r3, [pc, #376]	; (800189c <HAL_RCC_OscConfig+0x578>)
 8001724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0ef      	beq.n	8001710 <HAL_RCC_OscConfig+0x3ec>
 8001730:	e01b      	b.n	800176a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001732:	4b5a      	ldr	r3, [pc, #360]	; (800189c <HAL_RCC_OscConfig+0x578>)
 8001734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001738:	4a58      	ldr	r2, [pc, #352]	; (800189c <HAL_RCC_OscConfig+0x578>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001742:	f7ff fc79 	bl	8001038 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174a:	f7ff fc75 	bl	8001038 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1b3      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800175c:	4b4f      	ldr	r3, [pc, #316]	; (800189c <HAL_RCC_OscConfig+0x578>)
 800175e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d1ef      	bne.n	800174a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80a6 	beq.w	80018c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800177c:	4b47      	ldr	r3, [pc, #284]	; (800189c <HAL_RCC_OscConfig+0x578>)
 800177e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d10d      	bne.n	80017a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001788:	4b44      	ldr	r3, [pc, #272]	; (800189c <HAL_RCC_OscConfig+0x578>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178c:	4a43      	ldr	r2, [pc, #268]	; (800189c <HAL_RCC_OscConfig+0x578>)
 800178e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001792:	6593      	str	r3, [r2, #88]	; 0x58
 8001794:	4b41      	ldr	r3, [pc, #260]	; (800189c <HAL_RCC_OscConfig+0x578>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017a0:	2301      	movs	r3, #1
 80017a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a4:	4b3e      	ldr	r3, [pc, #248]	; (80018a0 <HAL_RCC_OscConfig+0x57c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d118      	bne.n	80017e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017b0:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <HAL_RCC_OscConfig+0x57c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a3a      	ldr	r2, [pc, #232]	; (80018a0 <HAL_RCC_OscConfig+0x57c>)
 80017b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017bc:	f7ff fc3c 	bl	8001038 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c4:	f7ff fc38 	bl	8001038 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e176      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d6:	4b32      	ldr	r3, [pc, #200]	; (80018a0 <HAL_RCC_OscConfig+0x57c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d108      	bne.n	80017fc <HAL_RCC_OscConfig+0x4d8>
 80017ea:	4b2c      	ldr	r3, [pc, #176]	; (800189c <HAL_RCC_OscConfig+0x578>)
 80017ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f0:	4a2a      	ldr	r2, [pc, #168]	; (800189c <HAL_RCC_OscConfig+0x578>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017fa:	e024      	b.n	8001846 <HAL_RCC_OscConfig+0x522>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b05      	cmp	r3, #5
 8001802:	d110      	bne.n	8001826 <HAL_RCC_OscConfig+0x502>
 8001804:	4b25      	ldr	r3, [pc, #148]	; (800189c <HAL_RCC_OscConfig+0x578>)
 8001806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180a:	4a24      	ldr	r2, [pc, #144]	; (800189c <HAL_RCC_OscConfig+0x578>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <HAL_RCC_OscConfig+0x578>)
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181a:	4a20      	ldr	r2, [pc, #128]	; (800189c <HAL_RCC_OscConfig+0x578>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001824:	e00f      	b.n	8001846 <HAL_RCC_OscConfig+0x522>
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <HAL_RCC_OscConfig+0x578>)
 8001828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182c:	4a1b      	ldr	r2, [pc, #108]	; (800189c <HAL_RCC_OscConfig+0x578>)
 800182e:	f023 0301 	bic.w	r3, r3, #1
 8001832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_RCC_OscConfig+0x578>)
 8001838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183c:	4a17      	ldr	r2, [pc, #92]	; (800189c <HAL_RCC_OscConfig+0x578>)
 800183e:	f023 0304 	bic.w	r3, r3, #4
 8001842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d016      	beq.n	800187c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184e:	f7ff fbf3 	bl	8001038 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff fbef 	bl	8001038 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	; 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e12b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_RCC_OscConfig+0x578>)
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0ed      	beq.n	8001856 <HAL_RCC_OscConfig+0x532>
 800187a:	e01a      	b.n	80018b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187c:	f7ff fbdc 	bl	8001038 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001882:	e00f      	b.n	80018a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f7ff fbd8 	bl	8001038 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d906      	bls.n	80018a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e114      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
 800189a:	bf00      	nop
 800189c:	40021000 	.word	0x40021000
 80018a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018a4:	4b89      	ldr	r3, [pc, #548]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1e8      	bne.n	8001884 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018b2:	7ffb      	ldrb	r3, [r7, #31]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d105      	bne.n	80018c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b8:	4b84      	ldr	r3, [pc, #528]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018bc:	4a83      	ldr	r2, [pc, #524]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 80018be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80fa 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	f040 80d0 	bne.w	8001a78 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018d8:	4b7c      	ldr	r3, [pc, #496]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f003 0203 	and.w	r2, r3, #3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d130      	bne.n	800194e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	3b01      	subs	r3, #1
 80018f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d127      	bne.n	800194e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001908:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d11f      	bne.n	800194e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001918:	2a07      	cmp	r2, #7
 800191a:	bf14      	ite	ne
 800191c:	2201      	movne	r2, #1
 800191e:	2200      	moveq	r2, #0
 8001920:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001922:	4293      	cmp	r3, r2
 8001924:	d113      	bne.n	800194e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001930:	085b      	lsrs	r3, r3, #1
 8001932:	3b01      	subs	r3, #1
 8001934:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d109      	bne.n	800194e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001944:	085b      	lsrs	r3, r3, #1
 8001946:	3b01      	subs	r3, #1
 8001948:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d06e      	beq.n	8001a2c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2b0c      	cmp	r3, #12
 8001952:	d069      	beq.n	8001a28 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001954:	4b5d      	ldr	r3, [pc, #372]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d105      	bne.n	800196c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001960:	4b5a      	ldr	r3, [pc, #360]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0a9      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001970:	4b56      	ldr	r3, [pc, #344]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a55      	ldr	r2, [pc, #340]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800197a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800197c:	f7ff fb5c 	bl	8001038 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001984:	f7ff fb58 	bl	8001038 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e096      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001996:	4b4d      	ldr	r3, [pc, #308]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a2:	4b4a      	ldr	r3, [pc, #296]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	4b4a      	ldr	r3, [pc, #296]	; (8001ad0 <HAL_RCC_OscConfig+0x7ac>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019b2:	3a01      	subs	r2, #1
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	4311      	orrs	r1, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019bc:	0212      	lsls	r2, r2, #8
 80019be:	4311      	orrs	r1, r2
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019c4:	0852      	lsrs	r2, r2, #1
 80019c6:	3a01      	subs	r2, #1
 80019c8:	0552      	lsls	r2, r2, #21
 80019ca:	4311      	orrs	r1, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019d0:	0852      	lsrs	r2, r2, #1
 80019d2:	3a01      	subs	r2, #1
 80019d4:	0652      	lsls	r2, r2, #25
 80019d6:	4311      	orrs	r1, r2
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019dc:	0912      	lsrs	r2, r2, #4
 80019de:	0452      	lsls	r2, r2, #17
 80019e0:	430a      	orrs	r2, r1
 80019e2:	493a      	ldr	r1, [pc, #232]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019e8:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a37      	ldr	r2, [pc, #220]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 80019ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019f4:	4b35      	ldr	r3, [pc, #212]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4a34      	ldr	r2, [pc, #208]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 80019fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a00:	f7ff fb1a 	bl	8001038 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff fb16 	bl	8001038 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e054      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1a:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a26:	e04c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e04b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d144      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a23      	ldr	r2, [pc, #140]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4a20      	ldr	r2, [pc, #128]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a50:	f7ff faf2 	bl	8001038 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff faee 	bl	8001038 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e02c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x734>
 8001a76:	e024      	b.n	8001ac2 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	2b0c      	cmp	r3, #12
 8001a7c:	d01f      	beq.n	8001abe <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001a84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fad5 	bl	8001038 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a92:	f7ff fad1 	bl	8001038 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e00f      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	4905      	ldr	r1, [pc, #20]	; (8001acc <HAL_RCC_OscConfig+0x7a8>)
 8001ab6:	4b07      	ldr	r3, [pc, #28]	; (8001ad4 <HAL_RCC_OscConfig+0x7b0>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60cb      	str	r3, [r1, #12]
 8001abc:	e001      	b.n	8001ac2 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	f99d808c 	.word	0xf99d808c
 8001ad4:	feeefffc 	.word	0xfeeefffc

08001ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0e7      	b.n	8001cbc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aec:	4b75      	ldr	r3, [pc, #468]	; (8001cc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d910      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b72      	ldr	r3, [pc, #456]	; (8001cc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 0207 	bic.w	r2, r3, #7
 8001b02:	4970      	ldr	r1, [pc, #448]	; (8001cc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b6e      	ldr	r3, [pc, #440]	; (8001cc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0cf      	b.n	8001cbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d010      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	4b66      	ldr	r3, [pc, #408]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d908      	bls.n	8001b4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b38:	4b63      	ldr	r3, [pc, #396]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	4960      	ldr	r1, [pc, #384]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d04c      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5e:	4b5a      	ldr	r3, [pc, #360]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d121      	bne.n	8001bae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e0a6      	b.n	8001cbc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b76:	4b54      	ldr	r3, [pc, #336]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d115      	bne.n	8001bae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e09a      	b.n	8001cbc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b8e:	4b4e      	ldr	r3, [pc, #312]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e08e      	b.n	8001cbc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b9e:	4b4a      	ldr	r3, [pc, #296]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e086      	b.n	8001cbc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bae:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f023 0203 	bic.w	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4943      	ldr	r1, [pc, #268]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bc0:	f7ff fa3a 	bl	8001038 <HAL_GetTick>
 8001bc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc8:	f7ff fa36 	bl	8001038 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e06e      	b.n	8001cbc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 020c 	and.w	r2, r3, #12
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1eb      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d010      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d208      	bcs.n	8001c1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0c:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	492b      	ldr	r1, [pc, #172]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d210      	bcs.n	8001c4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 0207 	bic.w	r2, r3, #7
 8001c34:	4923      	ldr	r1, [pc, #140]	; (8001cc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e036      	b.n	8001cbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d008      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	4918      	ldr	r1, [pc, #96]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d009      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4910      	ldr	r1, [pc, #64]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c8c:	f000 f824 	bl	8001cd8 <HAL_RCC_GetSysClockFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	f003 030f 	and.w	r3, r3, #15
 8001c9c:	490b      	ldr	r1, [pc, #44]	; (8001ccc <HAL_RCC_ClockConfig+0x1f4>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca8:	4a09      	ldr	r2, [pc, #36]	; (8001cd0 <HAL_RCC_ClockConfig+0x1f8>)
 8001caa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cac:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <HAL_RCC_ClockConfig+0x1fc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f89b 	bl	8000dec <HAL_InitTick>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cba:	7afb      	ldrb	r3, [r7, #11]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	0800626c 	.word	0x0800626c
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	20000004 	.word	0x20000004

08001cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ce6:	4b3e      	ldr	r3, [pc, #248]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf0:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x34>
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	2b0c      	cmp	r3, #12
 8001d04:	d121      	bne.n	8001d4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d11e      	bne.n	8001d4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d0c:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d18:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d1e:	0a1b      	lsrs	r3, r3, #8
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	e005      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d28:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d34:	4a2b      	ldr	r2, [pc, #172]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10d      	bne.n	8001d60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d102      	bne.n	8001d56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d52:	61bb      	str	r3, [r7, #24]
 8001d54:	e004      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d101      	bne.n	8001d60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d5c:	4b23      	ldr	r3, [pc, #140]	; (8001dec <HAL_RCC_GetSysClockFreq+0x114>)
 8001d5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	2b0c      	cmp	r3, #12
 8001d64:	d134      	bne.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d66:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d003      	beq.n	8001d7e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d003      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0xac>
 8001d7c:	e005      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d80:	617b      	str	r3, [r7, #20]
      break;
 8001d82:	e005      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_RCC_GetSysClockFreq+0x114>)
 8001d86:	617b      	str	r3, [r7, #20]
      break;
 8001d88:	e002      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	617b      	str	r3, [r7, #20]
      break;
 8001d8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	0a1b      	lsrs	r3, r3, #8
 8001da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	fb02 f203 	mul.w	r2, r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	0e5b      	lsrs	r3, r3, #25
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dd0:	69bb      	ldr	r3, [r7, #24]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3724      	adds	r7, #36	; 0x24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	08006284 	.word	0x08006284
 8001de8:	00f42400 	.word	0x00f42400
 8001dec:	007a1200 	.word	0x007a1200

08001df0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000000 	.word	0x20000000

08001e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e0c:	f7ff fff0 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	4904      	ldr	r1, [pc, #16]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	0800627c 	.word	0x0800627c

08001e34 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	220f      	movs	r2, #15
 8001e42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_RCC_GetClockConfig+0x5c>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0203 	and.w	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_RCC_GetClockConfig+0x5c>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_GetClockConfig+0x5c>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	08db      	lsrs	r3, r3, #3
 8001e6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <HAL_RCC_GetClockConfig+0x60>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0207 	and.w	r2, r3, #7
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	601a      	str	r2, [r3, #0]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40022000 	.word	0x40022000

08001e98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ea4:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001eb0:	f7ff f9d4 	bl	800125c <HAL_PWREx_GetVoltageRange>
 8001eb4:	6178      	str	r0, [r7, #20]
 8001eb6:	e014      	b.n	8001ee2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001eb8:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	4a24      	ldr	r2, [pc, #144]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec4:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ed0:	f7ff f9c4 	bl	800125c <HAL_PWREx_GetVoltageRange>
 8001ed4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee8:	d10b      	bne.n	8001f02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b80      	cmp	r3, #128	; 0x80
 8001eee:	d919      	bls.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2ba0      	cmp	r3, #160	; 0xa0
 8001ef4:	d902      	bls.n	8001efc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	e013      	b.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001efc:	2301      	movs	r3, #1
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	e010      	b.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b80      	cmp	r3, #128	; 0x80
 8001f06:	d902      	bls.n	8001f0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f08:	2303      	movs	r3, #3
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	e00a      	b.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2b80      	cmp	r3, #128	; 0x80
 8001f12:	d102      	bne.n	8001f1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f14:	2302      	movs	r3, #2
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	e004      	b.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b70      	cmp	r3, #112	; 0x70
 8001f1e:	d101      	bne.n	8001f24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f20:	2301      	movs	r3, #1
 8001f22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 0207 	bic.w	r2, r3, #7
 8001f2c:	4909      	ldr	r1, [pc, #36]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d001      	beq.n	8001f46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40022000 	.word	0x40022000

08001f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e049      	b.n	8001ffe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f841 	bl	8002006 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3304      	adds	r3, #4
 8001f94:	4619      	mov	r1, r3
 8001f96:	4610      	mov	r0, r2
 8001f98:	f000 f9f8 	bl	800238c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b01      	cmp	r3, #1
 800202e:	d001      	beq.n	8002034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e04f      	b.n	80020d4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a23      	ldr	r2, [pc, #140]	; (80020e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01d      	beq.n	8002092 <HAL_TIM_Base_Start_IT+0x76>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800205e:	d018      	beq.n	8002092 <HAL_TIM_Base_Start_IT+0x76>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1f      	ldr	r2, [pc, #124]	; (80020e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_TIM_Base_Start_IT+0x76>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a1e      	ldr	r2, [pc, #120]	; (80020e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d00e      	beq.n	8002092 <HAL_TIM_Base_Start_IT+0x76>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <HAL_TIM_Base_Start_IT+0xd0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d009      	beq.n	8002092 <HAL_TIM_Base_Start_IT+0x76>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d004      	beq.n	8002092 <HAL_TIM_Base_Start_IT+0x76>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a19      	ldr	r2, [pc, #100]	; (80020f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d115      	bne.n	80020be <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800209a:	4013      	ands	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b06      	cmp	r3, #6
 80020a2:	d015      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0xb4>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020aa:	d011      	beq.n	80020d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020bc:	e008      	b.n	80020d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0201 	orr.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e000      	b.n	80020d2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40012c00 	.word	0x40012c00
 80020e4:	40000400 	.word	0x40000400
 80020e8:	40000800 	.word	0x40000800
 80020ec:	40000c00 	.word	0x40000c00
 80020f0:	40013400 	.word	0x40013400
 80020f4:	40014000 	.word	0x40014000
 80020f8:	00010007 	.word	0x00010007

080020fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b02      	cmp	r3, #2
 8002110:	d122      	bne.n	8002158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b02      	cmp	r3, #2
 800211e:	d11b      	bne.n	8002158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0202 	mvn.w	r2, #2
 8002128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f905 	bl	800234e <HAL_TIM_IC_CaptureCallback>
 8002144:	e005      	b.n	8002152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f8f7 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f908 	bl	8002362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b04      	cmp	r3, #4
 8002164:	d122      	bne.n	80021ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b04      	cmp	r3, #4
 8002172:	d11b      	bne.n	80021ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0204 	mvn.w	r2, #4
 800217c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2202      	movs	r2, #2
 8002182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f8db 	bl	800234e <HAL_TIM_IC_CaptureCallback>
 8002198:	e005      	b.n	80021a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f8cd 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f8de 	bl	8002362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d122      	bne.n	8002200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d11b      	bne.n	8002200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0208 	mvn.w	r2, #8
 80021d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2204      	movs	r2, #4
 80021d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f8b1 	bl	800234e <HAL_TIM_IC_CaptureCallback>
 80021ec:	e005      	b.n	80021fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f8a3 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f8b4 	bl	8002362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0310 	and.w	r3, r3, #16
 800220a:	2b10      	cmp	r3, #16
 800220c:	d122      	bne.n	8002254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b10      	cmp	r3, #16
 800221a:	d11b      	bne.n	8002254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0210 	mvn.w	r2, #16
 8002224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2208      	movs	r2, #8
 800222a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f887 	bl	800234e <HAL_TIM_IC_CaptureCallback>
 8002240:	e005      	b.n	800224e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 f879 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f88a 	bl	8002362 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d10e      	bne.n	8002280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d107      	bne.n	8002280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0201 	mvn.w	r2, #1
 8002278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe fd76 	bl	8000d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228a:	2b80      	cmp	r3, #128	; 0x80
 800228c:	d10e      	bne.n	80022ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002298:	2b80      	cmp	r3, #128	; 0x80
 800229a:	d107      	bne.n	80022ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f914 	bl	80024d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ba:	d10e      	bne.n	80022da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c6:	2b80      	cmp	r3, #128	; 0x80
 80022c8:	d107      	bne.n	80022da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80022d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f907 	bl	80024e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e4:	2b40      	cmp	r3, #64	; 0x40
 80022e6:	d10e      	bne.n	8002306 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f2:	2b40      	cmp	r3, #64	; 0x40
 80022f4:	d107      	bne.n	8002306 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f838 	bl	8002376 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f003 0320 	and.w	r3, r3, #32
 8002310:	2b20      	cmp	r3, #32
 8002312:	d10e      	bne.n	8002332 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	2b20      	cmp	r3, #32
 8002320:	d107      	bne.n	8002332 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f06f 0220 	mvn.w	r2, #32
 800232a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f8c7 	bl	80024c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002362:	b480      	push	{r7}
 8002364:	b083      	sub	sp, #12
 8002366:	af00      	add	r7, sp, #0
 8002368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a40      	ldr	r2, [pc, #256]	; (80024a0 <TIM_Base_SetConfig+0x114>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d013      	beq.n	80023cc <TIM_Base_SetConfig+0x40>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023aa:	d00f      	beq.n	80023cc <TIM_Base_SetConfig+0x40>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3d      	ldr	r2, [pc, #244]	; (80024a4 <TIM_Base_SetConfig+0x118>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d00b      	beq.n	80023cc <TIM_Base_SetConfig+0x40>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3c      	ldr	r2, [pc, #240]	; (80024a8 <TIM_Base_SetConfig+0x11c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d007      	beq.n	80023cc <TIM_Base_SetConfig+0x40>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a3b      	ldr	r2, [pc, #236]	; (80024ac <TIM_Base_SetConfig+0x120>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d003      	beq.n	80023cc <TIM_Base_SetConfig+0x40>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a3a      	ldr	r2, [pc, #232]	; (80024b0 <TIM_Base_SetConfig+0x124>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d108      	bne.n	80023de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a2f      	ldr	r2, [pc, #188]	; (80024a0 <TIM_Base_SetConfig+0x114>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d01f      	beq.n	8002426 <TIM_Base_SetConfig+0x9a>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ec:	d01b      	beq.n	8002426 <TIM_Base_SetConfig+0x9a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a2c      	ldr	r2, [pc, #176]	; (80024a4 <TIM_Base_SetConfig+0x118>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d017      	beq.n	8002426 <TIM_Base_SetConfig+0x9a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a2b      	ldr	r2, [pc, #172]	; (80024a8 <TIM_Base_SetConfig+0x11c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <TIM_Base_SetConfig+0x9a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a2a      	ldr	r2, [pc, #168]	; (80024ac <TIM_Base_SetConfig+0x120>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00f      	beq.n	8002426 <TIM_Base_SetConfig+0x9a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a29      	ldr	r2, [pc, #164]	; (80024b0 <TIM_Base_SetConfig+0x124>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d00b      	beq.n	8002426 <TIM_Base_SetConfig+0x9a>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a28      	ldr	r2, [pc, #160]	; (80024b4 <TIM_Base_SetConfig+0x128>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d007      	beq.n	8002426 <TIM_Base_SetConfig+0x9a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a27      	ldr	r2, [pc, #156]	; (80024b8 <TIM_Base_SetConfig+0x12c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d003      	beq.n	8002426 <TIM_Base_SetConfig+0x9a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a26      	ldr	r2, [pc, #152]	; (80024bc <TIM_Base_SetConfig+0x130>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d108      	bne.n	8002438 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800242c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4313      	orrs	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	4313      	orrs	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a10      	ldr	r2, [pc, #64]	; (80024a0 <TIM_Base_SetConfig+0x114>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d00f      	beq.n	8002484 <TIM_Base_SetConfig+0xf8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <TIM_Base_SetConfig+0x124>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00b      	beq.n	8002484 <TIM_Base_SetConfig+0xf8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a11      	ldr	r2, [pc, #68]	; (80024b4 <TIM_Base_SetConfig+0x128>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d007      	beq.n	8002484 <TIM_Base_SetConfig+0xf8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a10      	ldr	r2, [pc, #64]	; (80024b8 <TIM_Base_SetConfig+0x12c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d003      	beq.n	8002484 <TIM_Base_SetConfig+0xf8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <TIM_Base_SetConfig+0x130>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d103      	bne.n	800248c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	615a      	str	r2, [r3, #20]
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40012c00 	.word	0x40012c00
 80024a4:	40000400 	.word	0x40000400
 80024a8:	40000800 	.word	0x40000800
 80024ac:	40000c00 	.word	0x40000c00
 80024b0:	40013400 	.word	0x40013400
 80024b4:	40014000 	.word	0x40014000
 80024b8:	40014400 	.word	0x40014400
 80024bc:	40014800 	.word	0x40014800

080024c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <__NVIC_SetPriority>:
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	6039      	str	r1, [r7, #0]
 8002506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250c:	2b00      	cmp	r3, #0
 800250e:	db0a      	blt.n	8002526 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	b2da      	uxtb	r2, r3
 8002514:	490c      	ldr	r1, [pc, #48]	; (8002548 <__NVIC_SetPriority+0x4c>)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	0112      	lsls	r2, r2, #4
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	440b      	add	r3, r1
 8002520:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002524:	e00a      	b.n	800253c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4908      	ldr	r1, [pc, #32]	; (800254c <__NVIC_SetPriority+0x50>)
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	3b04      	subs	r3, #4
 8002534:	0112      	lsls	r2, r2, #4
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	440b      	add	r3, r1
 800253a:	761a      	strb	r2, [r3, #24]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000e100 	.word	0xe000e100
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <SysTick_Handler+0x1c>)
 8002556:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002558:	f001 fe30 	bl	80041bc <xTaskGetSchedulerState>
 800255c:	4603      	mov	r3, r0
 800255e:	2b01      	cmp	r3, #1
 8002560:	d001      	beq.n	8002566 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002562:	f002 fd19 	bl	8004f98 <xPortSysTickHandler>
  }
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	e000e010 	.word	0xe000e010

08002570 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002574:	2100      	movs	r1, #0
 8002576:	f06f 0004 	mvn.w	r0, #4
 800257a:	f7ff ffbf 	bl	80024fc <__NVIC_SetPriority>
#endif
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800258a:	f3ef 8305 	mrs	r3, IPSR
 800258e:	603b      	str	r3, [r7, #0]
  return(result);
 8002590:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002596:	f06f 0305 	mvn.w	r3, #5
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	e00c      	b.n	80025b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <osKernelInitialize+0x44>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d105      	bne.n	80025b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <osKernelInitialize+0x44>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	607b      	str	r3, [r7, #4]
 80025b0:	e002      	b.n	80025b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80025b8:	687b      	ldr	r3, [r7, #4]
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	2000249c 	.word	0x2000249c

080025cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025d2:	f3ef 8305 	mrs	r3, IPSR
 80025d6:	603b      	str	r3, [r7, #0]
  return(result);
 80025d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80025de:	f06f 0305 	mvn.w	r3, #5
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	e010      	b.n	8002608 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <osKernelStart+0x48>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d109      	bne.n	8002602 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80025ee:	f7ff ffbf 	bl	8002570 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <osKernelStart+0x48>)
 80025f4:	2202      	movs	r2, #2
 80025f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80025f8:	f001 f984 	bl	8003904 <vTaskStartScheduler>
      stat = osOK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	e002      	b.n	8002608 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002606:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002608:	687b      	ldr	r3, [r7, #4]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000249c 	.word	0x2000249c

08002618 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4a07      	ldr	r2, [pc, #28]	; (8002644 <vApplicationGetIdleTaskMemory+0x2c>)
 8002628:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	4a06      	ldr	r2, [pc, #24]	; (8002648 <vApplicationGetIdleTaskMemory+0x30>)
 800262e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2280      	movs	r2, #128	; 0x80
 8002634:	601a      	str	r2, [r3, #0]
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	200024a0 	.word	0x200024a0
 8002648:	2000255c 	.word	0x2000255c

0800264c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4a07      	ldr	r2, [pc, #28]	; (8002678 <vApplicationGetTimerTaskMemory+0x2c>)
 800265c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4a06      	ldr	r2, [pc, #24]	; (800267c <vApplicationGetTimerTaskMemory+0x30>)
 8002662:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800266a:	601a      	str	r2, [r3, #0]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	2000275c 	.word	0x2000275c
 800267c:	20002818 	.word	0x20002818

08002680 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f103 0208 	add.w	r2, r3, #8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002698:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f103 0208 	add.w	r2, r3, #8
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f103 0208 	add.w	r2, r3, #8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026da:	b480      	push	{r7}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
 80026e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	601a      	str	r2, [r3, #0]
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002722:	b480      	push	{r7}
 8002724:	b085      	sub	sp, #20
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002738:	d103      	bne.n	8002742 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	e00c      	b.n	800275c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3308      	adds	r3, #8
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	e002      	b.n	8002750 <vListInsert+0x2e>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	429a      	cmp	r2, r3
 800275a:	d2f6      	bcs.n	800274a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	601a      	str	r2, [r3, #0]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6892      	ldr	r2, [r2, #8]
 80027aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6852      	ldr	r2, [r2, #4]
 80027b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d103      	bne.n	80027c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	1e5a      	subs	r2, r3, #1
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10a      	bne.n	8002812 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002800:	f383 8811 	msr	BASEPRI, r3
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	f3bf 8f4f 	dsb	sy
 800280c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800280e:	bf00      	nop
 8002810:	e7fe      	b.n	8002810 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002812:	f002 fb2f 	bl	8004e74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281e:	68f9      	ldr	r1, [r7, #12]
 8002820:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002822:	fb01 f303 	mul.w	r3, r1, r3
 8002826:	441a      	add	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002842:	3b01      	subs	r3, #1
 8002844:	68f9      	ldr	r1, [r7, #12]
 8002846:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	441a      	add	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	22ff      	movs	r2, #255	; 0xff
 8002856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	22ff      	movs	r2, #255	; 0xff
 800285e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d114      	bne.n	8002892 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01a      	beq.n	80028a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3310      	adds	r3, #16
 8002874:	4618      	mov	r0, r3
 8002876:	f001 fadf 	bl	8003e38 <xTaskRemoveFromEventList>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d012      	beq.n	80028a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <xQueueGenericReset+0xcc>)
 8002882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	e009      	b.n	80028a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3310      	adds	r3, #16
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fef2 	bl	8002680 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3324      	adds	r3, #36	; 0x24
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff feed 	bl	8002680 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028a6:	f002 fb15 	bl	8004ed4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028aa:	2301      	movs	r3, #1
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	e000ed04 	.word	0xe000ed04

080028b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08e      	sub	sp, #56	; 0x38
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10a      	bne.n	80028e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80028cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028de:	bf00      	nop
 80028e0:	e7fe      	b.n	80028e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80028e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028fa:	bf00      	nop
 80028fc:	e7fe      	b.n	80028fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d002      	beq.n	800290a <xQueueGenericCreateStatic+0x52>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <xQueueGenericCreateStatic+0x56>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <xQueueGenericCreateStatic+0x58>
 800290e:	2300      	movs	r3, #0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10a      	bne.n	800292a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	623b      	str	r3, [r7, #32]
}
 8002926:	bf00      	nop
 8002928:	e7fe      	b.n	8002928 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <xQueueGenericCreateStatic+0x7e>
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <xQueueGenericCreateStatic+0x82>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <xQueueGenericCreateStatic+0x84>
 800293a:	2300      	movs	r3, #0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	61fb      	str	r3, [r7, #28]
}
 8002952:	bf00      	nop
 8002954:	e7fe      	b.n	8002954 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002956:	2350      	movs	r3, #80	; 0x50
 8002958:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2b50      	cmp	r3, #80	; 0x50
 800295e:	d00a      	beq.n	8002976 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	61bb      	str	r3, [r7, #24]
}
 8002972:	bf00      	nop
 8002974:	e7fe      	b.n	8002974 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002976:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00d      	beq.n	800299e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800298a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	4613      	mov	r3, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 f83f 	bl	8002a1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3730      	adds	r7, #48	; 0x30
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	4613      	mov	r3, r2
 80029b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	613b      	str	r3, [r7, #16]
}
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	3350      	adds	r3, #80	; 0x50
 80029e0:	4618      	mov	r0, r3
 80029e2:	f002 fb69 	bl	80050b8 <pvPortMalloc>
 80029e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d011      	beq.n	8002a12 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3350      	adds	r3, #80	; 0x50
 80029f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a00:	79fa      	ldrb	r2, [r7, #7]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	4613      	mov	r3, r2
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f805 	bl	8002a1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a12:	69bb      	ldr	r3, [r7, #24]
	}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3720      	adds	r7, #32
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d103      	bne.n	8002a38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	e002      	b.n	8002a3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	69b8      	ldr	r0, [r7, #24]
 8002a4e:	f7ff fecb 	bl	80027e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08e      	sub	sp, #56	; 0x38
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a72:	2300      	movs	r3, #0
 8002a74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10a      	bne.n	8002a96 <xQueueGenericSend+0x32>
	__asm volatile
 8002a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a92:	bf00      	nop
 8002a94:	e7fe      	b.n	8002a94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d103      	bne.n	8002aa4 <xQueueGenericSend+0x40>
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <xQueueGenericSend+0x44>
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <xQueueGenericSend+0x46>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10a      	bne.n	8002ac4 <xQueueGenericSend+0x60>
	__asm volatile
 8002aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab2:	f383 8811 	msr	BASEPRI, r3
 8002ab6:	f3bf 8f6f 	isb	sy
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ac0:	bf00      	nop
 8002ac2:	e7fe      	b.n	8002ac2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d103      	bne.n	8002ad2 <xQueueGenericSend+0x6e>
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <xQueueGenericSend+0x72>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <xQueueGenericSend+0x74>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10a      	bne.n	8002af2 <xQueueGenericSend+0x8e>
	__asm volatile
 8002adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae0:	f383 8811 	msr	BASEPRI, r3
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	623b      	str	r3, [r7, #32]
}
 8002aee:	bf00      	nop
 8002af0:	e7fe      	b.n	8002af0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002af2:	f001 fb63 	bl	80041bc <xTaskGetSchedulerState>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d102      	bne.n	8002b02 <xQueueGenericSend+0x9e>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <xQueueGenericSend+0xa2>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <xQueueGenericSend+0xa4>
 8002b06:	2300      	movs	r3, #0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <xQueueGenericSend+0xbe>
	__asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	61fb      	str	r3, [r7, #28]
}
 8002b1e:	bf00      	nop
 8002b20:	e7fe      	b.n	8002b20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b22:	f002 f9a7 	bl	8004e74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d302      	bcc.n	8002b38 <xQueueGenericSend+0xd4>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d129      	bne.n	8002b8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b3e:	f000 fbbb 	bl	80032b8 <prvCopyDataToQueue>
 8002b42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d010      	beq.n	8002b6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4e:	3324      	adds	r3, #36	; 0x24
 8002b50:	4618      	mov	r0, r3
 8002b52:	f001 f971 	bl	8003e38 <xTaskRemoveFromEventList>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d013      	beq.n	8002b84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b5c:	4b3f      	ldr	r3, [pc, #252]	; (8002c5c <xQueueGenericSend+0x1f8>)
 8002b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	e00a      	b.n	8002b84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b74:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <xQueueGenericSend+0x1f8>)
 8002b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b84:	f002 f9a6 	bl	8004ed4 <vPortExitCritical>
				return pdPASS;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e063      	b.n	8002c54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d103      	bne.n	8002b9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b92:	f002 f99f 	bl	8004ed4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e05c      	b.n	8002c54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d106      	bne.n	8002bae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 f9ab 	bl	8003f00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002baa:	2301      	movs	r3, #1
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bae:	f002 f991 	bl	8004ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bb2:	f000 ff17 	bl	80039e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bb6:	f002 f95d 	bl	8004e74 <vPortEnterCritical>
 8002bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bc0:	b25b      	sxtb	r3, r3
 8002bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bc6:	d103      	bne.n	8002bd0 <xQueueGenericSend+0x16c>
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bd6:	b25b      	sxtb	r3, r3
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bdc:	d103      	bne.n	8002be6 <xQueueGenericSend+0x182>
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002be6:	f002 f975 	bl	8004ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bea:	1d3a      	adds	r2, r7, #4
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 f99a 	bl	8003f2c <xTaskCheckForTimeOut>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d124      	bne.n	8002c48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c00:	f000 fc52 	bl	80034a8 <prvIsQueueFull>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d018      	beq.n	8002c3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0c:	3310      	adds	r3, #16
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f001 f8c0 	bl	8003d98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c1a:	f000 fbdd 	bl	80033d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c1e:	f000 feef 	bl	8003a00 <xTaskResumeAll>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f47f af7c 	bne.w	8002b22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <xQueueGenericSend+0x1f8>)
 8002c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	e772      	b.n	8002b22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c3e:	f000 fbcb 	bl	80033d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c42:	f000 fedd 	bl	8003a00 <xTaskResumeAll>
 8002c46:	e76c      	b.n	8002b22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c4a:	f000 fbc5 	bl	80033d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c4e:	f000 fed7 	bl	8003a00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3738      	adds	r7, #56	; 0x38
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	e000ed04 	.word	0xe000ed04

08002c60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b090      	sub	sp, #64	; 0x40
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
 8002c6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d10a      	bne.n	8002c8e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c8a:	bf00      	nop
 8002c8c:	e7fe      	b.n	8002c8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d103      	bne.n	8002c9c <xQueueGenericSendFromISR+0x3c>
 8002c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <xQueueGenericSendFromISR+0x40>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <xQueueGenericSendFromISR+0x42>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10a      	bne.n	8002cbc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cb8:	bf00      	nop
 8002cba:	e7fe      	b.n	8002cba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d103      	bne.n	8002cca <xQueueGenericSendFromISR+0x6a>
 8002cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <xQueueGenericSendFromISR+0x6e>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <xQueueGenericSendFromISR+0x70>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10a      	bne.n	8002cea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	623b      	str	r3, [r7, #32]
}
 8002ce6:	bf00      	nop
 8002ce8:	e7fe      	b.n	8002ce8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cea:	f002 f9a5 	bl	8005038 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002cee:	f3ef 8211 	mrs	r2, BASEPRI
 8002cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf6:	f383 8811 	msr	BASEPRI, r3
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	f3bf 8f4f 	dsb	sy
 8002d02:	61fa      	str	r2, [r7, #28]
 8002d04:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d06:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d302      	bcc.n	8002d1c <xQueueGenericSendFromISR+0xbc>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d12f      	bne.n	8002d7c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d32:	f000 fac1 	bl	80032b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d3e:	d112      	bne.n	8002d66 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d016      	beq.n	8002d76 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4a:	3324      	adds	r3, #36	; 0x24
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f001 f873 	bl	8003e38 <xTaskRemoveFromEventList>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00e      	beq.n	8002d76 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	e007      	b.n	8002d76 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	b25a      	sxtb	r2, r3
 8002d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d76:	2301      	movs	r3, #1
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002d7a:	e001      	b.n	8002d80 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d82:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3740      	adds	r7, #64	; 0x40
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b08e      	sub	sp, #56	; 0x38
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10a      	bne.n	8002dc0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dae:	f383 8811 	msr	BASEPRI, r3
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	623b      	str	r3, [r7, #32]
}
 8002dbc:	bf00      	nop
 8002dbe:	e7fe      	b.n	8002dbe <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <xQueueGiveFromISR+0x48>
	__asm volatile
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	61fb      	str	r3, [r7, #28]
}
 8002dda:	bf00      	nop
 8002ddc:	e7fe      	b.n	8002ddc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <xQueueGiveFromISR+0x58>
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <xQueueGiveFromISR+0x5c>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <xQueueGiveFromISR+0x5e>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <xQueueGiveFromISR+0x78>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	61bb      	str	r3, [r7, #24]
}
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e0e:	f002 f913 	bl	8005038 <vPortValidateInterruptPriority>
	__asm volatile
 8002e12:	f3ef 8211 	mrs	r2, BASEPRI
 8002e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	617a      	str	r2, [r7, #20]
 8002e28:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002e2a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d22b      	bcs.n	8002e96 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e58:	d112      	bne.n	8002e80 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d016      	beq.n	8002e90 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	3324      	adds	r3, #36	; 0x24
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 ffe6 	bl	8003e38 <xTaskRemoveFromEventList>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00e      	beq.n	8002e90 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e007      	b.n	8002e90 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e84:	3301      	adds	r3, #1
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	b25a      	sxtb	r2, r3
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e90:	2301      	movs	r3, #1
 8002e92:	637b      	str	r3, [r7, #52]	; 0x34
 8002e94:	e001      	b.n	8002e9a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f383 8811 	msr	BASEPRI, r3
}
 8002ea4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3738      	adds	r7, #56	; 0x38
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08c      	sub	sp, #48	; 0x30
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10a      	bne.n	8002ee0 <xQueueReceive+0x30>
	__asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	623b      	str	r3, [r7, #32]
}
 8002edc:	bf00      	nop
 8002ede:	e7fe      	b.n	8002ede <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d103      	bne.n	8002eee <xQueueReceive+0x3e>
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <xQueueReceive+0x42>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <xQueueReceive+0x44>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <xQueueReceive+0x5e>
	__asm volatile
 8002ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efc:	f383 8811 	msr	BASEPRI, r3
 8002f00:	f3bf 8f6f 	isb	sy
 8002f04:	f3bf 8f4f 	dsb	sy
 8002f08:	61fb      	str	r3, [r7, #28]
}
 8002f0a:	bf00      	nop
 8002f0c:	e7fe      	b.n	8002f0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f0e:	f001 f955 	bl	80041bc <xTaskGetSchedulerState>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <xQueueReceive+0x6e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <xQueueReceive+0x72>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <xQueueReceive+0x74>
 8002f22:	2300      	movs	r3, #0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <xQueueReceive+0x8e>
	__asm volatile
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	61bb      	str	r3, [r7, #24]
}
 8002f3a:	bf00      	nop
 8002f3c:	e7fe      	b.n	8002f3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f3e:	f001 ff99 	bl	8004e74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01f      	beq.n	8002f8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f52:	f000 fa1b 	bl	800338c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	1e5a      	subs	r2, r3, #1
 8002f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00f      	beq.n	8002f86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f68:	3310      	adds	r3, #16
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 ff64 	bl	8003e38 <xTaskRemoveFromEventList>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d007      	beq.n	8002f86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f76:	4b3d      	ldr	r3, [pc, #244]	; (800306c <xQueueReceive+0x1bc>)
 8002f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f86:	f001 ffa5 	bl	8004ed4 <vPortExitCritical>
				return pdPASS;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e069      	b.n	8003062 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d103      	bne.n	8002f9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f94:	f001 ff9e 	bl	8004ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e062      	b.n	8003062 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fa2:	f107 0310 	add.w	r3, r7, #16
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 ffaa 	bl	8003f00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fac:	2301      	movs	r3, #1
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fb0:	f001 ff90 	bl	8004ed4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fb4:	f000 fd16 	bl	80039e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fb8:	f001 ff5c 	bl	8004e74 <vPortEnterCritical>
 8002fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fc2:	b25b      	sxtb	r3, r3
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fc8:	d103      	bne.n	8002fd2 <xQueueReceive+0x122>
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fd8:	b25b      	sxtb	r3, r3
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fde:	d103      	bne.n	8002fe8 <xQueueReceive+0x138>
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fe8:	f001 ff74 	bl	8004ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fec:	1d3a      	adds	r2, r7, #4
 8002fee:	f107 0310 	add.w	r3, r7, #16
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 ff99 	bl	8003f2c <xTaskCheckForTimeOut>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d123      	bne.n	8003048 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003002:	f000 fa3b 	bl	800347c <prvIsQueueEmpty>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d017      	beq.n	800303c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	3324      	adds	r3, #36	; 0x24
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f000 febf 	bl	8003d98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800301a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800301c:	f000 f9dc 	bl	80033d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003020:	f000 fcee 	bl	8003a00 <xTaskResumeAll>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d189      	bne.n	8002f3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <xQueueReceive+0x1bc>)
 800302c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	e780      	b.n	8002f3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800303c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800303e:	f000 f9cb 	bl	80033d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003042:	f000 fcdd 	bl	8003a00 <xTaskResumeAll>
 8003046:	e77a      	b.n	8002f3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800304a:	f000 f9c5 	bl	80033d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800304e:	f000 fcd7 	bl	8003a00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003054:	f000 fa12 	bl	800347c <prvIsQueueEmpty>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	f43f af6f 	beq.w	8002f3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003060:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003062:	4618      	mov	r0, r3
 8003064:	3730      	adds	r7, #48	; 0x30
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	e000ed04 	.word	0xe000ed04

08003070 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08e      	sub	sp, #56	; 0x38
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800307a:	2300      	movs	r3, #0
 800307c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003082:	2300      	movs	r3, #0
 8003084:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10a      	bne.n	80030a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800308c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003090:	f383 8811 	msr	BASEPRI, r3
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	623b      	str	r3, [r7, #32]
}
 800309e:	bf00      	nop
 80030a0:	e7fe      	b.n	80030a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80030a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	61fb      	str	r3, [r7, #28]
}
 80030bc:	bf00      	nop
 80030be:	e7fe      	b.n	80030be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030c0:	f001 f87c 	bl	80041bc <xTaskGetSchedulerState>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <xQueueSemaphoreTake+0x60>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <xQueueSemaphoreTake+0x64>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <xQueueSemaphoreTake+0x66>
 80030d4:	2300      	movs	r3, #0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10a      	bne.n	80030f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80030da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030de:	f383 8811 	msr	BASEPRI, r3
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	61bb      	str	r3, [r7, #24]
}
 80030ec:	bf00      	nop
 80030ee:	e7fe      	b.n	80030ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030f0:	f001 fec0 	bl	8004e74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d024      	beq.n	800314a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003102:	1e5a      	subs	r2, r3, #1
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d104      	bne.n	800311a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003110:	f001 f9ca 	bl	80044a8 <pvTaskIncrementMutexHeldCount>
 8003114:	4602      	mov	r2, r0
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00f      	beq.n	8003142 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003124:	3310      	adds	r3, #16
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fe86 	bl	8003e38 <xTaskRemoveFromEventList>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003132:	4b54      	ldr	r3, [pc, #336]	; (8003284 <xQueueSemaphoreTake+0x214>)
 8003134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003142:	f001 fec7 	bl	8004ed4 <vPortExitCritical>
				return pdPASS;
 8003146:	2301      	movs	r3, #1
 8003148:	e097      	b.n	800327a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d111      	bne.n	8003174 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	617b      	str	r3, [r7, #20]
}
 8003168:	bf00      	nop
 800316a:	e7fe      	b.n	800316a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800316c:	f001 feb2 	bl	8004ed4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003170:	2300      	movs	r3, #0
 8003172:	e082      	b.n	800327a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800317a:	f107 030c 	add.w	r3, r7, #12
 800317e:	4618      	mov	r0, r3
 8003180:	f000 febe 	bl	8003f00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003184:	2301      	movs	r3, #1
 8003186:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003188:	f001 fea4 	bl	8004ed4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800318c:	f000 fc2a 	bl	80039e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003190:	f001 fe70 	bl	8004e74 <vPortEnterCritical>
 8003194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800319a:	b25b      	sxtb	r3, r3
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031a0:	d103      	bne.n	80031aa <xQueueSemaphoreTake+0x13a>
 80031a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031b0:	b25b      	sxtb	r3, r3
 80031b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b6:	d103      	bne.n	80031c0 <xQueueSemaphoreTake+0x150>
 80031b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031c0:	f001 fe88 	bl	8004ed4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031c4:	463a      	mov	r2, r7
 80031c6:	f107 030c 	add.w	r3, r7, #12
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fead 	bl	8003f2c <xTaskCheckForTimeOut>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d132      	bne.n	800323e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80031da:	f000 f94f 	bl	800347c <prvIsQueueEmpty>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d026      	beq.n	8003232 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d109      	bne.n	8003200 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80031ec:	f001 fe42 	bl	8004e74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 ffff 	bl	80041f8 <xTaskPriorityInherit>
 80031fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80031fc:	f001 fe6a 	bl	8004ed4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003202:	3324      	adds	r3, #36	; 0x24
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fdc5 	bl	8003d98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800320e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003210:	f000 f8e2 	bl	80033d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003214:	f000 fbf4 	bl	8003a00 <xTaskResumeAll>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	f47f af68 	bne.w	80030f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003220:	4b18      	ldr	r3, [pc, #96]	; (8003284 <xQueueSemaphoreTake+0x214>)
 8003222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	e75e      	b.n	80030f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003234:	f000 f8d0 	bl	80033d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003238:	f000 fbe2 	bl	8003a00 <xTaskResumeAll>
 800323c:	e758      	b.n	80030f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800323e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003240:	f000 f8ca 	bl	80033d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003244:	f000 fbdc 	bl	8003a00 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800324a:	f000 f917 	bl	800347c <prvIsQueueEmpty>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	f43f af4d 	beq.w	80030f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00d      	beq.n	8003278 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800325c:	f001 fe0a 	bl	8004e74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003260:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003262:	f000 f811 	bl	8003288 <prvGetDisinheritPriorityAfterTimeout>
 8003266:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800326e:	4618      	mov	r0, r3
 8003270:	f001 f898 	bl	80043a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003274:	f001 fe2e 	bl	8004ed4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003278:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800327a:	4618      	mov	r0, r3
 800327c:	3738      	adds	r7, #56	; 0x38
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	e000ed04 	.word	0xe000ed04

08003288 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	2b00      	cmp	r3, #0
 8003296:	d006      	beq.n	80032a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	e001      	b.n	80032aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80032aa:	68fb      	ldr	r3, [r7, #12]
	}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10d      	bne.n	80032f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d14d      	bne.n	800337a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fff0 	bl	80042c8 <xTaskPriorityDisinherit>
 80032e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	e043      	b.n	800337a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d119      	bne.n	800332c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6858      	ldr	r0, [r3, #4]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	461a      	mov	r2, r3
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	f002 fe1e 	bl	8005f44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	441a      	add	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	429a      	cmp	r2, r3
 8003320:	d32b      	bcc.n	800337a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	605a      	str	r2, [r3, #4]
 800332a:	e026      	b.n	800337a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	68d8      	ldr	r0, [r3, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	461a      	mov	r2, r3
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	f002 fe04 	bl	8005f44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68da      	ldr	r2, [r3, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	425b      	negs	r3, r3
 8003346:	441a      	add	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d207      	bcs.n	8003368 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	425b      	negs	r3, r3
 8003362:	441a      	add	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d105      	bne.n	800337a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	3b01      	subs	r3, #1
 8003378:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003382:	697b      	ldr	r3, [r7, #20]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d018      	beq.n	80033d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	441a      	add	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d303      	bcc.n	80033c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68d9      	ldr	r1, [r3, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	461a      	mov	r2, r3
 80033ca:	6838      	ldr	r0, [r7, #0]
 80033cc:	f002 fdba 	bl	8005f44 <memcpy>
	}
}
 80033d0:	bf00      	nop
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80033e0:	f001 fd48 	bl	8004e74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033ec:	e011      	b.n	8003412 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d012      	beq.n	800341c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3324      	adds	r3, #36	; 0x24
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fd1c 	bl	8003e38 <xTaskRemoveFromEventList>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003406:	f000 fdf3 	bl	8003ff0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	3b01      	subs	r3, #1
 800340e:	b2db      	uxtb	r3, r3
 8003410:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003416:	2b00      	cmp	r3, #0
 8003418:	dce9      	bgt.n	80033ee <prvUnlockQueue+0x16>
 800341a:	e000      	b.n	800341e <prvUnlockQueue+0x46>
					break;
 800341c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	22ff      	movs	r2, #255	; 0xff
 8003422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003426:	f001 fd55 	bl	8004ed4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800342a:	f001 fd23 	bl	8004e74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003434:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003436:	e011      	b.n	800345c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d012      	beq.n	8003466 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3310      	adds	r3, #16
 8003444:	4618      	mov	r0, r3
 8003446:	f000 fcf7 	bl	8003e38 <xTaskRemoveFromEventList>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003450:	f000 fdce 	bl	8003ff0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003454:	7bbb      	ldrb	r3, [r7, #14]
 8003456:	3b01      	subs	r3, #1
 8003458:	b2db      	uxtb	r3, r3
 800345a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800345c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003460:	2b00      	cmp	r3, #0
 8003462:	dce9      	bgt.n	8003438 <prvUnlockQueue+0x60>
 8003464:	e000      	b.n	8003468 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003466:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	22ff      	movs	r2, #255	; 0xff
 800346c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003470:	f001 fd30 	bl	8004ed4 <vPortExitCritical>
}
 8003474:	bf00      	nop
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003484:	f001 fcf6 	bl	8004e74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348c:	2b00      	cmp	r3, #0
 800348e:	d102      	bne.n	8003496 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003490:	2301      	movs	r3, #1
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	e001      	b.n	800349a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800349a:	f001 fd1b 	bl	8004ed4 <vPortExitCritical>

	return xReturn;
 800349e:	68fb      	ldr	r3, [r7, #12]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034b0:	f001 fce0 	bl	8004e74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034bc:	429a      	cmp	r2, r3
 80034be:	d102      	bne.n	80034c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80034c0:	2301      	movs	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	e001      	b.n	80034ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80034ca:	f001 fd03 	bl	8004ed4 <vPortExitCritical>

	return xReturn;
 80034ce:	68fb      	ldr	r3, [r7, #12]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e014      	b.n	8003512 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80034e8:	4a0f      	ldr	r2, [pc, #60]	; (8003528 <vQueueAddToRegistry+0x50>)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10b      	bne.n	800350c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80034f4:	490c      	ldr	r1, [pc, #48]	; (8003528 <vQueueAddToRegistry+0x50>)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80034fe:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <vQueueAddToRegistry+0x50>)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800350a:	e006      	b.n	800351a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	3301      	adds	r3, #1
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b07      	cmp	r3, #7
 8003516:	d9e7      	bls.n	80034e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20004a44 	.word	0x20004a44

0800352c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800353c:	f001 fc9a 	bl	8004e74 <vPortEnterCritical>
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003546:	b25b      	sxtb	r3, r3
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800354c:	d103      	bne.n	8003556 <vQueueWaitForMessageRestricted+0x2a>
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800355c:	b25b      	sxtb	r3, r3
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003562:	d103      	bne.n	800356c <vQueueWaitForMessageRestricted+0x40>
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800356c:	f001 fcb2 	bl	8004ed4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	2b00      	cmp	r3, #0
 8003576:	d106      	bne.n	8003586 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	3324      	adds	r3, #36	; 0x24
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	68b9      	ldr	r1, [r7, #8]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fc2d 	bl	8003de0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003586:	6978      	ldr	r0, [r7, #20]
 8003588:	f7ff ff26 	bl	80033d8 <prvUnlockQueue>
	}
 800358c:	bf00      	nop
 800358e:	3718      	adds	r7, #24
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08e      	sub	sp, #56	; 0x38
 8003598:	af04      	add	r7, sp, #16
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80035a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <xTaskCreateStatic+0x2a>
	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	623b      	str	r3, [r7, #32]
}
 80035ba:	bf00      	nop
 80035bc:	e7fe      	b.n	80035bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80035be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d10a      	bne.n	80035da <xTaskCreateStatic+0x46>
	__asm volatile
 80035c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	61fb      	str	r3, [r7, #28]
}
 80035d6:	bf00      	nop
 80035d8:	e7fe      	b.n	80035d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80035da:	23bc      	movs	r3, #188	; 0xbc
 80035dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2bbc      	cmp	r3, #188	; 0xbc
 80035e2:	d00a      	beq.n	80035fa <xTaskCreateStatic+0x66>
	__asm volatile
 80035e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	61bb      	str	r3, [r7, #24]
}
 80035f6:	bf00      	nop
 80035f8:	e7fe      	b.n	80035f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80035fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d01e      	beq.n	8003640 <xTaskCreateStatic+0xac>
 8003602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01b      	beq.n	8003640 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003610:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	2202      	movs	r2, #2
 8003616:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800361a:	2300      	movs	r3, #0
 800361c:	9303      	str	r3, [sp, #12]
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	9302      	str	r3, [sp, #8]
 8003622:	f107 0314 	add.w	r3, r7, #20
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f850 	bl	80036d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003638:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800363a:	f000 f8f3 	bl	8003824 <prvAddNewTaskToReadyList>
 800363e:	e001      	b.n	8003644 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003644:	697b      	ldr	r3, [r7, #20]
	}
 8003646:	4618      	mov	r0, r3
 8003648:	3728      	adds	r7, #40	; 0x28
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800364e:	b580      	push	{r7, lr}
 8003650:	b08c      	sub	sp, #48	; 0x30
 8003652:	af04      	add	r7, sp, #16
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	4613      	mov	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4618      	mov	r0, r3
 8003664:	f001 fd28 	bl	80050b8 <pvPortMalloc>
 8003668:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00e      	beq.n	800368e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003670:	20bc      	movs	r0, #188	; 0xbc
 8003672:	f001 fd21 	bl	80050b8 <pvPortMalloc>
 8003676:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	631a      	str	r2, [r3, #48]	; 0x30
 8003684:	e005      	b.n	8003692 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003686:	6978      	ldr	r0, [r7, #20]
 8003688:	f001 fde2 	bl	8005250 <vPortFree>
 800368c:	e001      	b.n	8003692 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d017      	beq.n	80036c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036a0:	88fa      	ldrh	r2, [r7, #6]
 80036a2:	2300      	movs	r3, #0
 80036a4:	9303      	str	r3, [sp, #12]
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	9302      	str	r3, [sp, #8]
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f80e 	bl	80036d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036bc:	69f8      	ldr	r0, [r7, #28]
 80036be:	f000 f8b1 	bl	8003824 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036c2:	2301      	movs	r3, #1
 80036c4:	61bb      	str	r3, [r7, #24]
 80036c6:	e002      	b.n	80036ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80036ce:	69bb      	ldr	r3, [r7, #24]
	}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3720      	adds	r7, #32
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	461a      	mov	r2, r3
 80036f0:	21a5      	movs	r1, #165	; 0xa5
 80036f2:	f002 fc35 	bl	8005f60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003700:	3b01      	subs	r3, #1
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	f023 0307 	bic.w	r3, r3, #7
 800370e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <prvInitialiseNewTask+0x58>
	__asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	617b      	str	r3, [r7, #20]
}
 800372c:	bf00      	nop
 800372e:	e7fe      	b.n	800372e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01f      	beq.n	8003776 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
 800373a:	e012      	b.n	8003762 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	4413      	add	r3, r2
 8003742:	7819      	ldrb	r1, [r3, #0]
 8003744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	4413      	add	r3, r2
 800374a:	3334      	adds	r3, #52	; 0x34
 800374c:	460a      	mov	r2, r1
 800374e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	4413      	add	r3, r2
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d006      	beq.n	800376a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	3301      	adds	r3, #1
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	2b0f      	cmp	r3, #15
 8003766:	d9e9      	bls.n	800373c <prvInitialiseNewTask+0x64>
 8003768:	e000      	b.n	800376c <prvInitialiseNewTask+0x94>
			{
				break;
 800376a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800376c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003774:	e003      	b.n	800377e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	2b37      	cmp	r3, #55	; 0x37
 8003782:	d901      	bls.n	8003788 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003784:	2337      	movs	r3, #55	; 0x37
 8003786:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800378c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800378e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003792:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	2200      	movs	r2, #0
 8003798:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	3304      	adds	r3, #4
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fe ff8e 	bl	80026c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a6:	3318      	adds	r3, #24
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fe ff89 	bl	80026c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80037ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	2200      	movs	r2, #0
 80037c8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80037d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d6:	3354      	adds	r3, #84	; 0x54
 80037d8:	2260      	movs	r2, #96	; 0x60
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f002 fbbf 	bl	8005f60 <memset>
 80037e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e4:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <prvInitialiseNewTask+0x140>)
 80037e6:	659a      	str	r2, [r3, #88]	; 0x58
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	4a0c      	ldr	r2, [pc, #48]	; (800381c <prvInitialiseNewTask+0x144>)
 80037ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	4a0b      	ldr	r2, [pc, #44]	; (8003820 <prvInitialiseNewTask+0x148>)
 80037f2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	68f9      	ldr	r1, [r7, #12]
 80037f8:	69b8      	ldr	r0, [r7, #24]
 80037fa:	f001 fa0b 	bl	8004c14 <pxPortInitialiseStack>
 80037fe:	4602      	mov	r2, r0
 8003800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003802:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003810:	bf00      	nop
 8003812:	3720      	adds	r7, #32
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	0801812c 	.word	0x0801812c
 800381c:	0801814c 	.word	0x0801814c
 8003820:	0801810c 	.word	0x0801810c

08003824 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800382c:	f001 fb22 	bl	8004e74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003830:	4b2d      	ldr	r3, [pc, #180]	; (80038e8 <prvAddNewTaskToReadyList+0xc4>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	4a2c      	ldr	r2, [pc, #176]	; (80038e8 <prvAddNewTaskToReadyList+0xc4>)
 8003838:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800383a:	4b2c      	ldr	r3, [pc, #176]	; (80038ec <prvAddNewTaskToReadyList+0xc8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003842:	4a2a      	ldr	r2, [pc, #168]	; (80038ec <prvAddNewTaskToReadyList+0xc8>)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003848:	4b27      	ldr	r3, [pc, #156]	; (80038e8 <prvAddNewTaskToReadyList+0xc4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d110      	bne.n	8003872 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003850:	f000 fbf2 	bl	8004038 <prvInitialiseTaskLists>
 8003854:	e00d      	b.n	8003872 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003856:	4b26      	ldr	r3, [pc, #152]	; (80038f0 <prvAddNewTaskToReadyList+0xcc>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800385e:	4b23      	ldr	r3, [pc, #140]	; (80038ec <prvAddNewTaskToReadyList+0xc8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	429a      	cmp	r2, r3
 800386a:	d802      	bhi.n	8003872 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800386c:	4a1f      	ldr	r2, [pc, #124]	; (80038ec <prvAddNewTaskToReadyList+0xc8>)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003872:	4b20      	ldr	r3, [pc, #128]	; (80038f4 <prvAddNewTaskToReadyList+0xd0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3301      	adds	r3, #1
 8003878:	4a1e      	ldr	r2, [pc, #120]	; (80038f4 <prvAddNewTaskToReadyList+0xd0>)
 800387a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800387c:	4b1d      	ldr	r3, [pc, #116]	; (80038f4 <prvAddNewTaskToReadyList+0xd0>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003888:	4b1b      	ldr	r3, [pc, #108]	; (80038f8 <prvAddNewTaskToReadyList+0xd4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	429a      	cmp	r2, r3
 800388e:	d903      	bls.n	8003898 <prvAddNewTaskToReadyList+0x74>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	4a18      	ldr	r2, [pc, #96]	; (80038f8 <prvAddNewTaskToReadyList+0xd4>)
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4a15      	ldr	r2, [pc, #84]	; (80038fc <prvAddNewTaskToReadyList+0xd8>)
 80038a6:	441a      	add	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3304      	adds	r3, #4
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f7fe ff13 	bl	80026da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038b4:	f001 fb0e 	bl	8004ed4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038b8:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <prvAddNewTaskToReadyList+0xcc>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00e      	beq.n	80038de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038c0:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <prvAddNewTaskToReadyList+0xc8>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d207      	bcs.n	80038de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038ce:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <prvAddNewTaskToReadyList+0xdc>)
 80038d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	200030ec 	.word	0x200030ec
 80038ec:	20002c18 	.word	0x20002c18
 80038f0:	200030f8 	.word	0x200030f8
 80038f4:	20003108 	.word	0x20003108
 80038f8:	200030f4 	.word	0x200030f4
 80038fc:	20002c1c 	.word	0x20002c1c
 8003900:	e000ed04 	.word	0xe000ed04

08003904 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003912:	463a      	mov	r2, r7
 8003914:	1d39      	adds	r1, r7, #4
 8003916:	f107 0308 	add.w	r3, r7, #8
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe fe7c 	bl	8002618 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003920:	6839      	ldr	r1, [r7, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68ba      	ldr	r2, [r7, #8]
 8003926:	9202      	str	r2, [sp, #8]
 8003928:	9301      	str	r3, [sp, #4]
 800392a:	2300      	movs	r3, #0
 800392c:	9300      	str	r3, [sp, #0]
 800392e:	2300      	movs	r3, #0
 8003930:	460a      	mov	r2, r1
 8003932:	4924      	ldr	r1, [pc, #144]	; (80039c4 <vTaskStartScheduler+0xc0>)
 8003934:	4824      	ldr	r0, [pc, #144]	; (80039c8 <vTaskStartScheduler+0xc4>)
 8003936:	f7ff fe2d 	bl	8003594 <xTaskCreateStatic>
 800393a:	4603      	mov	r3, r0
 800393c:	4a23      	ldr	r2, [pc, #140]	; (80039cc <vTaskStartScheduler+0xc8>)
 800393e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003940:	4b22      	ldr	r3, [pc, #136]	; (80039cc <vTaskStartScheduler+0xc8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d002      	beq.n	800394e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003948:	2301      	movs	r3, #1
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	e001      	b.n	8003952 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800394e:	2300      	movs	r3, #0
 8003950:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d102      	bne.n	800395e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003958:	f000 fe0e 	bl	8004578 <xTimerCreateTimerTask>
 800395c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d11b      	bne.n	800399c <vTaskStartScheduler+0x98>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	613b      	str	r3, [r7, #16]
}
 8003976:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003978:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <vTaskStartScheduler+0xcc>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3354      	adds	r3, #84	; 0x54
 800397e:	4a15      	ldr	r2, [pc, #84]	; (80039d4 <vTaskStartScheduler+0xd0>)
 8003980:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <vTaskStartScheduler+0xd4>)
 8003984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003988:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800398a:	4b14      	ldr	r3, [pc, #80]	; (80039dc <vTaskStartScheduler+0xd8>)
 800398c:	2201      	movs	r2, #1
 800398e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003990:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <vTaskStartScheduler+0xdc>)
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003996:	f001 f9cb 	bl	8004d30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800399a:	e00e      	b.n	80039ba <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039a2:	d10a      	bne.n	80039ba <vTaskStartScheduler+0xb6>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	60fb      	str	r3, [r7, #12]
}
 80039b6:	bf00      	nop
 80039b8:	e7fe      	b.n	80039b8 <vTaskStartScheduler+0xb4>
}
 80039ba:	bf00      	nop
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	08006254 	.word	0x08006254
 80039c8:	08004009 	.word	0x08004009
 80039cc:	20003110 	.word	0x20003110
 80039d0:	20002c18 	.word	0x20002c18
 80039d4:	20000010 	.word	0x20000010
 80039d8:	2000310c 	.word	0x2000310c
 80039dc:	200030f8 	.word	0x200030f8
 80039e0:	200030f0 	.word	0x200030f0

080039e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039e8:	4b04      	ldr	r3, [pc, #16]	; (80039fc <vTaskSuspendAll+0x18>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	4a03      	ldr	r2, [pc, #12]	; (80039fc <vTaskSuspendAll+0x18>)
 80039f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039f2:	bf00      	nop
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	20003114 	.word	0x20003114

08003a00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a0e:	4b42      	ldr	r3, [pc, #264]	; (8003b18 <xTaskResumeAll+0x118>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <xTaskResumeAll+0x2c>
	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	603b      	str	r3, [r7, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	e7fe      	b.n	8003a2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a2c:	f001 fa22 	bl	8004e74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a30:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <xTaskResumeAll+0x118>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	4a38      	ldr	r2, [pc, #224]	; (8003b18 <xTaskResumeAll+0x118>)
 8003a38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a3a:	4b37      	ldr	r3, [pc, #220]	; (8003b18 <xTaskResumeAll+0x118>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d162      	bne.n	8003b08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a42:	4b36      	ldr	r3, [pc, #216]	; (8003b1c <xTaskResumeAll+0x11c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d05e      	beq.n	8003b08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a4a:	e02f      	b.n	8003aac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a4c:	4b34      	ldr	r3, [pc, #208]	; (8003b20 <xTaskResumeAll+0x120>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	3318      	adds	r3, #24
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fe fe9b 	bl	8002794 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3304      	adds	r3, #4
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fe96 	bl	8002794 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6c:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <xTaskResumeAll+0x124>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d903      	bls.n	8003a7c <xTaskResumeAll+0x7c>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	4a2a      	ldr	r2, [pc, #168]	; (8003b24 <xTaskResumeAll+0x124>)
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4a27      	ldr	r2, [pc, #156]	; (8003b28 <xTaskResumeAll+0x128>)
 8003a8a:	441a      	add	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f7fe fe21 	bl	80026da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <xTaskResumeAll+0x12c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d302      	bcc.n	8003aac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003aa6:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <xTaskResumeAll+0x130>)
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003aac:	4b1c      	ldr	r3, [pc, #112]	; (8003b20 <xTaskResumeAll+0x120>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1cb      	bne.n	8003a4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003aba:	f000 fb5f 	bl	800417c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003abe:	4b1d      	ldr	r3, [pc, #116]	; (8003b34 <xTaskResumeAll+0x134>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d010      	beq.n	8003aec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003aca:	f000 f847 	bl	8003b5c <xTaskIncrementTick>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ad4:	4b16      	ldr	r3, [pc, #88]	; (8003b30 <xTaskResumeAll+0x130>)
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f1      	bne.n	8003aca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003ae6:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <xTaskResumeAll+0x134>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003aec:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <xTaskResumeAll+0x130>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d009      	beq.n	8003b08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003af8:	4b0f      	ldr	r3, [pc, #60]	; (8003b38 <xTaskResumeAll+0x138>)
 8003afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b08:	f001 f9e4 	bl	8004ed4 <vPortExitCritical>

	return xAlreadyYielded;
 8003b0c:	68bb      	ldr	r3, [r7, #8]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20003114 	.word	0x20003114
 8003b1c:	200030ec 	.word	0x200030ec
 8003b20:	200030ac 	.word	0x200030ac
 8003b24:	200030f4 	.word	0x200030f4
 8003b28:	20002c1c 	.word	0x20002c1c
 8003b2c:	20002c18 	.word	0x20002c18
 8003b30:	20003100 	.word	0x20003100
 8003b34:	200030fc 	.word	0x200030fc
 8003b38:	e000ed04 	.word	0xe000ed04

08003b3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <xTaskGetTickCount+0x1c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b48:	687b      	ldr	r3, [r7, #4]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	370c      	adds	r7, #12
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	200030f0 	.word	0x200030f0

08003b5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b66:	4b4f      	ldr	r3, [pc, #316]	; (8003ca4 <xTaskIncrementTick+0x148>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 808f 	bne.w	8003c8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b70:	4b4d      	ldr	r3, [pc, #308]	; (8003ca8 <xTaskIncrementTick+0x14c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b78:	4a4b      	ldr	r2, [pc, #300]	; (8003ca8 <xTaskIncrementTick+0x14c>)
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d120      	bne.n	8003bc6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b84:	4b49      	ldr	r3, [pc, #292]	; (8003cac <xTaskIncrementTick+0x150>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	603b      	str	r3, [r7, #0]
}
 8003ba0:	bf00      	nop
 8003ba2:	e7fe      	b.n	8003ba2 <xTaskIncrementTick+0x46>
 8003ba4:	4b41      	ldr	r3, [pc, #260]	; (8003cac <xTaskIncrementTick+0x150>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <xTaskIncrementTick+0x154>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a3f      	ldr	r2, [pc, #252]	; (8003cac <xTaskIncrementTick+0x150>)
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	4a3f      	ldr	r2, [pc, #252]	; (8003cb0 <xTaskIncrementTick+0x154>)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	4b3e      	ldr	r3, [pc, #248]	; (8003cb4 <xTaskIncrementTick+0x158>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	4a3d      	ldr	r2, [pc, #244]	; (8003cb4 <xTaskIncrementTick+0x158>)
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	f000 fadb 	bl	800417c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003bc6:	4b3c      	ldr	r3, [pc, #240]	; (8003cb8 <xTaskIncrementTick+0x15c>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d349      	bcc.n	8003c64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bd0:	4b36      	ldr	r3, [pc, #216]	; (8003cac <xTaskIncrementTick+0x150>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d104      	bne.n	8003be4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bda:	4b37      	ldr	r3, [pc, #220]	; (8003cb8 <xTaskIncrementTick+0x15c>)
 8003bdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003be0:	601a      	str	r2, [r3, #0]
					break;
 8003be2:	e03f      	b.n	8003c64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003be4:	4b31      	ldr	r3, [pc, #196]	; (8003cac <xTaskIncrementTick+0x150>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d203      	bcs.n	8003c04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bfc:	4a2e      	ldr	r2, [pc, #184]	; (8003cb8 <xTaskIncrementTick+0x15c>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c02:	e02f      	b.n	8003c64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	3304      	adds	r3, #4
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe fdc3 	bl	8002794 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d004      	beq.n	8003c20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	3318      	adds	r3, #24
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe fdba 	bl	8002794 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c24:	4b25      	ldr	r3, [pc, #148]	; (8003cbc <xTaskIncrementTick+0x160>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d903      	bls.n	8003c34 <xTaskIncrementTick+0xd8>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	4a22      	ldr	r2, [pc, #136]	; (8003cbc <xTaskIncrementTick+0x160>)
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <xTaskIncrementTick+0x164>)
 8003c42:	441a      	add	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f7fe fd45 	bl	80026da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c54:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <xTaskIncrementTick+0x168>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d3b8      	bcc.n	8003bd0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c62:	e7b5      	b.n	8003bd0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c64:	4b17      	ldr	r3, [pc, #92]	; (8003cc4 <xTaskIncrementTick+0x168>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6a:	4915      	ldr	r1, [pc, #84]	; (8003cc0 <xTaskIncrementTick+0x164>)
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d901      	bls.n	8003c80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <xTaskIncrementTick+0x16c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d007      	beq.n	8003c98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	e004      	b.n	8003c98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c8e:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <xTaskIncrementTick+0x170>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3301      	adds	r3, #1
 8003c94:	4a0d      	ldr	r2, [pc, #52]	; (8003ccc <xTaskIncrementTick+0x170>)
 8003c96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c98:	697b      	ldr	r3, [r7, #20]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20003114 	.word	0x20003114
 8003ca8:	200030f0 	.word	0x200030f0
 8003cac:	200030a4 	.word	0x200030a4
 8003cb0:	200030a8 	.word	0x200030a8
 8003cb4:	20003104 	.word	0x20003104
 8003cb8:	2000310c 	.word	0x2000310c
 8003cbc:	200030f4 	.word	0x200030f4
 8003cc0:	20002c1c 	.word	0x20002c1c
 8003cc4:	20002c18 	.word	0x20002c18
 8003cc8:	20003100 	.word	0x20003100
 8003ccc:	200030fc 	.word	0x200030fc

08003cd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cd6:	4b2a      	ldr	r3, [pc, #168]	; (8003d80 <vTaskSwitchContext+0xb0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cde:	4b29      	ldr	r3, [pc, #164]	; (8003d84 <vTaskSwitchContext+0xb4>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ce4:	e046      	b.n	8003d74 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003ce6:	4b27      	ldr	r3, [pc, #156]	; (8003d84 <vTaskSwitchContext+0xb4>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cec:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <vTaskSwitchContext+0xb8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	e010      	b.n	8003d16 <vTaskSwitchContext+0x46>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <vTaskSwitchContext+0x40>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	607b      	str	r3, [r7, #4]
}
 8003d0c:	bf00      	nop
 8003d0e:	e7fe      	b.n	8003d0e <vTaskSwitchContext+0x3e>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	491d      	ldr	r1, [pc, #116]	; (8003d8c <vTaskSwitchContext+0xbc>)
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0e4      	beq.n	8003cf4 <vTaskSwitchContext+0x24>
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4a15      	ldr	r2, [pc, #84]	; (8003d8c <vTaskSwitchContext+0xbc>)
 8003d36:	4413      	add	r3, r2
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	605a      	str	r2, [r3, #4]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d104      	bne.n	8003d5a <vTaskSwitchContext+0x8a>
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	4a0b      	ldr	r2, [pc, #44]	; (8003d90 <vTaskSwitchContext+0xc0>)
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	4a08      	ldr	r2, [pc, #32]	; (8003d88 <vTaskSwitchContext+0xb8>)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d6a:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <vTaskSwitchContext+0xc0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3354      	adds	r3, #84	; 0x54
 8003d70:	4a08      	ldr	r2, [pc, #32]	; (8003d94 <vTaskSwitchContext+0xc4>)
 8003d72:	6013      	str	r3, [r2, #0]
}
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	20003114 	.word	0x20003114
 8003d84:	20003100 	.word	0x20003100
 8003d88:	200030f4 	.word	0x200030f4
 8003d8c:	20002c1c 	.word	0x20002c1c
 8003d90:	20002c18 	.word	0x20002c18
 8003d94:	20000010 	.word	0x20000010

08003d98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	60fb      	str	r3, [r7, #12]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dbe:	4b07      	ldr	r3, [pc, #28]	; (8003ddc <vTaskPlaceOnEventList+0x44>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3318      	adds	r3, #24
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fe fcab 	bl	8002722 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003dcc:	2101      	movs	r1, #1
 8003dce:	6838      	ldr	r0, [r7, #0]
 8003dd0:	f000 fb7e 	bl	80044d0 <prvAddCurrentTaskToDelayedList>
}
 8003dd4:	bf00      	nop
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20002c18 	.word	0x20002c18

08003de0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10a      	bne.n	8003e08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	617b      	str	r3, [r7, #20]
}
 8003e04:	bf00      	nop
 8003e06:	e7fe      	b.n	8003e06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <vTaskPlaceOnEventListRestricted+0x54>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3318      	adds	r3, #24
 8003e0e:	4619      	mov	r1, r3
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7fe fc62 	bl	80026da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d002      	beq.n	8003e22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	68b8      	ldr	r0, [r7, #8]
 8003e26:	f000 fb53 	bl	80044d0 <prvAddCurrentTaskToDelayedList>
	}
 8003e2a:	bf00      	nop
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20002c18 	.word	0x20002c18

08003e38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10a      	bne.n	8003e64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	60fb      	str	r3, [r7, #12]
}
 8003e60:	bf00      	nop
 8003e62:	e7fe      	b.n	8003e62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	3318      	adds	r3, #24
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe fc93 	bl	8002794 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <xTaskRemoveFromEventList+0xb0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d11d      	bne.n	8003eb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fc8a 	bl	8002794 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <xTaskRemoveFromEventList+0xb4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d903      	bls.n	8003e94 <xTaskRemoveFromEventList+0x5c>
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	4a16      	ldr	r2, [pc, #88]	; (8003eec <xTaskRemoveFromEventList+0xb4>)
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4a13      	ldr	r2, [pc, #76]	; (8003ef0 <xTaskRemoveFromEventList+0xb8>)
 8003ea2:	441a      	add	r2, r3
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	f7fe fc15 	bl	80026da <vListInsertEnd>
 8003eb0:	e005      	b.n	8003ebe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	3318      	adds	r3, #24
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	480e      	ldr	r0, [pc, #56]	; (8003ef4 <xTaskRemoveFromEventList+0xbc>)
 8003eba:	f7fe fc0e 	bl	80026da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <xTaskRemoveFromEventList+0xc0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d905      	bls.n	8003ed8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ed0:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <xTaskRemoveFromEventList+0xc4>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e001      	b.n	8003edc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003edc:	697b      	ldr	r3, [r7, #20]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20003114 	.word	0x20003114
 8003eec:	200030f4 	.word	0x200030f4
 8003ef0:	20002c1c 	.word	0x20002c1c
 8003ef4:	200030ac 	.word	0x200030ac
 8003ef8:	20002c18 	.word	0x20002c18
 8003efc:	20003100 	.word	0x20003100

08003f00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <vTaskInternalSetTimeOutState+0x24>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <vTaskInternalSetTimeOutState+0x28>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	605a      	str	r2, [r3, #4]
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	20003104 	.word	0x20003104
 8003f28:	200030f0 	.word	0x200030f0

08003f2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10a      	bne.n	8003f52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f40:	f383 8811 	msr	BASEPRI, r3
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	f3bf 8f4f 	dsb	sy
 8003f4c:	613b      	str	r3, [r7, #16]
}
 8003f4e:	bf00      	nop
 8003f50:	e7fe      	b.n	8003f50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	60fb      	str	r3, [r7, #12]
}
 8003f6a:	bf00      	nop
 8003f6c:	e7fe      	b.n	8003f6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f6e:	f000 ff81 	bl	8004e74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f72:	4b1d      	ldr	r3, [pc, #116]	; (8003fe8 <xTaskCheckForTimeOut+0xbc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f8a:	d102      	bne.n	8003f92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	61fb      	str	r3, [r7, #28]
 8003f90:	e023      	b.n	8003fda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	4b15      	ldr	r3, [pc, #84]	; (8003fec <xTaskCheckForTimeOut+0xc0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d007      	beq.n	8003fae <xTaskCheckForTimeOut+0x82>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d302      	bcc.n	8003fae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	e015      	b.n	8003fda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d20b      	bcs.n	8003fd0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	1ad2      	subs	r2, r2, r3
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff ff9b 	bl	8003f00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	e004      	b.n	8003fda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003fda:	f000 ff7b 	bl	8004ed4 <vPortExitCritical>

	return xReturn;
 8003fde:	69fb      	ldr	r3, [r7, #28]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3720      	adds	r7, #32
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	200030f0 	.word	0x200030f0
 8003fec:	20003104 	.word	0x20003104

08003ff0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <vTaskMissedYield+0x14>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
}
 8003ffa:	bf00      	nop
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	20003100 	.word	0x20003100

08004008 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004010:	f000 f852 	bl	80040b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004014:	4b06      	ldr	r3, [pc, #24]	; (8004030 <prvIdleTask+0x28>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d9f9      	bls.n	8004010 <prvIdleTask+0x8>
			{
				taskYIELD();
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <prvIdleTask+0x2c>)
 800401e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800402c:	e7f0      	b.n	8004010 <prvIdleTask+0x8>
 800402e:	bf00      	nop
 8004030:	20002c1c 	.word	0x20002c1c
 8004034:	e000ed04 	.word	0xe000ed04

08004038 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	e00c      	b.n	800405e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4a12      	ldr	r2, [pc, #72]	; (8004098 <prvInitialiseTaskLists+0x60>)
 8004050:	4413      	add	r3, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f7fe fb14 	bl	8002680 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3301      	adds	r3, #1
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b37      	cmp	r3, #55	; 0x37
 8004062:	d9ef      	bls.n	8004044 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004064:	480d      	ldr	r0, [pc, #52]	; (800409c <prvInitialiseTaskLists+0x64>)
 8004066:	f7fe fb0b 	bl	8002680 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800406a:	480d      	ldr	r0, [pc, #52]	; (80040a0 <prvInitialiseTaskLists+0x68>)
 800406c:	f7fe fb08 	bl	8002680 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004070:	480c      	ldr	r0, [pc, #48]	; (80040a4 <prvInitialiseTaskLists+0x6c>)
 8004072:	f7fe fb05 	bl	8002680 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004076:	480c      	ldr	r0, [pc, #48]	; (80040a8 <prvInitialiseTaskLists+0x70>)
 8004078:	f7fe fb02 	bl	8002680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800407c:	480b      	ldr	r0, [pc, #44]	; (80040ac <prvInitialiseTaskLists+0x74>)
 800407e:	f7fe faff 	bl	8002680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004082:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <prvInitialiseTaskLists+0x78>)
 8004084:	4a05      	ldr	r2, [pc, #20]	; (800409c <prvInitialiseTaskLists+0x64>)
 8004086:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004088:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <prvInitialiseTaskLists+0x7c>)
 800408a:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <prvInitialiseTaskLists+0x68>)
 800408c:	601a      	str	r2, [r3, #0]
}
 800408e:	bf00      	nop
 8004090:	3708      	adds	r7, #8
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20002c1c 	.word	0x20002c1c
 800409c:	2000307c 	.word	0x2000307c
 80040a0:	20003090 	.word	0x20003090
 80040a4:	200030ac 	.word	0x200030ac
 80040a8:	200030c0 	.word	0x200030c0
 80040ac:	200030d8 	.word	0x200030d8
 80040b0:	200030a4 	.word	0x200030a4
 80040b4:	200030a8 	.word	0x200030a8

080040b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040be:	e019      	b.n	80040f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80040c0:	f000 fed8 	bl	8004e74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c4:	4b10      	ldr	r3, [pc, #64]	; (8004108 <prvCheckTasksWaitingTermination+0x50>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe fb5f 	bl	8002794 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <prvCheckTasksWaitingTermination+0x54>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3b01      	subs	r3, #1
 80040dc:	4a0b      	ldr	r2, [pc, #44]	; (800410c <prvCheckTasksWaitingTermination+0x54>)
 80040de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <prvCheckTasksWaitingTermination+0x58>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <prvCheckTasksWaitingTermination+0x58>)
 80040e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040ea:	f000 fef3 	bl	8004ed4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f810 	bl	8004114 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <prvCheckTasksWaitingTermination+0x58>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e1      	bne.n	80040c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	200030c0 	.word	0x200030c0
 800410c:	200030ec 	.word	0x200030ec
 8004110:	200030d4 	.word	0x200030d4

08004114 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3354      	adds	r3, #84	; 0x54
 8004120:	4618      	mov	r0, r3
 8004122:	f001 ff33 	bl	8005f8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800412c:	2b00      	cmp	r3, #0
 800412e:	d108      	bne.n	8004142 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	4618      	mov	r0, r3
 8004136:	f001 f88b 	bl	8005250 <vPortFree>
				vPortFree( pxTCB );
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f001 f888 	bl	8005250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004140:	e018      	b.n	8004174 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004148:	2b01      	cmp	r3, #1
 800414a:	d103      	bne.n	8004154 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f001 f87f 	bl	8005250 <vPortFree>
	}
 8004152:	e00f      	b.n	8004174 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800415a:	2b02      	cmp	r3, #2
 800415c:	d00a      	beq.n	8004174 <prvDeleteTCB+0x60>
	__asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	60fb      	str	r3, [r7, #12]
}
 8004170:	bf00      	nop
 8004172:	e7fe      	b.n	8004172 <prvDeleteTCB+0x5e>
	}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004182:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <prvResetNextTaskUnblockTime+0x38>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d104      	bne.n	8004196 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800418c:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <prvResetNextTaskUnblockTime+0x3c>)
 800418e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004192:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004194:	e008      	b.n	80041a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004196:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <prvResetNextTaskUnblockTime+0x38>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4a04      	ldr	r2, [pc, #16]	; (80041b8 <prvResetNextTaskUnblockTime+0x3c>)
 80041a6:	6013      	str	r3, [r2, #0]
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	200030a4 	.word	0x200030a4
 80041b8:	2000310c 	.word	0x2000310c

080041bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80041c2:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <xTaskGetSchedulerState+0x34>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80041ca:	2301      	movs	r3, #1
 80041cc:	607b      	str	r3, [r7, #4]
 80041ce:	e008      	b.n	80041e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041d0:	4b08      	ldr	r3, [pc, #32]	; (80041f4 <xTaskGetSchedulerState+0x38>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d102      	bne.n	80041de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80041d8:	2302      	movs	r3, #2
 80041da:	607b      	str	r3, [r7, #4]
 80041dc:	e001      	b.n	80041e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80041e2:	687b      	ldr	r3, [r7, #4]
	}
 80041e4:	4618      	mov	r0, r3
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	200030f8 	.word	0x200030f8
 80041f4:	20003114 	.word	0x20003114

080041f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d051      	beq.n	80042b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004212:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <xTaskPriorityInherit+0xc4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	429a      	cmp	r2, r3
 800421a:	d241      	bcs.n	80042a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	db06      	blt.n	8004232 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <xTaskPriorityInherit+0xc4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6959      	ldr	r1, [r3, #20]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <xTaskPriorityInherit+0xc8>)
 8004244:	4413      	add	r3, r2
 8004246:	4299      	cmp	r1, r3
 8004248:	d122      	bne.n	8004290 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	3304      	adds	r3, #4
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe faa0 	bl	8002794 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004254:	4b19      	ldr	r3, [pc, #100]	; (80042bc <xTaskPriorityInherit+0xc4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004262:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <xTaskPriorityInherit+0xcc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d903      	bls.n	8004272 <xTaskPriorityInherit+0x7a>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	4a15      	ldr	r2, [pc, #84]	; (80042c4 <xTaskPriorityInherit+0xcc>)
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4a10      	ldr	r2, [pc, #64]	; (80042c0 <xTaskPriorityInherit+0xc8>)
 8004280:	441a      	add	r2, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	3304      	adds	r3, #4
 8004286:	4619      	mov	r1, r3
 8004288:	4610      	mov	r0, r2
 800428a:	f7fe fa26 	bl	80026da <vListInsertEnd>
 800428e:	e004      	b.n	800429a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004290:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <xTaskPriorityInherit+0xc4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800429a:	2301      	movs	r3, #1
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e008      	b.n	80042b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042a4:	4b05      	ldr	r3, [pc, #20]	; (80042bc <xTaskPriorityInherit+0xc4>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d201      	bcs.n	80042b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80042ae:	2301      	movs	r3, #1
 80042b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042b2:	68fb      	ldr	r3, [r7, #12]
	}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20002c18 	.word	0x20002c18
 80042c0:	20002c1c 	.word	0x20002c1c
 80042c4:	200030f4 	.word	0x200030f4

080042c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d056      	beq.n	800438c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80042de:	4b2e      	ldr	r3, [pc, #184]	; (8004398 <xTaskPriorityDisinherit+0xd0>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d00a      	beq.n	80042fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	60fb      	str	r3, [r7, #12]
}
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10a      	bne.n	800431c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	60bb      	str	r3, [r7, #8]
}
 8004318:	bf00      	nop
 800431a:	e7fe      	b.n	800431a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004320:	1e5a      	subs	r2, r3, #1
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432e:	429a      	cmp	r2, r3
 8004330:	d02c      	beq.n	800438c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004336:	2b00      	cmp	r3, #0
 8004338:	d128      	bne.n	800438c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	3304      	adds	r3, #4
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe fa28 	bl	8002794 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435c:	4b0f      	ldr	r3, [pc, #60]	; (800439c <xTaskPriorityDisinherit+0xd4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d903      	bls.n	800436c <xTaskPriorityDisinherit+0xa4>
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	4a0c      	ldr	r2, [pc, #48]	; (800439c <xTaskPriorityDisinherit+0xd4>)
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <xTaskPriorityDisinherit+0xd8>)
 800437a:	441a      	add	r2, r3
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	3304      	adds	r3, #4
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f7fe f9a9 	bl	80026da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004388:	2301      	movs	r3, #1
 800438a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800438c:	697b      	ldr	r3, [r7, #20]
	}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20002c18 	.word	0x20002c18
 800439c:	200030f4 	.word	0x200030f4
 80043a0:	20002c1c 	.word	0x20002c1c

080043a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80043b2:	2301      	movs	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d06a      	beq.n	8004492 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10a      	bne.n	80043da <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80043c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c8:	f383 8811 	msr	BASEPRI, r3
 80043cc:	f3bf 8f6f 	isb	sy
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	60fb      	str	r3, [r7, #12]
}
 80043d6:	bf00      	nop
 80043d8:	e7fe      	b.n	80043d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d902      	bls.n	80043ea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	61fb      	str	r3, [r7, #28]
 80043e8:	e002      	b.n	80043f0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d04b      	beq.n	8004492 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	429a      	cmp	r2, r3
 8004402:	d146      	bne.n	8004492 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004404:	4b25      	ldr	r3, [pc, #148]	; (800449c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	429a      	cmp	r2, r3
 800440c:	d10a      	bne.n	8004424 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	60bb      	str	r3, [r7, #8]
}
 8004420:	bf00      	nop
 8004422:	e7fe      	b.n	8004422 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2b00      	cmp	r3, #0
 8004436:	db04      	blt.n	8004442 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	6959      	ldr	r1, [r3, #20]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4a13      	ldr	r2, [pc, #76]	; (80044a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004452:	4413      	add	r3, r2
 8004454:	4299      	cmp	r1, r3
 8004456:	d11c      	bne.n	8004492 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	3304      	adds	r3, #4
 800445c:	4618      	mov	r0, r3
 800445e:	f7fe f999 	bl	8002794 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004466:	4b0f      	ldr	r3, [pc, #60]	; (80044a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d903      	bls.n	8004476 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	4a0c      	ldr	r2, [pc, #48]	; (80044a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4a07      	ldr	r2, [pc, #28]	; (80044a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004484:	441a      	add	r2, r3
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	3304      	adds	r3, #4
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f7fe f924 	bl	80026da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004492:	bf00      	nop
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20002c18 	.word	0x20002c18
 80044a0:	20002c1c 	.word	0x20002c1c
 80044a4:	200030f4 	.word	0x200030f4

080044a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80044ac:	4b07      	ldr	r3, [pc, #28]	; (80044cc <pvTaskIncrementMutexHeldCount+0x24>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d004      	beq.n	80044be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <pvTaskIncrementMutexHeldCount+0x24>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044ba:	3201      	adds	r2, #1
 80044bc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80044be:	4b03      	ldr	r3, [pc, #12]	; (80044cc <pvTaskIncrementMutexHeldCount+0x24>)
 80044c0:	681b      	ldr	r3, [r3, #0]
	}
 80044c2:	4618      	mov	r0, r3
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	20002c18 	.word	0x20002c18

080044d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044da:	4b21      	ldr	r3, [pc, #132]	; (8004560 <prvAddCurrentTaskToDelayedList+0x90>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044e0:	4b20      	ldr	r3, [pc, #128]	; (8004564 <prvAddCurrentTaskToDelayedList+0x94>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3304      	adds	r3, #4
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fe f954 	bl	8002794 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f2:	d10a      	bne.n	800450a <prvAddCurrentTaskToDelayedList+0x3a>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d007      	beq.n	800450a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044fa:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <prvAddCurrentTaskToDelayedList+0x94>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3304      	adds	r3, #4
 8004500:	4619      	mov	r1, r3
 8004502:	4819      	ldr	r0, [pc, #100]	; (8004568 <prvAddCurrentTaskToDelayedList+0x98>)
 8004504:	f7fe f8e9 	bl	80026da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004508:	e026      	b.n	8004558 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4413      	add	r3, r2
 8004510:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004512:	4b14      	ldr	r3, [pc, #80]	; (8004564 <prvAddCurrentTaskToDelayedList+0x94>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	429a      	cmp	r2, r3
 8004520:	d209      	bcs.n	8004536 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004522:	4b12      	ldr	r3, [pc, #72]	; (800456c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <prvAddCurrentTaskToDelayedList+0x94>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3304      	adds	r3, #4
 800452c:	4619      	mov	r1, r3
 800452e:	4610      	mov	r0, r2
 8004530:	f7fe f8f7 	bl	8002722 <vListInsert>
}
 8004534:	e010      	b.n	8004558 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004536:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <prvAddCurrentTaskToDelayedList+0x94>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3304      	adds	r3, #4
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f7fe f8ed 	bl	8002722 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <prvAddCurrentTaskToDelayedList+0xa4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	429a      	cmp	r2, r3
 8004550:	d202      	bcs.n	8004558 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004552:	4a08      	ldr	r2, [pc, #32]	; (8004574 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	6013      	str	r3, [r2, #0]
}
 8004558:	bf00      	nop
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	200030f0 	.word	0x200030f0
 8004564:	20002c18 	.word	0x20002c18
 8004568:	200030d8 	.word	0x200030d8
 800456c:	200030a8 	.word	0x200030a8
 8004570:	200030a4 	.word	0x200030a4
 8004574:	2000310c 	.word	0x2000310c

08004578 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004582:	f000 fb07 	bl	8004b94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004586:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <xTimerCreateTimerTask+0x80>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d021      	beq.n	80045d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800458e:	2300      	movs	r3, #0
 8004590:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004592:	2300      	movs	r3, #0
 8004594:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004596:	1d3a      	adds	r2, r7, #4
 8004598:	f107 0108 	add.w	r1, r7, #8
 800459c:	f107 030c 	add.w	r3, r7, #12
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fe f853 	bl	800264c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045a6:	6879      	ldr	r1, [r7, #4]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	9202      	str	r2, [sp, #8]
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	2302      	movs	r3, #2
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	2300      	movs	r3, #0
 80045b6:	460a      	mov	r2, r1
 80045b8:	4910      	ldr	r1, [pc, #64]	; (80045fc <xTimerCreateTimerTask+0x84>)
 80045ba:	4811      	ldr	r0, [pc, #68]	; (8004600 <xTimerCreateTimerTask+0x88>)
 80045bc:	f7fe ffea 	bl	8003594 <xTaskCreateStatic>
 80045c0:	4603      	mov	r3, r0
 80045c2:	4a10      	ldr	r2, [pc, #64]	; (8004604 <xTimerCreateTimerTask+0x8c>)
 80045c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <xTimerCreateTimerTask+0x8c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80045ce:	2301      	movs	r3, #1
 80045d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	613b      	str	r3, [r7, #16]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045ee:	697b      	ldr	r3, [r7, #20]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	20003148 	.word	0x20003148
 80045fc:	0800625c 	.word	0x0800625c
 8004600:	0800473d 	.word	0x0800473d
 8004604:	2000314c 	.word	0x2000314c

08004608 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	; 0x28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004616:	2300      	movs	r3, #0
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10a      	bne.n	8004636 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	623b      	str	r3, [r7, #32]
}
 8004632:	bf00      	nop
 8004634:	e7fe      	b.n	8004634 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004636:	4b1a      	ldr	r3, [pc, #104]	; (80046a0 <xTimerGenericCommand+0x98>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d02a      	beq.n	8004694 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b05      	cmp	r3, #5
 800464e:	dc18      	bgt.n	8004682 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004650:	f7ff fdb4 	bl	80041bc <xTaskGetSchedulerState>
 8004654:	4603      	mov	r3, r0
 8004656:	2b02      	cmp	r3, #2
 8004658:	d109      	bne.n	800466e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800465a:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <xTimerGenericCommand+0x98>)
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	f107 0110 	add.w	r1, r7, #16
 8004662:	2300      	movs	r3, #0
 8004664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004666:	f7fe f9fd 	bl	8002a64 <xQueueGenericSend>
 800466a:	6278      	str	r0, [r7, #36]	; 0x24
 800466c:	e012      	b.n	8004694 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800466e:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <xTimerGenericCommand+0x98>)
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	f107 0110 	add.w	r1, r7, #16
 8004676:	2300      	movs	r3, #0
 8004678:	2200      	movs	r2, #0
 800467a:	f7fe f9f3 	bl	8002a64 <xQueueGenericSend>
 800467e:	6278      	str	r0, [r7, #36]	; 0x24
 8004680:	e008      	b.n	8004694 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004682:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <xTimerGenericCommand+0x98>)
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	f107 0110 	add.w	r1, r7, #16
 800468a:	2300      	movs	r3, #0
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	f7fe fae7 	bl	8002c60 <xQueueGenericSendFromISR>
 8004692:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004696:	4618      	mov	r0, r3
 8004698:	3728      	adds	r7, #40	; 0x28
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20003148 	.word	0x20003148

080046a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af02      	add	r7, sp, #8
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ae:	4b22      	ldr	r3, [pc, #136]	; (8004738 <prvProcessExpiredTimer+0x94>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe f869 	bl	8002794 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d022      	beq.n	8004716 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	699a      	ldr	r2, [r3, #24]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	18d1      	adds	r1, r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	6978      	ldr	r0, [r7, #20]
 80046de:	f000 f8d1 	bl	8004884 <prvInsertTimerInActiveList>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01f      	beq.n	8004728 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046e8:	2300      	movs	r3, #0
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	2300      	movs	r3, #0
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	2100      	movs	r1, #0
 80046f2:	6978      	ldr	r0, [r7, #20]
 80046f4:	f7ff ff88 	bl	8004608 <xTimerGenericCommand>
 80046f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d113      	bne.n	8004728 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	60fb      	str	r3, [r7, #12]
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	b2da      	uxtb	r2, r3
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	6978      	ldr	r0, [r7, #20]
 800472e:	4798      	blx	r3
}
 8004730:	bf00      	nop
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20003140 	.word	0x20003140

0800473c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004744:	f107 0308 	add.w	r3, r7, #8
 8004748:	4618      	mov	r0, r3
 800474a:	f000 f857 	bl	80047fc <prvGetNextExpireTime>
 800474e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4619      	mov	r1, r3
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f000 f803 	bl	8004760 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800475a:	f000 f8d5 	bl	8004908 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800475e:	e7f1      	b.n	8004744 <prvTimerTask+0x8>

08004760 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800476a:	f7ff f93b 	bl	80039e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800476e:	f107 0308 	add.w	r3, r7, #8
 8004772:	4618      	mov	r0, r3
 8004774:	f000 f866 	bl	8004844 <prvSampleTimeNow>
 8004778:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d130      	bne.n	80047e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10a      	bne.n	800479c <prvProcessTimerOrBlockTask+0x3c>
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	429a      	cmp	r2, r3
 800478c:	d806      	bhi.n	800479c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800478e:	f7ff f937 	bl	8003a00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004792:	68f9      	ldr	r1, [r7, #12]
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7ff ff85 	bl	80046a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800479a:	e024      	b.n	80047e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d008      	beq.n	80047b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047a2:	4b13      	ldr	r3, [pc, #76]	; (80047f0 <prvProcessTimerOrBlockTask+0x90>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <prvProcessTimerOrBlockTask+0x50>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <prvProcessTimerOrBlockTask+0x52>
 80047b0:	2300      	movs	r3, #0
 80047b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047b4:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <prvProcessTimerOrBlockTask+0x94>)
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	4619      	mov	r1, r3
 80047c2:	f7fe feb3 	bl	800352c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047c6:	f7ff f91b 	bl	8003a00 <xTaskResumeAll>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047d0:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <prvProcessTimerOrBlockTask+0x98>)
 80047d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047d6:	601a      	str	r2, [r3, #0]
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
}
 80047e0:	e001      	b.n	80047e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047e2:	f7ff f90d 	bl	8003a00 <xTaskResumeAll>
}
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20003144 	.word	0x20003144
 80047f4:	20003148 	.word	0x20003148
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004804:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <prvGetNextExpireTime+0x44>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <prvGetNextExpireTime+0x16>
 800480e:	2201      	movs	r2, #1
 8004810:	e000      	b.n	8004814 <prvGetNextExpireTime+0x18>
 8004812:	2200      	movs	r2, #0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d105      	bne.n	800482c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004820:	4b07      	ldr	r3, [pc, #28]	; (8004840 <prvGetNextExpireTime+0x44>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	e001      	b.n	8004830 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004830:	68fb      	ldr	r3, [r7, #12]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3714      	adds	r7, #20
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20003140 	.word	0x20003140

08004844 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800484c:	f7ff f976 	bl	8003b3c <xTaskGetTickCount>
 8004850:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <prvSampleTimeNow+0x3c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	429a      	cmp	r2, r3
 800485a:	d205      	bcs.n	8004868 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800485c:	f000 f936 	bl	8004acc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e002      	b.n	800486e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800486e:	4a04      	ldr	r2, [pc, #16]	; (8004880 <prvSampleTimeNow+0x3c>)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004874:	68fb      	ldr	r3, [r7, #12]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20003150 	.word	0x20003150

08004884 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d812      	bhi.n	80048d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	1ad2      	subs	r2, r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d302      	bcc.n	80048be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048b8:	2301      	movs	r3, #1
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	e01b      	b.n	80048f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048be:	4b10      	ldr	r3, [pc, #64]	; (8004900 <prvInsertTimerInActiveList+0x7c>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3304      	adds	r3, #4
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f7fd ff2a 	bl	8002722 <vListInsert>
 80048ce:	e012      	b.n	80048f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d206      	bcs.n	80048e6 <prvInsertTimerInActiveList+0x62>
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d302      	bcc.n	80048e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048e0:	2301      	movs	r3, #1
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	e007      	b.n	80048f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048e6:	4b07      	ldr	r3, [pc, #28]	; (8004904 <prvInsertTimerInActiveList+0x80>)
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	3304      	adds	r3, #4
 80048ee:	4619      	mov	r1, r3
 80048f0:	4610      	mov	r0, r2
 80048f2:	f7fd ff16 	bl	8002722 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048f6:	697b      	ldr	r3, [r7, #20]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	20003144 	.word	0x20003144
 8004904:	20003140 	.word	0x20003140

08004908 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08e      	sub	sp, #56	; 0x38
 800490c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800490e:	e0ca      	b.n	8004aa6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	da18      	bge.n	8004948 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004916:	1d3b      	adds	r3, r7, #4
 8004918:	3304      	adds	r3, #4
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800491c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	61fb      	str	r3, [r7, #28]
}
 8004934:	bf00      	nop
 8004936:	e7fe      	b.n	8004936 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800493e:	6850      	ldr	r0, [r2, #4]
 8004940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004942:	6892      	ldr	r2, [r2, #8]
 8004944:	4611      	mov	r1, r2
 8004946:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f2c0 80aa 	blt.w	8004aa4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d004      	beq.n	8004966 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495e:	3304      	adds	r3, #4
 8004960:	4618      	mov	r0, r3
 8004962:	f7fd ff17 	bl	8002794 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004966:	463b      	mov	r3, r7
 8004968:	4618      	mov	r0, r3
 800496a:	f7ff ff6b 	bl	8004844 <prvSampleTimeNow>
 800496e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b09      	cmp	r3, #9
 8004974:	f200 8097 	bhi.w	8004aa6 <prvProcessReceivedCommands+0x19e>
 8004978:	a201      	add	r2, pc, #4	; (adr r2, 8004980 <prvProcessReceivedCommands+0x78>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	080049a9 	.word	0x080049a9
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049a9 	.word	0x080049a9
 800498c:	08004a1d 	.word	0x08004a1d
 8004990:	08004a31 	.word	0x08004a31
 8004994:	08004a7b 	.word	0x08004a7b
 8004998:	080049a9 	.word	0x080049a9
 800499c:	080049a9 	.word	0x080049a9
 80049a0:	08004a1d 	.word	0x08004a1d
 80049a4:	08004a31 	.word	0x08004a31
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ae:	f043 0301 	orr.w	r3, r3, #1
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	18d1      	adds	r1, r2, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049c8:	f7ff ff5c 	bl	8004884 <prvInsertTimerInActiveList>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d069      	beq.n	8004aa6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d05e      	beq.n	8004aa6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	441a      	add	r2, r3
 80049f0:	2300      	movs	r3, #0
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	2300      	movs	r3, #0
 80049f6:	2100      	movs	r1, #0
 80049f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049fa:	f7ff fe05 	bl	8004608 <xTimerGenericCommand>
 80049fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d14f      	bne.n	8004aa6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	61bb      	str	r3, [r7, #24]
}
 8004a18:	bf00      	nop
 8004a1a:	e7fe      	b.n	8004a1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004a2e:	e03a      	b.n	8004aa6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10a      	bne.n	8004a66 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	617b      	str	r3, [r7, #20]
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	18d1      	adds	r1, r2, r3
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a74:	f7ff ff06 	bl	8004884 <prvInsertTimerInActiveList>
					break;
 8004a78:	e015      	b.n	8004aa6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d103      	bne.n	8004a90 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a8a:	f000 fbe1 	bl	8005250 <vPortFree>
 8004a8e:	e00a      	b.n	8004aa6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a96:	f023 0301 	bic.w	r3, r3, #1
 8004a9a:	b2da      	uxtb	r2, r3
 8004a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004aa2:	e000      	b.n	8004aa6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004aa4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004aa6:	4b08      	ldr	r3, [pc, #32]	; (8004ac8 <prvProcessReceivedCommands+0x1c0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	1d39      	adds	r1, r7, #4
 8004aac:	2200      	movs	r2, #0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe f9fe 	bl	8002eb0 <xQueueReceive>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f47f af2a 	bne.w	8004910 <prvProcessReceivedCommands+0x8>
	}
}
 8004abc:	bf00      	nop
 8004abe:	bf00      	nop
 8004ac0:	3730      	adds	r7, #48	; 0x30
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20003148 	.word	0x20003148

08004acc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ad2:	e048      	b.n	8004b66 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ad4:	4b2d      	ldr	r3, [pc, #180]	; (8004b8c <prvSwitchTimerLists+0xc0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ade:	4b2b      	ldr	r3, [pc, #172]	; (8004b8c <prvSwitchTimerLists+0xc0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fd fe51 	bl	8002794 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b00:	f003 0304 	and.w	r3, r3, #4
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d02e      	beq.n	8004b66 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4413      	add	r3, r2
 8004b10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d90e      	bls.n	8004b38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b26:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <prvSwitchTimerLists+0xc0>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4610      	mov	r0, r2
 8004b32:	f7fd fdf6 	bl	8002722 <vListInsert>
 8004b36:	e016      	b.n	8004b66 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	2100      	movs	r1, #0
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f7ff fd60 	bl	8004608 <xTimerGenericCommand>
 8004b48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	603b      	str	r3, [r7, #0]
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b66:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <prvSwitchTimerLists+0xc0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1b1      	bne.n	8004ad4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b70:	4b06      	ldr	r3, [pc, #24]	; (8004b8c <prvSwitchTimerLists+0xc0>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b76:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <prvSwitchTimerLists+0xc4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a04      	ldr	r2, [pc, #16]	; (8004b8c <prvSwitchTimerLists+0xc0>)
 8004b7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b7e:	4a04      	ldr	r2, [pc, #16]	; (8004b90 <prvSwitchTimerLists+0xc4>)
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	6013      	str	r3, [r2, #0]
}
 8004b84:	bf00      	nop
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20003140 	.word	0x20003140
 8004b90:	20003144 	.word	0x20003144

08004b94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b9a:	f000 f96b 	bl	8004e74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b9e:	4b15      	ldr	r3, [pc, #84]	; (8004bf4 <prvCheckForValidListAndQueue+0x60>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d120      	bne.n	8004be8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ba6:	4814      	ldr	r0, [pc, #80]	; (8004bf8 <prvCheckForValidListAndQueue+0x64>)
 8004ba8:	f7fd fd6a 	bl	8002680 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004bac:	4813      	ldr	r0, [pc, #76]	; (8004bfc <prvCheckForValidListAndQueue+0x68>)
 8004bae:	f7fd fd67 	bl	8002680 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004bb2:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <prvCheckForValidListAndQueue+0x6c>)
 8004bb4:	4a10      	ldr	r2, [pc, #64]	; (8004bf8 <prvCheckForValidListAndQueue+0x64>)
 8004bb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004bb8:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <prvCheckForValidListAndQueue+0x70>)
 8004bba:	4a10      	ldr	r2, [pc, #64]	; (8004bfc <prvCheckForValidListAndQueue+0x68>)
 8004bbc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <prvCheckForValidListAndQueue+0x74>)
 8004bc4:	4a11      	ldr	r2, [pc, #68]	; (8004c0c <prvCheckForValidListAndQueue+0x78>)
 8004bc6:	2110      	movs	r1, #16
 8004bc8:	200a      	movs	r0, #10
 8004bca:	f7fd fe75 	bl	80028b8 <xQueueGenericCreateStatic>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	4a08      	ldr	r2, [pc, #32]	; (8004bf4 <prvCheckForValidListAndQueue+0x60>)
 8004bd2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <prvCheckForValidListAndQueue+0x60>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <prvCheckForValidListAndQueue+0x60>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	490b      	ldr	r1, [pc, #44]	; (8004c10 <prvCheckForValidListAndQueue+0x7c>)
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fe fc78 	bl	80034d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004be8:	f000 f974 	bl	8004ed4 <vPortExitCritical>
}
 8004bec:	bf00      	nop
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20003148 	.word	0x20003148
 8004bf8:	20003118 	.word	0x20003118
 8004bfc:	2000312c 	.word	0x2000312c
 8004c00:	20003140 	.word	0x20003140
 8004c04:	20003144 	.word	0x20003144
 8004c08:	200031f4 	.word	0x200031f4
 8004c0c:	20003154 	.word	0x20003154
 8004c10:	08006264 	.word	0x08006264

08004c14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3b04      	subs	r3, #4
 8004c24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3b04      	subs	r3, #4
 8004c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f023 0201 	bic.w	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	3b04      	subs	r3, #4
 8004c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c44:	4a0c      	ldr	r2, [pc, #48]	; (8004c78 <pxPortInitialiseStack+0x64>)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3b14      	subs	r3, #20
 8004c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3b04      	subs	r3, #4
 8004c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f06f 0202 	mvn.w	r2, #2
 8004c62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3b20      	subs	r3, #32
 8004c68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	08004c7d 	.word	0x08004c7d

08004c7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c82:	2300      	movs	r3, #0
 8004c84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c86:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <prvTaskExitError+0x54>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c8e:	d00a      	beq.n	8004ca6 <prvTaskExitError+0x2a>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	60fb      	str	r3, [r7, #12]
}
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <prvTaskExitError+0x28>
	__asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	60bb      	str	r3, [r7, #8]
}
 8004cb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004cba:	bf00      	nop
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d0fc      	beq.n	8004cbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004cc2:	bf00      	nop
 8004cc4:	bf00      	nop
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	2000000c 	.word	0x2000000c
	...

08004ce0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <pxCurrentTCBConst2>)
 8004ce2:	6819      	ldr	r1, [r3, #0]
 8004ce4:	6808      	ldr	r0, [r1, #0]
 8004ce6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cea:	f380 8809 	msr	PSP, r0
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f04f 0000 	mov.w	r0, #0
 8004cf6:	f380 8811 	msr	BASEPRI, r0
 8004cfa:	4770      	bx	lr
 8004cfc:	f3af 8000 	nop.w

08004d00 <pxCurrentTCBConst2>:
 8004d00:	20002c18 	.word	0x20002c18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop

08004d08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d08:	4808      	ldr	r0, [pc, #32]	; (8004d2c <prvPortStartFirstTask+0x24>)
 8004d0a:	6800      	ldr	r0, [r0, #0]
 8004d0c:	6800      	ldr	r0, [r0, #0]
 8004d0e:	f380 8808 	msr	MSP, r0
 8004d12:	f04f 0000 	mov.w	r0, #0
 8004d16:	f380 8814 	msr	CONTROL, r0
 8004d1a:	b662      	cpsie	i
 8004d1c:	b661      	cpsie	f
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	df00      	svc	0
 8004d28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d2a:	bf00      	nop
 8004d2c:	e000ed08 	.word	0xe000ed08

08004d30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d36:	4b46      	ldr	r3, [pc, #280]	; (8004e50 <xPortStartScheduler+0x120>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a46      	ldr	r2, [pc, #280]	; (8004e54 <xPortStartScheduler+0x124>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d10a      	bne.n	8004d56 <xPortStartScheduler+0x26>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	613b      	str	r3, [r7, #16]
}
 8004d52:	bf00      	nop
 8004d54:	e7fe      	b.n	8004d54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d56:	4b3e      	ldr	r3, [pc, #248]	; (8004e50 <xPortStartScheduler+0x120>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a3f      	ldr	r2, [pc, #252]	; (8004e58 <xPortStartScheduler+0x128>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d10a      	bne.n	8004d76 <xPortStartScheduler+0x46>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	60fb      	str	r3, [r7, #12]
}
 8004d72:	bf00      	nop
 8004d74:	e7fe      	b.n	8004d74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d76:	4b39      	ldr	r3, [pc, #228]	; (8004e5c <xPortStartScheduler+0x12c>)
 8004d78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	22ff      	movs	r2, #255	; 0xff
 8004d86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	4b31      	ldr	r3, [pc, #196]	; (8004e60 <xPortStartScheduler+0x130>)
 8004d9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d9e:	4b31      	ldr	r3, [pc, #196]	; (8004e64 <xPortStartScheduler+0x134>)
 8004da0:	2207      	movs	r2, #7
 8004da2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004da4:	e009      	b.n	8004dba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004da6:	4b2f      	ldr	r3, [pc, #188]	; (8004e64 <xPortStartScheduler+0x134>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	4a2d      	ldr	r2, [pc, #180]	; (8004e64 <xPortStartScheduler+0x134>)
 8004dae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc2:	2b80      	cmp	r3, #128	; 0x80
 8004dc4:	d0ef      	beq.n	8004da6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004dc6:	4b27      	ldr	r3, [pc, #156]	; (8004e64 <xPortStartScheduler+0x134>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f1c3 0307 	rsb	r3, r3, #7
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d00a      	beq.n	8004de8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	60bb      	str	r3, [r7, #8]
}
 8004de4:	bf00      	nop
 8004de6:	e7fe      	b.n	8004de6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004de8:	4b1e      	ldr	r3, [pc, #120]	; (8004e64 <xPortStartScheduler+0x134>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	4a1d      	ldr	r2, [pc, #116]	; (8004e64 <xPortStartScheduler+0x134>)
 8004df0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004df2:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <xPortStartScheduler+0x134>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004dfa:	4a1a      	ldr	r2, [pc, #104]	; (8004e64 <xPortStartScheduler+0x134>)
 8004dfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e06:	4b18      	ldr	r3, [pc, #96]	; (8004e68 <xPortStartScheduler+0x138>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a17      	ldr	r2, [pc, #92]	; (8004e68 <xPortStartScheduler+0x138>)
 8004e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e12:	4b15      	ldr	r3, [pc, #84]	; (8004e68 <xPortStartScheduler+0x138>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a14      	ldr	r2, [pc, #80]	; (8004e68 <xPortStartScheduler+0x138>)
 8004e18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e1e:	f000 f8dd 	bl	8004fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e22:	4b12      	ldr	r3, [pc, #72]	; (8004e6c <xPortStartScheduler+0x13c>)
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e28:	f000 f8fc 	bl	8005024 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e2c:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <xPortStartScheduler+0x140>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a0f      	ldr	r2, [pc, #60]	; (8004e70 <xPortStartScheduler+0x140>)
 8004e32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e38:	f7ff ff66 	bl	8004d08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e3c:	f7fe ff48 	bl	8003cd0 <vTaskSwitchContext>
	prvTaskExitError();
 8004e40:	f7ff ff1c 	bl	8004c7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	e000ed00 	.word	0xe000ed00
 8004e54:	410fc271 	.word	0x410fc271
 8004e58:	410fc270 	.word	0x410fc270
 8004e5c:	e000e400 	.word	0xe000e400
 8004e60:	20003244 	.word	0x20003244
 8004e64:	20003248 	.word	0x20003248
 8004e68:	e000ed20 	.word	0xe000ed20
 8004e6c:	2000000c 	.word	0x2000000c
 8004e70:	e000ef34 	.word	0xe000ef34

08004e74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
	__asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	607b      	str	r3, [r7, #4]
}
 8004e8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <vPortEnterCritical+0x58>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3301      	adds	r3, #1
 8004e94:	4a0d      	ldr	r2, [pc, #52]	; (8004ecc <vPortEnterCritical+0x58>)
 8004e96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e98:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <vPortEnterCritical+0x58>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d10f      	bne.n	8004ec0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <vPortEnterCritical+0x5c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	603b      	str	r3, [r7, #0]
}
 8004ebc:	bf00      	nop
 8004ebe:	e7fe      	b.n	8004ebe <vPortEnterCritical+0x4a>
	}
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	2000000c 	.word	0x2000000c
 8004ed0:	e000ed04 	.word	0xe000ed04

08004ed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004eda:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <vPortExitCritical+0x50>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <vPortExitCritical+0x24>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	607b      	str	r3, [r7, #4]
}
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <vPortExitCritical+0x50>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <vPortExitCritical+0x50>)
 8004f00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f02:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <vPortExitCritical+0x50>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d105      	bne.n	8004f16 <vPortExitCritical+0x42>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f383 8811 	msr	BASEPRI, r3
}
 8004f14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	2000000c 	.word	0x2000000c
	...

08004f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f30:	f3ef 8009 	mrs	r0, PSP
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <pxCurrentTCBConst>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	f01e 0f10 	tst.w	lr, #16
 8004f40:	bf08      	it	eq
 8004f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4a:	6010      	str	r0, [r2, #0]
 8004f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f54:	f380 8811 	msr	BASEPRI, r0
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f7fe feb6 	bl	8003cd0 <vTaskSwitchContext>
 8004f64:	f04f 0000 	mov.w	r0, #0
 8004f68:	f380 8811 	msr	BASEPRI, r0
 8004f6c:	bc09      	pop	{r0, r3}
 8004f6e:	6819      	ldr	r1, [r3, #0]
 8004f70:	6808      	ldr	r0, [r1, #0]
 8004f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f76:	f01e 0f10 	tst.w	lr, #16
 8004f7a:	bf08      	it	eq
 8004f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f80:	f380 8809 	msr	PSP, r0
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	f3af 8000 	nop.w

08004f90 <pxCurrentTCBConst>:
 8004f90:	20002c18 	.word	0x20002c18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop

08004f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	607b      	str	r3, [r7, #4]
}
 8004fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fb2:	f7fe fdd3 	bl	8003b5c <xTaskIncrementTick>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fbc:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <xPortSysTickHandler+0x40>)
 8004fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	f383 8811 	msr	BASEPRI, r3
}
 8004fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <vPortSetupTimerInterrupt+0x34>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <vPortSetupTimerInterrupt+0x38>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <vPortSetupTimerInterrupt+0x3c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a0a      	ldr	r2, [pc, #40]	; (800501c <vPortSetupTimerInterrupt+0x40>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	099b      	lsrs	r3, r3, #6
 8004ff8:	4a09      	ldr	r2, [pc, #36]	; (8005020 <vPortSetupTimerInterrupt+0x44>)
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ffe:	4b04      	ldr	r3, [pc, #16]	; (8005010 <vPortSetupTimerInterrupt+0x34>)
 8005000:	2207      	movs	r2, #7
 8005002:	601a      	str	r2, [r3, #0]
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	e000e010 	.word	0xe000e010
 8005014:	e000e018 	.word	0xe000e018
 8005018:	20000000 	.word	0x20000000
 800501c:	10624dd3 	.word	0x10624dd3
 8005020:	e000e014 	.word	0xe000e014

08005024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005024:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005034 <vPortEnableVFP+0x10>
 8005028:	6801      	ldr	r1, [r0, #0]
 800502a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800502e:	6001      	str	r1, [r0, #0]
 8005030:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005032:	bf00      	nop
 8005034:	e000ed88 	.word	0xe000ed88

08005038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800503e:	f3ef 8305 	mrs	r3, IPSR
 8005042:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b0f      	cmp	r3, #15
 8005048:	d914      	bls.n	8005074 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800504a:	4a17      	ldr	r2, [pc, #92]	; (80050a8 <vPortValidateInterruptPriority+0x70>)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005054:	4b15      	ldr	r3, [pc, #84]	; (80050ac <vPortValidateInterruptPriority+0x74>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	7afa      	ldrb	r2, [r7, #11]
 800505a:	429a      	cmp	r2, r3
 800505c:	d20a      	bcs.n	8005074 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	607b      	str	r3, [r7, #4]
}
 8005070:	bf00      	nop
 8005072:	e7fe      	b.n	8005072 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005074:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <vPortValidateInterruptPriority+0x78>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800507c:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <vPortValidateInterruptPriority+0x7c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d90a      	bls.n	800509a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	603b      	str	r3, [r7, #0]
}
 8005096:	bf00      	nop
 8005098:	e7fe      	b.n	8005098 <vPortValidateInterruptPriority+0x60>
	}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	e000e3f0 	.word	0xe000e3f0
 80050ac:	20003244 	.word	0x20003244
 80050b0:	e000ed0c 	.word	0xe000ed0c
 80050b4:	20003248 	.word	0x20003248

080050b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08a      	sub	sp, #40	; 0x28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050c4:	f7fe fc8e 	bl	80039e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050c8:	4b5b      	ldr	r3, [pc, #364]	; (8005238 <pvPortMalloc+0x180>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050d0:	f000 f920 	bl	8005314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050d4:	4b59      	ldr	r3, [pc, #356]	; (800523c <pvPortMalloc+0x184>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f040 8093 	bne.w	8005208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01d      	beq.n	8005124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80050e8:	2208      	movs	r2, #8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4413      	add	r3, r2
 80050ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d014      	beq.n	8005124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f023 0307 	bic.w	r3, r3, #7
 8005100:	3308      	adds	r3, #8
 8005102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <pvPortMalloc+0x6c>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	617b      	str	r3, [r7, #20]
}
 8005120:	bf00      	nop
 8005122:	e7fe      	b.n	8005122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d06e      	beq.n	8005208 <pvPortMalloc+0x150>
 800512a:	4b45      	ldr	r3, [pc, #276]	; (8005240 <pvPortMalloc+0x188>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	d869      	bhi.n	8005208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005134:	4b43      	ldr	r3, [pc, #268]	; (8005244 <pvPortMalloc+0x18c>)
 8005136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005138:	4b42      	ldr	r3, [pc, #264]	; (8005244 <pvPortMalloc+0x18c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800513e:	e004      	b.n	800514a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800514a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	d903      	bls.n	800515c <pvPortMalloc+0xa4>
 8005154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1f1      	bne.n	8005140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800515c:	4b36      	ldr	r3, [pc, #216]	; (8005238 <pvPortMalloc+0x180>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005162:	429a      	cmp	r2, r3
 8005164:	d050      	beq.n	8005208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2208      	movs	r2, #8
 800516c:	4413      	add	r3, r2
 800516e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	1ad2      	subs	r2, r2, r3
 8005180:	2308      	movs	r3, #8
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	429a      	cmp	r2, r3
 8005186:	d91f      	bls.n	80051c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4413      	add	r3, r2
 800518e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f003 0307 	and.w	r3, r3, #7
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <pvPortMalloc+0xf8>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	613b      	str	r3, [r7, #16]
}
 80051ac:	bf00      	nop
 80051ae:	e7fe      	b.n	80051ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	1ad2      	subs	r2, r2, r3
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051c2:	69b8      	ldr	r0, [r7, #24]
 80051c4:	f000 f908 	bl	80053d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051c8:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <pvPortMalloc+0x188>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	4a1b      	ldr	r2, [pc, #108]	; (8005240 <pvPortMalloc+0x188>)
 80051d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051d6:	4b1a      	ldr	r3, [pc, #104]	; (8005240 <pvPortMalloc+0x188>)
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <pvPortMalloc+0x190>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d203      	bcs.n	80051ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051e2:	4b17      	ldr	r3, [pc, #92]	; (8005240 <pvPortMalloc+0x188>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a18      	ldr	r2, [pc, #96]	; (8005248 <pvPortMalloc+0x190>)
 80051e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	4b13      	ldr	r3, [pc, #76]	; (800523c <pvPortMalloc+0x184>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80051fe:	4b13      	ldr	r3, [pc, #76]	; (800524c <pvPortMalloc+0x194>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3301      	adds	r3, #1
 8005204:	4a11      	ldr	r2, [pc, #68]	; (800524c <pvPortMalloc+0x194>)
 8005206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005208:	f7fe fbfa 	bl	8003a00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <pvPortMalloc+0x174>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	60fb      	str	r3, [r7, #12]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <pvPortMalloc+0x172>
	return pvReturn;
 800522c:	69fb      	ldr	r3, [r7, #28]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3728      	adds	r7, #40	; 0x28
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	200049c4 	.word	0x200049c4
 800523c:	200049d8 	.word	0x200049d8
 8005240:	200049c8 	.word	0x200049c8
 8005244:	200049bc 	.word	0x200049bc
 8005248:	200049cc 	.word	0x200049cc
 800524c:	200049d0 	.word	0x200049d0

08005250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d04d      	beq.n	80052fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005262:	2308      	movs	r3, #8
 8005264:	425b      	negs	r3, r3
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4413      	add	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	4b24      	ldr	r3, [pc, #144]	; (8005308 <vPortFree+0xb8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4013      	ands	r3, r2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10a      	bne.n	8005294 <vPortFree+0x44>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	60fb      	str	r3, [r7, #12]
}
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <vPortFree+0x62>
	__asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	60bb      	str	r3, [r7, #8]
}
 80052ae:	bf00      	nop
 80052b0:	e7fe      	b.n	80052b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	4b14      	ldr	r3, [pc, #80]	; (8005308 <vPortFree+0xb8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01e      	beq.n	80052fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d11a      	bne.n	80052fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <vPortFree+0xb8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	43db      	mvns	r3, r3
 80052d2:	401a      	ands	r2, r3
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052d8:	f7fe fb84 	bl	80039e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	4b0a      	ldr	r3, [pc, #40]	; (800530c <vPortFree+0xbc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4413      	add	r3, r2
 80052e6:	4a09      	ldr	r2, [pc, #36]	; (800530c <vPortFree+0xbc>)
 80052e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052ea:	6938      	ldr	r0, [r7, #16]
 80052ec:	f000 f874 	bl	80053d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80052f0:	4b07      	ldr	r3, [pc, #28]	; (8005310 <vPortFree+0xc0>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3301      	adds	r3, #1
 80052f6:	4a06      	ldr	r2, [pc, #24]	; (8005310 <vPortFree+0xc0>)
 80052f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80052fa:	f7fe fb81 	bl	8003a00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052fe:	bf00      	nop
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	200049d8 	.word	0x200049d8
 800530c:	200049c8 	.word	0x200049c8
 8005310:	200049d4 	.word	0x200049d4

08005314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800531a:	f241 7370 	movw	r3, #6000	; 0x1770
 800531e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005320:	4b27      	ldr	r3, [pc, #156]	; (80053c0 <prvHeapInit+0xac>)
 8005322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00c      	beq.n	8005348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	3307      	adds	r3, #7
 8005332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 0307 	bic.w	r3, r3, #7
 800533a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <prvHeapInit+0xac>)
 8005344:	4413      	add	r3, r2
 8005346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800534c:	4a1d      	ldr	r2, [pc, #116]	; (80053c4 <prvHeapInit+0xb0>)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005352:	4b1c      	ldr	r3, [pc, #112]	; (80053c4 <prvHeapInit+0xb0>)
 8005354:	2200      	movs	r2, #0
 8005356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	4413      	add	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005360:	2208      	movs	r2, #8
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	1a9b      	subs	r3, r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0307 	bic.w	r3, r3, #7
 800536e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	4a15      	ldr	r2, [pc, #84]	; (80053c8 <prvHeapInit+0xb4>)
 8005374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <prvHeapInit+0xb4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2200      	movs	r2, #0
 800537c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800537e:	4b12      	ldr	r3, [pc, #72]	; (80053c8 <prvHeapInit+0xb4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	1ad2      	subs	r2, r2, r3
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005394:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <prvHeapInit+0xb4>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	4a0a      	ldr	r2, [pc, #40]	; (80053cc <prvHeapInit+0xb8>)
 80053a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	4a09      	ldr	r2, [pc, #36]	; (80053d0 <prvHeapInit+0xbc>)
 80053aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053ac:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <prvHeapInit+0xc0>)
 80053ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053b2:	601a      	str	r2, [r3, #0]
}
 80053b4:	bf00      	nop
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	2000324c 	.word	0x2000324c
 80053c4:	200049bc 	.word	0x200049bc
 80053c8:	200049c4 	.word	0x200049c4
 80053cc:	200049cc 	.word	0x200049cc
 80053d0:	200049c8 	.word	0x200049c8
 80053d4:	200049d8 	.word	0x200049d8

080053d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053e0:	4b28      	ldr	r3, [pc, #160]	; (8005484 <prvInsertBlockIntoFreeList+0xac>)
 80053e2:	60fb      	str	r3, [r7, #12]
 80053e4:	e002      	b.n	80053ec <prvInsertBlockIntoFreeList+0x14>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d8f7      	bhi.n	80053e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	4413      	add	r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	429a      	cmp	r2, r3
 8005406:	d108      	bne.n	800541a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	441a      	add	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	441a      	add	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d118      	bne.n	8005460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <prvInsertBlockIntoFreeList+0xb0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d00d      	beq.n	8005456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	441a      	add	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	e008      	b.n	8005468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005456:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <prvInsertBlockIntoFreeList+0xb0>)
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	e003      	b.n	8005468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	429a      	cmp	r2, r3
 800546e:	d002      	beq.n	8005476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005476:	bf00      	nop
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	200049bc 	.word	0x200049bc
 8005488:	200049c4 	.word	0x200049c4

0800548c <arm_max_q15>:
 800548c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005490:	4684      	mov	ip, r0
 8005492:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8005496:	ea5f 089e 	movs.w	r8, lr, lsr #2
 800549a:	f93c 4b02 	ldrsh.w	r4, [ip], #2
 800549e:	d044      	beq.n	800552a <arm_max_q15+0x9e>
 80054a0:	2500      	movs	r5, #0
 80054a2:	300a      	adds	r0, #10
 80054a4:	462f      	mov	r7, r5
 80054a6:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80054aa:	f930 6c08 	ldrsh.w	r6, [r0, #-8]
 80054ae:	42b4      	cmp	r4, r6
 80054b0:	bfb8      	it	lt
 80054b2:	4634      	movlt	r4, r6
 80054b4:	f930 6c06 	ldrsh.w	r6, [r0, #-6]
 80054b8:	bfb8      	it	lt
 80054ba:	1c6f      	addlt	r7, r5, #1
 80054bc:	42b4      	cmp	r4, r6
 80054be:	bfb8      	it	lt
 80054c0:	4634      	movlt	r4, r6
 80054c2:	f930 6c04 	ldrsh.w	r6, [r0, #-4]
 80054c6:	bfb8      	it	lt
 80054c8:	1caf      	addlt	r7, r5, #2
 80054ca:	42b4      	cmp	r4, r6
 80054cc:	bfa8      	it	ge
 80054ce:	4626      	movge	r6, r4
 80054d0:	f930 4c02 	ldrsh.w	r4, [r0, #-2]
 80054d4:	bfb8      	it	lt
 80054d6:	1cef      	addlt	r7, r5, #3
 80054d8:	42a6      	cmp	r6, r4
 80054da:	f105 0504 	add.w	r5, r5, #4
 80054de:	bfac      	ite	ge
 80054e0:	4634      	movge	r4, r6
 80054e2:	462f      	movlt	r7, r5
 80054e4:	45a9      	cmp	r9, r5
 80054e6:	f100 0008 	add.w	r0, r0, #8
 80054ea:	d1de      	bne.n	80054aa <arm_max_q15+0x1e>
 80054ec:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 80054f0:	f01e 0003 	ands.w	r0, lr, #3
 80054f4:	d015      	beq.n	8005522 <arm_max_q15+0x96>
 80054f6:	f9bc 5000 	ldrsh.w	r5, [ip]
 80054fa:	42a5      	cmp	r5, r4
 80054fc:	bfc4      	itt	gt
 80054fe:	462c      	movgt	r4, r5
 8005500:	1a0f      	subgt	r7, r1, r0
 8005502:	3801      	subs	r0, #1
 8005504:	d00d      	beq.n	8005522 <arm_max_q15+0x96>
 8005506:	f9bc 5002 	ldrsh.w	r5, [ip, #2]
 800550a:	42ac      	cmp	r4, r5
 800550c:	bfbc      	itt	lt
 800550e:	1a0f      	sublt	r7, r1, r0
 8005510:	462c      	movlt	r4, r5
 8005512:	2801      	cmp	r0, #1
 8005514:	d005      	beq.n	8005522 <arm_max_q15+0x96>
 8005516:	f9bc 1004 	ldrsh.w	r1, [ip, #4]
 800551a:	42a1      	cmp	r1, r4
 800551c:	bfc4      	itt	gt
 800551e:	4677      	movgt	r7, lr
 8005520:	460c      	movgt	r4, r1
 8005522:	8014      	strh	r4, [r2, #0]
 8005524:	601f      	str	r7, [r3, #0]
 8005526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800552a:	4647      	mov	r7, r8
 800552c:	e7e0      	b.n	80054f0 <arm_max_q15+0x64>
 800552e:	bf00      	nop

08005530 <arm_rfft_q15>:
 8005530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	b083      	sub	sp, #12
 8005536:	6805      	ldr	r5, [r0, #0]
 8005538:	9200      	str	r2, [sp, #0]
 800553a:	7902      	ldrb	r2, [r0, #4]
 800553c:	086d      	lsrs	r5, r5, #1
 800553e:	00ab      	lsls	r3, r5, #2
 8005540:	2a01      	cmp	r2, #1
 8005542:	4604      	mov	r4, r0
 8005544:	9301      	str	r3, [sp, #4]
 8005546:	6940      	ldr	r0, [r0, #20]
 8005548:	460e      	mov	r6, r1
 800554a:	d051      	beq.n	80055f0 <arm_rfft_q15+0xc0>
 800554c:	7963      	ldrb	r3, [r4, #5]
 800554e:	f000 f9c3 	bl	80058d8 <arm_cfft_q15>
 8005552:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8005556:	6927      	ldr	r7, [r4, #16]
 8005558:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 800555c:	00aa      	lsls	r2, r5, #2
 800555e:	f1a2 0804 	sub.w	r8, r2, #4
 8005562:	1e6a      	subs	r2, r5, #1
 8005564:	eb03 0c0e 	add.w	ip, r3, lr
 8005568:	4477      	add	r7, lr
 800556a:	44b0      	add	r8, r6
 800556c:	f106 0b04 	add.w	fp, r6, #4
 8005570:	ea4f 04c5 	mov.w	r4, r5, lsl #3
 8005574:	d025      	beq.n	80055c2 <arm_rfft_q15+0x92>
 8005576:	9b00      	ldr	r3, [sp, #0]
 8005578:	3c08      	subs	r4, #8
 800557a:	441c      	add	r4, r3
 800557c:	f103 0508 	add.w	r5, r3, #8
 8005580:	f85b 3b04 	ldr.w	r3, [fp], #4
 8005584:	f8dc 9000 	ldr.w	r9, [ip]
 8005588:	fb43 f109 	smusd	r1, r3, r9
 800558c:	f858 0904 	ldr.w	r0, [r8], #-4
 8005590:	f8d7 a000 	ldr.w	sl, [r7]
 8005594:	fb20 110a 	smlad	r1, r0, sl, r1
 8005598:	fb40 f01a 	smusdx	r0, r0, sl
 800559c:	fb23 0319 	smladx	r3, r3, r9, r0
 80055a0:	141b      	asrs	r3, r3, #16
 80055a2:	1409      	asrs	r1, r1, #16
 80055a4:	4258      	negs	r0, r3
 80055a6:	3a01      	subs	r2, #1
 80055a8:	f825 3c02 	strh.w	r3, [r5, #-2]
 80055ac:	f825 1c04 	strh.w	r1, [r5, #-4]
 80055b0:	4477      	add	r7, lr
 80055b2:	80e0      	strh	r0, [r4, #6]
 80055b4:	80a1      	strh	r1, [r4, #4]
 80055b6:	44f4      	add	ip, lr
 80055b8:	f105 0504 	add.w	r5, r5, #4
 80055bc:	f1a4 0404 	sub.w	r4, r4, #4
 80055c0:	d1de      	bne.n	8005580 <arm_rfft_q15+0x50>
 80055c2:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 80055c6:	f9b6 3000 	ldrsh.w	r3, [r6]
 80055ca:	e9dd 0400 	ldrd	r0, r4, [sp]
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	105b      	asrs	r3, r3, #1
 80055d2:	1901      	adds	r1, r0, r4
 80055d4:	5303      	strh	r3, [r0, r4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	804a      	strh	r2, [r1, #2]
 80055da:	f9b6 3000 	ldrsh.w	r3, [r6]
 80055de:	f9b6 1002 	ldrsh.w	r1, [r6, #2]
 80055e2:	8042      	strh	r2, [r0, #2]
 80055e4:	440b      	add	r3, r1
 80055e6:	105b      	asrs	r3, r3, #1
 80055e8:	8003      	strh	r3, [r0, #0]
 80055ea:	b003      	add	sp, #12
 80055ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f0:	440b      	add	r3, r1
 80055f2:	469a      	mov	sl, r3
 80055f4:	e9d4 c703 	ldrd	ip, r7, [r4, #12]
 80055f8:	68a3      	ldr	r3, [r4, #8]
 80055fa:	b1f5      	cbz	r5, 800563a <arm_rfft_q15+0x10a>
 80055fc:	f8dd b000 	ldr.w	fp, [sp]
 8005600:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8005604:	f85a 1904 	ldr.w	r1, [sl], #-4
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	fb41 fe03 	smusd	lr, r1, r3
 800560e:	f856 8b04 	ldr.w	r8, [r6], #4
 8005612:	f8dc 2000 	ldr.w	r2, [ip]
 8005616:	fb28 ee02 	smlad	lr, r8, r2, lr
 800561a:	fb21 f313 	smuadx	r3, r1, r3
 800561e:	425b      	negs	r3, r3
 8005620:	fb42 3218 	smlsdx	r2, r2, r8, r3
 8005624:	0c13      	lsrs	r3, r2, #16
 8005626:	041b      	lsls	r3, r3, #16
 8005628:	ea43 431e 	orr.w	r3, r3, lr, lsr #16
 800562c:	3d01      	subs	r5, #1
 800562e:	f84b 3b04 	str.w	r3, [fp], #4
 8005632:	444f      	add	r7, r9
 8005634:	44cc      	add	ip, r9
 8005636:	d1e5      	bne.n	8005604 <arm_rfft_q15+0xd4>
 8005638:	7922      	ldrb	r2, [r4, #4]
 800563a:	9d00      	ldr	r5, [sp, #0]
 800563c:	7963      	ldrb	r3, [r4, #5]
 800563e:	4629      	mov	r1, r5
 8005640:	f000 f94a 	bl	80058d8 <arm_cfft_q15>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d0cf      	beq.n	80055ea <arm_rfft_q15+0xba>
 800564a:	1ea9      	subs	r1, r5, #2
 800564c:	2200      	movs	r2, #0
 800564e:	f931 3f02 	ldrsh.w	r3, [r1, #2]!
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	800b      	strh	r3, [r1, #0]
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	3201      	adds	r2, #1
 800565a:	4293      	cmp	r3, r2
 800565c:	d8f7      	bhi.n	800564e <arm_rfft_q15+0x11e>
 800565e:	b003      	add	sp, #12
 8005660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005664 <arm_rfft_init_q15>:
 8005664:	b430      	push	{r4, r5}
 8005666:	b289      	uxth	r1, r1
 8005668:	4d2e      	ldr	r5, [pc, #184]	; (8005724 <arm_rfft_init_q15+0xc0>)
 800566a:	4c2f      	ldr	r4, [pc, #188]	; (8005728 <arm_rfft_init_q15+0xc4>)
 800566c:	7102      	strb	r2, [r0, #4]
 800566e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005672:	7143      	strb	r3, [r0, #5]
 8005674:	6001      	str	r1, [r0, #0]
 8005676:	e9c0 5403 	strd	r5, r4, [r0, #12]
 800567a:	d035      	beq.n	80056e8 <arm_rfft_init_q15+0x84>
 800567c:	d919      	bls.n	80056b2 <arm_rfft_init_q15+0x4e>
 800567e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8005682:	d037      	beq.n	80056f4 <arm_rfft_init_q15+0x90>
 8005684:	d90c      	bls.n	80056a0 <arm_rfft_init_q15+0x3c>
 8005686:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800568a:	d039      	beq.n	8005700 <arm_rfft_init_q15+0x9c>
 800568c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005690:	d126      	bne.n	80056e0 <arm_rfft_init_q15+0x7c>
 8005692:	2201      	movs	r2, #1
 8005694:	4b25      	ldr	r3, [pc, #148]	; (800572c <arm_rfft_init_q15+0xc8>)
 8005696:	6082      	str	r2, [r0, #8]
 8005698:	6143      	str	r3, [r0, #20]
 800569a:	2000      	movs	r0, #0
 800569c:	bc30      	pop	{r4, r5}
 800569e:	4770      	bx	lr
 80056a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80056a4:	d11c      	bne.n	80056e0 <arm_rfft_init_q15+0x7c>
 80056a6:	2208      	movs	r2, #8
 80056a8:	4b21      	ldr	r3, [pc, #132]	; (8005730 <arm_rfft_init_q15+0xcc>)
 80056aa:	6082      	str	r2, [r0, #8]
 80056ac:	6143      	str	r3, [r0, #20]
 80056ae:	2000      	movs	r0, #0
 80056b0:	e7f4      	b.n	800569c <arm_rfft_init_q15+0x38>
 80056b2:	2940      	cmp	r1, #64	; 0x40
 80056b4:	d02a      	beq.n	800570c <arm_rfft_init_q15+0xa8>
 80056b6:	d90a      	bls.n	80056ce <arm_rfft_init_q15+0x6a>
 80056b8:	2980      	cmp	r1, #128	; 0x80
 80056ba:	d02d      	beq.n	8005718 <arm_rfft_init_q15+0xb4>
 80056bc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80056c0:	d10e      	bne.n	80056e0 <arm_rfft_init_q15+0x7c>
 80056c2:	2220      	movs	r2, #32
 80056c4:	4b1b      	ldr	r3, [pc, #108]	; (8005734 <arm_rfft_init_q15+0xd0>)
 80056c6:	6082      	str	r2, [r0, #8]
 80056c8:	6143      	str	r3, [r0, #20]
 80056ca:	2000      	movs	r0, #0
 80056cc:	e7e6      	b.n	800569c <arm_rfft_init_q15+0x38>
 80056ce:	2920      	cmp	r1, #32
 80056d0:	d106      	bne.n	80056e0 <arm_rfft_init_q15+0x7c>
 80056d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056d6:	4b18      	ldr	r3, [pc, #96]	; (8005738 <arm_rfft_init_q15+0xd4>)
 80056d8:	6082      	str	r2, [r0, #8]
 80056da:	6143      	str	r3, [r0, #20]
 80056dc:	2000      	movs	r0, #0
 80056de:	e7dd      	b.n	800569c <arm_rfft_init_q15+0x38>
 80056e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056e4:	bc30      	pop	{r4, r5}
 80056e6:	4770      	bx	lr
 80056e8:	2210      	movs	r2, #16
 80056ea:	4b14      	ldr	r3, [pc, #80]	; (800573c <arm_rfft_init_q15+0xd8>)
 80056ec:	6082      	str	r2, [r0, #8]
 80056ee:	6143      	str	r3, [r0, #20]
 80056f0:	2000      	movs	r0, #0
 80056f2:	e7d3      	b.n	800569c <arm_rfft_init_q15+0x38>
 80056f4:	2204      	movs	r2, #4
 80056f6:	4b12      	ldr	r3, [pc, #72]	; (8005740 <arm_rfft_init_q15+0xdc>)
 80056f8:	6082      	str	r2, [r0, #8]
 80056fa:	6143      	str	r3, [r0, #20]
 80056fc:	2000      	movs	r0, #0
 80056fe:	e7cd      	b.n	800569c <arm_rfft_init_q15+0x38>
 8005700:	2202      	movs	r2, #2
 8005702:	4b10      	ldr	r3, [pc, #64]	; (8005744 <arm_rfft_init_q15+0xe0>)
 8005704:	6082      	str	r2, [r0, #8]
 8005706:	6143      	str	r3, [r0, #20]
 8005708:	2000      	movs	r0, #0
 800570a:	e7c7      	b.n	800569c <arm_rfft_init_q15+0x38>
 800570c:	2280      	movs	r2, #128	; 0x80
 800570e:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <arm_rfft_init_q15+0xe4>)
 8005710:	6082      	str	r2, [r0, #8]
 8005712:	6143      	str	r3, [r0, #20]
 8005714:	2000      	movs	r0, #0
 8005716:	e7c1      	b.n	800569c <arm_rfft_init_q15+0x38>
 8005718:	2240      	movs	r2, #64	; 0x40
 800571a:	4b0c      	ldr	r3, [pc, #48]	; (800574c <arm_rfft_init_q15+0xe8>)
 800571c:	6082      	str	r2, [r0, #8]
 800571e:	6143      	str	r3, [r0, #20]
 8005720:	2000      	movs	r0, #0
 8005722:	e7bb      	b.n	800569c <arm_rfft_init_q15+0x38>
 8005724:	0800a13c 	.word	0x0800a13c
 8005728:	0800e13c 	.word	0x0800e13c
 800572c:	08006314 	.word	0x08006314
 8005730:	08006324 	.word	0x08006324
 8005734:	080062c4 	.word	0x080062c4
 8005738:	080062d4 	.word	0x080062d4
 800573c:	080062f4 	.word	0x080062f4
 8005740:	080062b4 	.word	0x080062b4
 8005744:	080062e4 	.word	0x080062e4
 8005748:	08006304 	.word	0x08006304
 800574c:	08006334 	.word	0x08006334

08005750 <arm_cfft_radix4by2_q15>:
 8005750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005754:	084d      	lsrs	r5, r1, #1
 8005756:	b081      	sub	sp, #4
 8005758:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 800575c:	4616      	mov	r6, r2
 800575e:	d049      	beq.n	80057f4 <arm_cfft_radix4by2_q15+0xa4>
 8005760:	4604      	mov	r4, r0
 8005762:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8005810 <arm_cfft_radix4by2_q15+0xc0>
 8005766:	4696      	mov	lr, r2
 8005768:	4638      	mov	r0, r7
 800576a:	4621      	mov	r1, r4
 800576c:	462a      	mov	r2, r5
 800576e:	f04f 0c00 	mov.w	ip, #0
 8005772:	f85e 3b04 	ldr.w	r3, [lr], #4
 8005776:	f8d1 9000 	ldr.w	r9, [r1]
 800577a:	fa99 f92c 	shadd16	r9, r9, ip
 800577e:	f8d0 b000 	ldr.w	fp, [r0]
 8005782:	fa9b fb2c 	shadd16	fp, fp, ip
 8005786:	fad9 fa1b 	qsub16	sl, r9, fp
 800578a:	fa99 f92b 	shadd16	r9, r9, fp
 800578e:	f841 9b04 	str.w	r9, [r1], #4
 8005792:	fb23 f90a 	smuad	r9, r3, sl
 8005796:	fb43 f31a 	smusdx	r3, r3, sl
 800579a:	ea03 0308 	and.w	r3, r3, r8
 800579e:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 80057a2:	3a01      	subs	r2, #1
 80057a4:	f840 3b04 	str.w	r3, [r0], #4
 80057a8:	d1e3      	bne.n	8005772 <arm_cfft_radix4by2_q15+0x22>
 80057aa:	4629      	mov	r1, r5
 80057ac:	2302      	movs	r3, #2
 80057ae:	4632      	mov	r2, r6
 80057b0:	4620      	mov	r0, r4
 80057b2:	f000 f8fd 	bl	80059b0 <arm_radix4_butterfly_q15>
 80057b6:	4638      	mov	r0, r7
 80057b8:	4629      	mov	r1, r5
 80057ba:	4632      	mov	r2, r6
 80057bc:	2302      	movs	r3, #2
 80057be:	f000 f8f7 	bl	80059b0 <arm_radix4_butterfly_q15>
 80057c2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80057c6:	4620      	mov	r0, r4
 80057c8:	f9b0 6000 	ldrsh.w	r6, [r0]
 80057cc:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80057d0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80057d4:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80057d8:	0076      	lsls	r6, r6, #1
 80057da:	0064      	lsls	r4, r4, #1
 80057dc:	0052      	lsls	r2, r2, #1
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	8006      	strh	r6, [r0, #0]
 80057e2:	8044      	strh	r4, [r0, #2]
 80057e4:	8082      	strh	r2, [r0, #4]
 80057e6:	80c3      	strh	r3, [r0, #6]
 80057e8:	3008      	adds	r0, #8
 80057ea:	4285      	cmp	r5, r0
 80057ec:	d1ec      	bne.n	80057c8 <arm_cfft_radix4by2_q15+0x78>
 80057ee:	b001      	add	sp, #4
 80057f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f4:	4629      	mov	r1, r5
 80057f6:	2302      	movs	r3, #2
 80057f8:	f000 f8da 	bl	80059b0 <arm_radix4_butterfly_q15>
 80057fc:	4632      	mov	r2, r6
 80057fe:	4629      	mov	r1, r5
 8005800:	4638      	mov	r0, r7
 8005802:	2302      	movs	r3, #2
 8005804:	b001      	add	sp, #4
 8005806:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580a:	f000 b8d1 	b.w	80059b0 <arm_radix4_butterfly_q15>
 800580e:	bf00      	nop
 8005810:	ffff0000 	.word	0xffff0000

08005814 <arm_cfft_radix4by2_inverse_q15>:
 8005814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005818:	084d      	lsrs	r5, r1, #1
 800581a:	b081      	sub	sp, #4
 800581c:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8005820:	4616      	mov	r6, r2
 8005822:	d049      	beq.n	80058b8 <arm_cfft_radix4by2_inverse_q15+0xa4>
 8005824:	4604      	mov	r4, r0
 8005826:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80058d4 <arm_cfft_radix4by2_inverse_q15+0xc0>
 800582a:	4696      	mov	lr, r2
 800582c:	4638      	mov	r0, r7
 800582e:	4621      	mov	r1, r4
 8005830:	462a      	mov	r2, r5
 8005832:	f04f 0c00 	mov.w	ip, #0
 8005836:	f85e 3b04 	ldr.w	r3, [lr], #4
 800583a:	f8d1 9000 	ldr.w	r9, [r1]
 800583e:	fa99 f92c 	shadd16	r9, r9, ip
 8005842:	f8d0 b000 	ldr.w	fp, [r0]
 8005846:	fa9b fb2c 	shadd16	fp, fp, ip
 800584a:	fad9 fa1b 	qsub16	sl, r9, fp
 800584e:	fa99 f92b 	shadd16	r9, r9, fp
 8005852:	f841 9b04 	str.w	r9, [r1], #4
 8005856:	fb43 f90a 	smusd	r9, r3, sl
 800585a:	fb23 f31a 	smuadx	r3, r3, sl
 800585e:	ea03 0308 	and.w	r3, r3, r8
 8005862:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8005866:	3a01      	subs	r2, #1
 8005868:	f840 3b04 	str.w	r3, [r0], #4
 800586c:	d1e3      	bne.n	8005836 <arm_cfft_radix4by2_inverse_q15+0x22>
 800586e:	4629      	mov	r1, r5
 8005870:	2302      	movs	r3, #2
 8005872:	4632      	mov	r2, r6
 8005874:	4620      	mov	r0, r4
 8005876:	f000 f9cf 	bl	8005c18 <arm_radix4_butterfly_inverse_q15>
 800587a:	4638      	mov	r0, r7
 800587c:	4629      	mov	r1, r5
 800587e:	4632      	mov	r2, r6
 8005880:	2302      	movs	r3, #2
 8005882:	f000 f9c9 	bl	8005c18 <arm_radix4_butterfly_inverse_q15>
 8005886:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800588a:	4620      	mov	r0, r4
 800588c:	f9b0 6000 	ldrsh.w	r6, [r0]
 8005890:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8005894:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8005898:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800589c:	0076      	lsls	r6, r6, #1
 800589e:	0064      	lsls	r4, r4, #1
 80058a0:	0052      	lsls	r2, r2, #1
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	8006      	strh	r6, [r0, #0]
 80058a6:	8044      	strh	r4, [r0, #2]
 80058a8:	8082      	strh	r2, [r0, #4]
 80058aa:	80c3      	strh	r3, [r0, #6]
 80058ac:	3008      	adds	r0, #8
 80058ae:	4285      	cmp	r5, r0
 80058b0:	d1ec      	bne.n	800588c <arm_cfft_radix4by2_inverse_q15+0x78>
 80058b2:	b001      	add	sp, #4
 80058b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b8:	4629      	mov	r1, r5
 80058ba:	2302      	movs	r3, #2
 80058bc:	f000 f9ac 	bl	8005c18 <arm_radix4_butterfly_inverse_q15>
 80058c0:	4632      	mov	r2, r6
 80058c2:	4629      	mov	r1, r5
 80058c4:	4638      	mov	r0, r7
 80058c6:	2302      	movs	r3, #2
 80058c8:	b001      	add	sp, #4
 80058ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ce:	f000 b9a3 	b.w	8005c18 <arm_radix4_butterfly_inverse_q15>
 80058d2:	bf00      	nop
 80058d4:	ffff0000 	.word	0xffff0000

080058d8 <arm_cfft_q15>:
 80058d8:	b570      	push	{r4, r5, r6, lr}
 80058da:	2a01      	cmp	r2, #1
 80058dc:	460e      	mov	r6, r1
 80058de:	4604      	mov	r4, r0
 80058e0:	461d      	mov	r5, r3
 80058e2:	8801      	ldrh	r1, [r0, #0]
 80058e4:	d033      	beq.n	800594e <arm_cfft_q15+0x76>
 80058e6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80058ea:	d02a      	beq.n	8005942 <arm_cfft_q15+0x6a>
 80058ec:	d90b      	bls.n	8005906 <arm_cfft_q15+0x2e>
 80058ee:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80058f2:	d026      	beq.n	8005942 <arm_cfft_q15+0x6a>
 80058f4:	d91b      	bls.n	800592e <arm_cfft_q15+0x56>
 80058f6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80058fa:	d00b      	beq.n	8005914 <arm_cfft_q15+0x3c>
 80058fc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005900:	d01f      	beq.n	8005942 <arm_cfft_q15+0x6a>
 8005902:	b96d      	cbnz	r5, 8005920 <arm_cfft_q15+0x48>
 8005904:	bd70      	pop	{r4, r5, r6, pc}
 8005906:	2920      	cmp	r1, #32
 8005908:	d004      	beq.n	8005914 <arm_cfft_q15+0x3c>
 800590a:	d918      	bls.n	800593e <arm_cfft_q15+0x66>
 800590c:	2940      	cmp	r1, #64	; 0x40
 800590e:	d018      	beq.n	8005942 <arm_cfft_q15+0x6a>
 8005910:	2980      	cmp	r1, #128	; 0x80
 8005912:	d1f6      	bne.n	8005902 <arm_cfft_q15+0x2a>
 8005914:	6862      	ldr	r2, [r4, #4]
 8005916:	4630      	mov	r0, r6
 8005918:	f7ff ff1a 	bl	8005750 <arm_cfft_radix4by2_q15>
 800591c:	2d00      	cmp	r5, #0
 800591e:	d0f1      	beq.n	8005904 <arm_cfft_q15+0x2c>
 8005920:	4630      	mov	r0, r6
 8005922:	68a2      	ldr	r2, [r4, #8]
 8005924:	89a1      	ldrh	r1, [r4, #12]
 8005926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800592a:	f000 baa9 	b.w	8005e80 <arm_bitreversal_16>
 800592e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005932:	d1e6      	bne.n	8005902 <arm_cfft_q15+0x2a>
 8005934:	6862      	ldr	r2, [r4, #4]
 8005936:	4630      	mov	r0, r6
 8005938:	f7ff ff0a 	bl	8005750 <arm_cfft_radix4by2_q15>
 800593c:	e7ee      	b.n	800591c <arm_cfft_q15+0x44>
 800593e:	2910      	cmp	r1, #16
 8005940:	d1df      	bne.n	8005902 <arm_cfft_q15+0x2a>
 8005942:	2301      	movs	r3, #1
 8005944:	6862      	ldr	r2, [r4, #4]
 8005946:	4630      	mov	r0, r6
 8005948:	f000 f832 	bl	80059b0 <arm_radix4_butterfly_q15>
 800594c:	e7d9      	b.n	8005902 <arm_cfft_q15+0x2a>
 800594e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005952:	d00a      	beq.n	800596a <arm_cfft_q15+0x92>
 8005954:	d90f      	bls.n	8005976 <arm_cfft_q15+0x9e>
 8005956:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800595a:	d006      	beq.n	800596a <arm_cfft_q15+0x92>
 800595c:	d917      	bls.n	800598e <arm_cfft_q15+0xb6>
 800595e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8005962:	d00f      	beq.n	8005984 <arm_cfft_q15+0xac>
 8005964:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005968:	d1cb      	bne.n	8005902 <arm_cfft_q15+0x2a>
 800596a:	2301      	movs	r3, #1
 800596c:	6862      	ldr	r2, [r4, #4]
 800596e:	4630      	mov	r0, r6
 8005970:	f000 f952 	bl	8005c18 <arm_radix4_butterfly_inverse_q15>
 8005974:	e7c5      	b.n	8005902 <arm_cfft_q15+0x2a>
 8005976:	2920      	cmp	r1, #32
 8005978:	d004      	beq.n	8005984 <arm_cfft_q15+0xac>
 800597a:	d910      	bls.n	800599e <arm_cfft_q15+0xc6>
 800597c:	2940      	cmp	r1, #64	; 0x40
 800597e:	d0f4      	beq.n	800596a <arm_cfft_q15+0x92>
 8005980:	2980      	cmp	r1, #128	; 0x80
 8005982:	d1be      	bne.n	8005902 <arm_cfft_q15+0x2a>
 8005984:	6862      	ldr	r2, [r4, #4]
 8005986:	4630      	mov	r0, r6
 8005988:	f7ff ff44 	bl	8005814 <arm_cfft_radix4by2_inverse_q15>
 800598c:	e7b9      	b.n	8005902 <arm_cfft_q15+0x2a>
 800598e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005992:	d1b6      	bne.n	8005902 <arm_cfft_q15+0x2a>
 8005994:	6862      	ldr	r2, [r4, #4]
 8005996:	4630      	mov	r0, r6
 8005998:	f7ff ff3c 	bl	8005814 <arm_cfft_radix4by2_inverse_q15>
 800599c:	e7b1      	b.n	8005902 <arm_cfft_q15+0x2a>
 800599e:	2910      	cmp	r1, #16
 80059a0:	d1af      	bne.n	8005902 <arm_cfft_q15+0x2a>
 80059a2:	2301      	movs	r3, #1
 80059a4:	6862      	ldr	r2, [r4, #4]
 80059a6:	4630      	mov	r0, r6
 80059a8:	f000 f936 	bl	8005c18 <arm_radix4_butterfly_inverse_q15>
 80059ac:	e7a9      	b.n	8005902 <arm_cfft_q15+0x2a>
 80059ae:	bf00      	nop

080059b0 <arm_radix4_butterfly_q15>:
 80059b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b4:	088f      	lsrs	r7, r1, #2
 80059b6:	b095      	sub	sp, #84	; 0x54
 80059b8:	00be      	lsls	r6, r7, #2
 80059ba:	4684      	mov	ip, r0
 80059bc:	9011      	str	r0, [sp, #68]	; 0x44
 80059be:	4430      	add	r0, r6
 80059c0:	9103      	str	r1, [sp, #12]
 80059c2:	1984      	adds	r4, r0, r6
 80059c4:	2100      	movs	r1, #0
 80059c6:	4d93      	ldr	r5, [pc, #588]	; (8005c14 <arm_radix4_butterfly_q15+0x264>)
 80059c8:	9713      	str	r7, [sp, #76]	; 0x4c
 80059ca:	469a      	mov	sl, r3
 80059cc:	46b9      	mov	r9, r7
 80059ce:	9212      	str	r2, [sp, #72]	; 0x48
 80059d0:	4667      	mov	r7, ip
 80059d2:	4426      	add	r6, r4
 80059d4:	460b      	mov	r3, r1
 80059d6:	4694      	mov	ip, r2
 80059d8:	f8d7 b000 	ldr.w	fp, [r7]
 80059dc:	fa9b fb23 	shadd16	fp, fp, r3
 80059e0:	fa9b fb23 	shadd16	fp, fp, r3
 80059e4:	6822      	ldr	r2, [r4, #0]
 80059e6:	fa92 f223 	shadd16	r2, r2, r3
 80059ea:	fa92 f223 	shadd16	r2, r2, r3
 80059ee:	fa9b fe12 	qadd16	lr, fp, r2
 80059f2:	fadb fb12 	qsub16	fp, fp, r2
 80059f6:	6802      	ldr	r2, [r0, #0]
 80059f8:	fa92 f223 	shadd16	r2, r2, r3
 80059fc:	fa92 f223 	shadd16	r2, r2, r3
 8005a00:	f8d6 8000 	ldr.w	r8, [r6]
 8005a04:	fa98 f823 	shadd16	r8, r8, r3
 8005a08:	fa98 f823 	shadd16	r8, r8, r3
 8005a0c:	fa92 f218 	qadd16	r2, r2, r8
 8005a10:	fa9e f822 	shadd16	r8, lr, r2
 8005a14:	f847 8b04 	str.w	r8, [r7], #4
 8005a18:	fade fe12 	qsub16	lr, lr, r2
 8005a1c:	f85c 2031 	ldr.w	r2, [ip, r1, lsl #3]
 8005a20:	fb22 f80e 	smuad	r8, r2, lr
 8005a24:	fb42 fe1e 	smusdx	lr, r2, lr
 8005a28:	6802      	ldr	r2, [r0, #0]
 8005a2a:	fa92 f223 	shadd16	r2, r2, r3
 8005a2e:	fa92 f223 	shadd16	r2, r2, r3
 8005a32:	ea0e 0e05 	and.w	lr, lr, r5
 8005a36:	ea4e 4e18 	orr.w	lr, lr, r8, lsr #16
 8005a3a:	f840 eb04 	str.w	lr, [r0], #4
 8005a3e:	f8d6 e000 	ldr.w	lr, [r6]
 8005a42:	fa9e fe23 	shadd16	lr, lr, r3
 8005a46:	fa9e fe23 	shadd16	lr, lr, r3
 8005a4a:	fad2 f21e 	qsub16	r2, r2, lr
 8005a4e:	faab f812 	qasx	r8, fp, r2
 8005a52:	faeb fb12 	qsax	fp, fp, r2
 8005a56:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 8005a5a:	fb22 fe0b 	smuad	lr, r2, fp
 8005a5e:	fb42 f21b 	smusdx	r2, r2, fp
 8005a62:	402a      	ands	r2, r5
 8005a64:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 8005a68:	f844 2b04 	str.w	r2, [r4], #4
 8005a6c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005a70:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8005a74:	fb22 fe08 	smuad	lr, r2, r8
 8005a78:	fb42 f218 	smusdx	r2, r2, r8
 8005a7c:	402a      	ands	r2, r5
 8005a7e:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 8005a82:	f1b9 0901 	subs.w	r9, r9, #1
 8005a86:	f846 2b04 	str.w	r2, [r6], #4
 8005a8a:	4451      	add	r1, sl
 8005a8c:	d1a4      	bne.n	80059d8 <arm_radix4_butterfly_q15+0x28>
 8005a8e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a90:	2a04      	cmp	r2, #4
 8005a92:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8005a96:	f240 80ba 	bls.w	8005c0e <arm_radix4_butterfly_q15+0x25e>
 8005a9a:	f8df b178 	ldr.w	fp, [pc, #376]	; 8005c14 <arm_radix4_butterfly_q15+0x264>
 8005a9e:	f8cd 9010 	str.w	r9, [sp, #16]
 8005aa2:	9202      	str	r2, [sp, #8]
 8005aa4:	9c02      	ldr	r4, [sp, #8]
 8005aa6:	08a1      	lsrs	r1, r4, #2
 8005aa8:	0088      	lsls	r0, r1, #2
 8005aaa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8005aae:	0092      	lsls	r2, r2, #2
 8005ab0:	900c      	str	r0, [sp, #48]	; 0x30
 8005ab2:	9803      	ldr	r0, [sp, #12]
 8005ab4:	920f      	str	r2, [sp, #60]	; 0x3c
 8005ab6:	009a      	lsls	r2, r3, #2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	4605      	mov	r5, r0
 8005abc:	930d      	str	r3, [sp, #52]	; 0x34
 8005abe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005ac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ac2:	9110      	str	r1, [sp, #64]	; 0x40
 8005ac4:	428d      	cmp	r5, r1
 8005ac6:	bf28      	it	cs
 8005ac8:	460d      	movcs	r5, r1
 8005aca:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8005ace:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8005ad2:	9306      	str	r3, [sp, #24]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	950e      	str	r5, [sp, #56]	; 0x38
 8005ad8:	9107      	str	r1, [sp, #28]
 8005ada:	00a7      	lsls	r7, r4, #2
 8005adc:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ade:	9008      	str	r0, [sp, #32]
 8005ae0:	9305      	str	r3, [sp, #20]
 8005ae2:	9b06      	ldr	r3, [sp, #24]
 8005ae4:	9a08      	ldr	r2, [sp, #32]
 8005ae6:	f8d3 a000 	ldr.w	sl, [r3]
 8005aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aec:	f8dd e014 	ldr.w	lr, [sp, #20]
 8005af0:	f8d3 9000 	ldr.w	r9, [r3]
 8005af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af6:	f8d3 8000 	ldr.w	r8, [r3]
 8005afa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005afc:	4616      	mov	r6, r2
 8005afe:	1898      	adds	r0, r3, r2
 8005b00:	9a07      	ldr	r2, [sp, #28]
 8005b02:	4615      	mov	r5, r2
 8005b04:	1899      	adds	r1, r3, r2
 8005b06:	6832      	ldr	r2, [r6, #0]
 8005b08:	682c      	ldr	r4, [r5, #0]
 8005b0a:	fa92 f314 	qadd16	r3, r2, r4
 8005b0e:	fad2 f214 	qsub16	r2, r2, r4
 8005b12:	6804      	ldr	r4, [r0, #0]
 8005b14:	f8d1 c000 	ldr.w	ip, [r1]
 8005b18:	fa94 f41c 	qadd16	r4, r4, ip
 8005b1c:	9301      	str	r3, [sp, #4]
 8005b1e:	fa93 fc24 	shadd16	ip, r3, r4
 8005b22:	9b04      	ldr	r3, [sp, #16]
 8005b24:	fa9c fc23 	shadd16	ip, ip, r3
 8005b28:	f8c6 c000 	str.w	ip, [r6]
 8005b2c:	9b01      	ldr	r3, [sp, #4]
 8005b2e:	443e      	add	r6, r7
 8005b30:	fad3 f324 	shsub16	r3, r3, r4
 8005b34:	fb29 fc03 	smuad	ip, r9, r3
 8005b38:	fb49 f313 	smusdx	r3, r9, r3
 8005b3c:	ea03 030b 	and.w	r3, r3, fp
 8005b40:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8005b44:	f8d0 c000 	ldr.w	ip, [r0]
 8005b48:	6003      	str	r3, [r0, #0]
 8005b4a:	680c      	ldr	r4, [r1, #0]
 8005b4c:	4438      	add	r0, r7
 8005b4e:	fadc f414 	qsub16	r4, ip, r4
 8005b52:	faa2 f324 	shasx	r3, r2, r4
 8005b56:	fae2 f224 	shsax	r2, r2, r4
 8005b5a:	fb2a f402 	smuad	r4, sl, r2
 8005b5e:	fb4a f212 	smusdx	r2, sl, r2
 8005b62:	ea02 020b 	and.w	r2, r2, fp
 8005b66:	ea42 4214 	orr.w	r2, r2, r4, lsr #16
 8005b6a:	602a      	str	r2, [r5, #0]
 8005b6c:	443d      	add	r5, r7
 8005b6e:	fb28 f203 	smuad	r2, r8, r3
 8005b72:	fb48 f313 	smusdx	r3, r8, r3
 8005b76:	ea03 030b 	and.w	r3, r3, fp
 8005b7a:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8005b7e:	9a02      	ldr	r2, [sp, #8]
 8005b80:	600b      	str	r3, [r1, #0]
 8005b82:	9b03      	ldr	r3, [sp, #12]
 8005b84:	4496      	add	lr, r2
 8005b86:	4573      	cmp	r3, lr
 8005b88:	4439      	add	r1, r7
 8005b8a:	d8bc      	bhi.n	8005b06 <arm_radix4_butterfly_q15+0x156>
 8005b8c:	9a06      	ldr	r2, [sp, #24]
 8005b8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b90:	9b05      	ldr	r3, [sp, #20]
 8005b92:	440a      	add	r2, r1
 8005b94:	9206      	str	r2, [sp, #24]
 8005b96:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b9a:	440a      	add	r2, r1
 8005b9c:	920a      	str	r2, [sp, #40]	; 0x28
 8005b9e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ba2:	440a      	add	r2, r1
 8005ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ba6:	9a08      	ldr	r2, [sp, #32]
 8005ba8:	3204      	adds	r2, #4
 8005baa:	9208      	str	r2, [sp, #32]
 8005bac:	9a07      	ldr	r2, [sp, #28]
 8005bae:	3204      	adds	r2, #4
 8005bb0:	9207      	str	r2, [sp, #28]
 8005bb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	9305      	str	r3, [sp, #20]
 8005bba:	d392      	bcc.n	8005ae2 <arm_radix4_butterfly_q15+0x132>
 8005bbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005bbe:	9202      	str	r2, [sp, #8]
 8005bc0:	2a04      	cmp	r2, #4
 8005bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bc4:	f63f af6e 	bhi.w	8005aa4 <arm_radix4_butterfly_q15+0xf4>
 8005bc8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8005bca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	6859      	ldr	r1, [r3, #4]
 8005bd0:	689f      	ldr	r7, [r3, #8]
 8005bd2:	68dc      	ldr	r4, [r3, #12]
 8005bd4:	fa92 f017 	qadd16	r0, r2, r7
 8005bd8:	fa91 f514 	qadd16	r5, r1, r4
 8005bdc:	fa90 f525 	shadd16	r5, r0, r5
 8005be0:	601d      	str	r5, [r3, #0]
 8005be2:	fa91 f514 	qadd16	r5, r1, r4
 8005be6:	fad0 f025 	shsub16	r0, r0, r5
 8005bea:	6058      	str	r0, [r3, #4]
 8005bec:	fad2 f217 	qsub16	r2, r2, r7
 8005bf0:	fad1 f114 	qsub16	r1, r1, r4
 8005bf4:	fae2 f021 	shsax	r0, r2, r1
 8005bf8:	6098      	str	r0, [r3, #8]
 8005bfa:	faa2 f221 	shasx	r2, r2, r1
 8005bfe:	3e01      	subs	r6, #1
 8005c00:	60da      	str	r2, [r3, #12]
 8005c02:	f103 0310 	add.w	r3, r3, #16
 8005c06:	d1e1      	bne.n	8005bcc <arm_radix4_butterfly_q15+0x21c>
 8005c08:	b015      	add	sp, #84	; 0x54
 8005c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c0e:	4616      	mov	r6, r2
 8005c10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c12:	e7db      	b.n	8005bcc <arm_radix4_butterfly_q15+0x21c>
 8005c14:	ffff0000 	.word	0xffff0000

08005c18 <arm_radix4_butterfly_inverse_q15>:
 8005c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c1c:	088f      	lsrs	r7, r1, #2
 8005c1e:	b095      	sub	sp, #84	; 0x54
 8005c20:	00be      	lsls	r6, r7, #2
 8005c22:	4684      	mov	ip, r0
 8005c24:	9011      	str	r0, [sp, #68]	; 0x44
 8005c26:	4430      	add	r0, r6
 8005c28:	9103      	str	r1, [sp, #12]
 8005c2a:	1984      	adds	r4, r0, r6
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4d93      	ldr	r5, [pc, #588]	; (8005e7c <arm_radix4_butterfly_inverse_q15+0x264>)
 8005c30:	9713      	str	r7, [sp, #76]	; 0x4c
 8005c32:	469a      	mov	sl, r3
 8005c34:	46b9      	mov	r9, r7
 8005c36:	9212      	str	r2, [sp, #72]	; 0x48
 8005c38:	4667      	mov	r7, ip
 8005c3a:	4426      	add	r6, r4
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4694      	mov	ip, r2
 8005c40:	f8d7 b000 	ldr.w	fp, [r7]
 8005c44:	fa9b fb23 	shadd16	fp, fp, r3
 8005c48:	fa9b fb23 	shadd16	fp, fp, r3
 8005c4c:	6822      	ldr	r2, [r4, #0]
 8005c4e:	fa92 f223 	shadd16	r2, r2, r3
 8005c52:	fa92 f223 	shadd16	r2, r2, r3
 8005c56:	fa9b fe12 	qadd16	lr, fp, r2
 8005c5a:	fadb fb12 	qsub16	fp, fp, r2
 8005c5e:	6802      	ldr	r2, [r0, #0]
 8005c60:	fa92 f223 	shadd16	r2, r2, r3
 8005c64:	fa92 f223 	shadd16	r2, r2, r3
 8005c68:	f8d6 8000 	ldr.w	r8, [r6]
 8005c6c:	fa98 f823 	shadd16	r8, r8, r3
 8005c70:	fa98 f823 	shadd16	r8, r8, r3
 8005c74:	fa92 f218 	qadd16	r2, r2, r8
 8005c78:	fa9e f822 	shadd16	r8, lr, r2
 8005c7c:	f847 8b04 	str.w	r8, [r7], #4
 8005c80:	fade fe12 	qsub16	lr, lr, r2
 8005c84:	f85c 2031 	ldr.w	r2, [ip, r1, lsl #3]
 8005c88:	fb42 f80e 	smusd	r8, r2, lr
 8005c8c:	fb22 fe1e 	smuadx	lr, r2, lr
 8005c90:	6802      	ldr	r2, [r0, #0]
 8005c92:	fa92 f223 	shadd16	r2, r2, r3
 8005c96:	fa92 f223 	shadd16	r2, r2, r3
 8005c9a:	ea0e 0e05 	and.w	lr, lr, r5
 8005c9e:	ea4e 4e18 	orr.w	lr, lr, r8, lsr #16
 8005ca2:	f840 eb04 	str.w	lr, [r0], #4
 8005ca6:	f8d6 e000 	ldr.w	lr, [r6]
 8005caa:	fa9e fe23 	shadd16	lr, lr, r3
 8005cae:	fa9e fe23 	shadd16	lr, lr, r3
 8005cb2:	fad2 f21e 	qsub16	r2, r2, lr
 8005cb6:	faeb f812 	qsax	r8, fp, r2
 8005cba:	faab fb12 	qasx	fp, fp, r2
 8005cbe:	f85c 2021 	ldr.w	r2, [ip, r1, lsl #2]
 8005cc2:	fb42 fe0b 	smusd	lr, r2, fp
 8005cc6:	fb22 f21b 	smuadx	r2, r2, fp
 8005cca:	402a      	ands	r2, r5
 8005ccc:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 8005cd0:	f844 2b04 	str.w	r2, [r4], #4
 8005cd4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005cd8:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8005cdc:	fb42 fe08 	smusd	lr, r2, r8
 8005ce0:	fb22 f218 	smuadx	r2, r2, r8
 8005ce4:	402a      	ands	r2, r5
 8005ce6:	ea42 421e 	orr.w	r2, r2, lr, lsr #16
 8005cea:	f1b9 0901 	subs.w	r9, r9, #1
 8005cee:	f846 2b04 	str.w	r2, [r6], #4
 8005cf2:	4451      	add	r1, sl
 8005cf4:	d1a4      	bne.n	8005c40 <arm_radix4_butterfly_inverse_q15+0x28>
 8005cf6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005cf8:	2a04      	cmp	r2, #4
 8005cfa:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8005cfe:	f240 80ba 	bls.w	8005e76 <arm_radix4_butterfly_inverse_q15+0x25e>
 8005d02:	f8df b178 	ldr.w	fp, [pc, #376]	; 8005e7c <arm_radix4_butterfly_inverse_q15+0x264>
 8005d06:	f8cd 9010 	str.w	r9, [sp, #16]
 8005d0a:	9202      	str	r2, [sp, #8]
 8005d0c:	9c02      	ldr	r4, [sp, #8]
 8005d0e:	08a1      	lsrs	r1, r4, #2
 8005d10:	0088      	lsls	r0, r1, #2
 8005d12:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8005d16:	0092      	lsls	r2, r2, #2
 8005d18:	900c      	str	r0, [sp, #48]	; 0x30
 8005d1a:	9803      	ldr	r0, [sp, #12]
 8005d1c:	920f      	str	r2, [sp, #60]	; 0x3c
 8005d1e:	009a      	lsls	r2, r3, #2
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	4605      	mov	r5, r0
 8005d24:	930d      	str	r3, [sp, #52]	; 0x34
 8005d26:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005d28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d2a:	9110      	str	r1, [sp, #64]	; 0x40
 8005d2c:	428d      	cmp	r5, r1
 8005d2e:	bf28      	it	cs
 8005d30:	460d      	movcs	r5, r1
 8005d32:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8005d36:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8005d3a:	9306      	str	r3, [sp, #24]
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	950e      	str	r5, [sp, #56]	; 0x38
 8005d40:	9107      	str	r1, [sp, #28]
 8005d42:	00a7      	lsls	r7, r4, #2
 8005d44:	920b      	str	r2, [sp, #44]	; 0x2c
 8005d46:	9008      	str	r0, [sp, #32]
 8005d48:	9305      	str	r3, [sp, #20]
 8005d4a:	9b06      	ldr	r3, [sp, #24]
 8005d4c:	9a08      	ldr	r2, [sp, #32]
 8005d4e:	f8d3 a000 	ldr.w	sl, [r3]
 8005d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d54:	f8dd e014 	ldr.w	lr, [sp, #20]
 8005d58:	f8d3 9000 	ldr.w	r9, [r3]
 8005d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d5e:	f8d3 8000 	ldr.w	r8, [r3]
 8005d62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d64:	4616      	mov	r6, r2
 8005d66:	1898      	adds	r0, r3, r2
 8005d68:	9a07      	ldr	r2, [sp, #28]
 8005d6a:	4615      	mov	r5, r2
 8005d6c:	1899      	adds	r1, r3, r2
 8005d6e:	6832      	ldr	r2, [r6, #0]
 8005d70:	682c      	ldr	r4, [r5, #0]
 8005d72:	fa92 f314 	qadd16	r3, r2, r4
 8005d76:	fad2 f214 	qsub16	r2, r2, r4
 8005d7a:	6804      	ldr	r4, [r0, #0]
 8005d7c:	f8d1 c000 	ldr.w	ip, [r1]
 8005d80:	fa94 f41c 	qadd16	r4, r4, ip
 8005d84:	9301      	str	r3, [sp, #4]
 8005d86:	fa93 fc24 	shadd16	ip, r3, r4
 8005d8a:	9b04      	ldr	r3, [sp, #16]
 8005d8c:	fa9c fc23 	shadd16	ip, ip, r3
 8005d90:	f8c6 c000 	str.w	ip, [r6]
 8005d94:	9b01      	ldr	r3, [sp, #4]
 8005d96:	443e      	add	r6, r7
 8005d98:	fad3 f324 	shsub16	r3, r3, r4
 8005d9c:	fb49 fc03 	smusd	ip, r9, r3
 8005da0:	fb29 f313 	smuadx	r3, r9, r3
 8005da4:	ea03 030b 	and.w	r3, r3, fp
 8005da8:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8005dac:	f8d0 c000 	ldr.w	ip, [r0]
 8005db0:	6003      	str	r3, [r0, #0]
 8005db2:	680c      	ldr	r4, [r1, #0]
 8005db4:	4438      	add	r0, r7
 8005db6:	fadc f414 	qsub16	r4, ip, r4
 8005dba:	fae2 f324 	shsax	r3, r2, r4
 8005dbe:	faa2 f224 	shasx	r2, r2, r4
 8005dc2:	fb4a f402 	smusd	r4, sl, r2
 8005dc6:	fb2a f212 	smuadx	r2, sl, r2
 8005dca:	ea02 020b 	and.w	r2, r2, fp
 8005dce:	ea42 4214 	orr.w	r2, r2, r4, lsr #16
 8005dd2:	602a      	str	r2, [r5, #0]
 8005dd4:	443d      	add	r5, r7
 8005dd6:	fb48 f203 	smusd	r2, r8, r3
 8005dda:	fb28 f313 	smuadx	r3, r8, r3
 8005dde:	ea03 030b 	and.w	r3, r3, fp
 8005de2:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8005de6:	9a02      	ldr	r2, [sp, #8]
 8005de8:	600b      	str	r3, [r1, #0]
 8005dea:	9b03      	ldr	r3, [sp, #12]
 8005dec:	4496      	add	lr, r2
 8005dee:	4573      	cmp	r3, lr
 8005df0:	4439      	add	r1, r7
 8005df2:	d8bc      	bhi.n	8005d6e <arm_radix4_butterfly_inverse_q15+0x156>
 8005df4:	9a06      	ldr	r2, [sp, #24]
 8005df6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005df8:	9b05      	ldr	r3, [sp, #20]
 8005dfa:	440a      	add	r2, r1
 8005dfc:	9206      	str	r2, [sp, #24]
 8005dfe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e02:	440a      	add	r2, r1
 8005e04:	920a      	str	r2, [sp, #40]	; 0x28
 8005e06:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005e08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e0a:	440a      	add	r2, r1
 8005e0c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e0e:	9a08      	ldr	r2, [sp, #32]
 8005e10:	3204      	adds	r2, #4
 8005e12:	9208      	str	r2, [sp, #32]
 8005e14:	9a07      	ldr	r2, [sp, #28]
 8005e16:	3204      	adds	r2, #4
 8005e18:	9207      	str	r2, [sp, #28]
 8005e1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	9305      	str	r3, [sp, #20]
 8005e22:	d392      	bcc.n	8005d4a <arm_radix4_butterfly_inverse_q15+0x132>
 8005e24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005e26:	9202      	str	r2, [sp, #8]
 8005e28:	2a04      	cmp	r2, #4
 8005e2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e2c:	f63f af6e 	bhi.w	8005d0c <arm_radix4_butterfly_inverse_q15+0xf4>
 8005e30:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8005e32:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	6859      	ldr	r1, [r3, #4]
 8005e38:	689f      	ldr	r7, [r3, #8]
 8005e3a:	68dc      	ldr	r4, [r3, #12]
 8005e3c:	fa92 f017 	qadd16	r0, r2, r7
 8005e40:	fa91 f514 	qadd16	r5, r1, r4
 8005e44:	fa90 f525 	shadd16	r5, r0, r5
 8005e48:	601d      	str	r5, [r3, #0]
 8005e4a:	fa91 f514 	qadd16	r5, r1, r4
 8005e4e:	fad0 f025 	shsub16	r0, r0, r5
 8005e52:	6058      	str	r0, [r3, #4]
 8005e54:	fad2 f217 	qsub16	r2, r2, r7
 8005e58:	fad1 f114 	qsub16	r1, r1, r4
 8005e5c:	faa2 f021 	shasx	r0, r2, r1
 8005e60:	6098      	str	r0, [r3, #8]
 8005e62:	fae2 f221 	shsax	r2, r2, r1
 8005e66:	3e01      	subs	r6, #1
 8005e68:	60da      	str	r2, [r3, #12]
 8005e6a:	f103 0310 	add.w	r3, r3, #16
 8005e6e:	d1e1      	bne.n	8005e34 <arm_radix4_butterfly_inverse_q15+0x21c>
 8005e70:	b015      	add	sp, #84	; 0x54
 8005e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e76:	4616      	mov	r6, r2
 8005e78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e7a:	e7db      	b.n	8005e34 <arm_radix4_butterfly_inverse_q15+0x21c>
 8005e7c:	ffff0000 	.word	0xffff0000

08005e80 <arm_bitreversal_16>:
 8005e80:	b1f1      	cbz	r1, 8005ec0 <arm_bitreversal_16+0x40>
 8005e82:	b4f0      	push	{r4, r5, r6, r7}
 8005e84:	2400      	movs	r4, #0
 8005e86:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8005e8a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8005e8e:	886d      	ldrh	r5, [r5, #2]
 8005e90:	08ad      	lsrs	r5, r5, #2
 8005e92:	089b      	lsrs	r3, r3, #2
 8005e94:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 8005e98:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 8005e9c:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 8005ea0:	006e      	lsls	r6, r5, #1
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 8005ea8:	3302      	adds	r3, #2
 8005eaa:	1cb5      	adds	r5, r6, #2
 8005eac:	3402      	adds	r4, #2
 8005eae:	b2a4      	uxth	r4, r4
 8005eb0:	5ac6      	ldrh	r6, [r0, r3]
 8005eb2:	5b47      	ldrh	r7, [r0, r5]
 8005eb4:	52c7      	strh	r7, [r0, r3]
 8005eb6:	42a1      	cmp	r1, r4
 8005eb8:	5346      	strh	r6, [r0, r5]
 8005eba:	d8e4      	bhi.n	8005e86 <arm_bitreversal_16+0x6>
 8005ebc:	bcf0      	pop	{r4, r5, r6, r7}
 8005ebe:	4770      	bx	lr
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop

08005ec4 <__libc_init_array>:
 8005ec4:	b570      	push	{r4, r5, r6, lr}
 8005ec6:	4d0d      	ldr	r5, [pc, #52]	; (8005efc <__libc_init_array+0x38>)
 8005ec8:	4c0d      	ldr	r4, [pc, #52]	; (8005f00 <__libc_init_array+0x3c>)
 8005eca:	1b64      	subs	r4, r4, r5
 8005ecc:	10a4      	asrs	r4, r4, #2
 8005ece:	2600      	movs	r6, #0
 8005ed0:	42a6      	cmp	r6, r4
 8005ed2:	d109      	bne.n	8005ee8 <__libc_init_array+0x24>
 8005ed4:	4d0b      	ldr	r5, [pc, #44]	; (8005f04 <__libc_init_array+0x40>)
 8005ed6:	4c0c      	ldr	r4, [pc, #48]	; (8005f08 <__libc_init_array+0x44>)
 8005ed8:	f000 f952 	bl	8006180 <_init>
 8005edc:	1b64      	subs	r4, r4, r5
 8005ede:	10a4      	asrs	r4, r4, #2
 8005ee0:	2600      	movs	r6, #0
 8005ee2:	42a6      	cmp	r6, r4
 8005ee4:	d105      	bne.n	8005ef2 <__libc_init_array+0x2e>
 8005ee6:	bd70      	pop	{r4, r5, r6, pc}
 8005ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eec:	4798      	blx	r3
 8005eee:	3601      	adds	r6, #1
 8005ef0:	e7ee      	b.n	8005ed0 <__libc_init_array+0xc>
 8005ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef6:	4798      	blx	r3
 8005ef8:	3601      	adds	r6, #1
 8005efa:	e7f2      	b.n	8005ee2 <__libc_init_array+0x1e>
 8005efc:	08018194 	.word	0x08018194
 8005f00:	08018194 	.word	0x08018194
 8005f04:	08018194 	.word	0x08018194
 8005f08:	08018198 	.word	0x08018198

08005f0c <__itoa>:
 8005f0c:	1e93      	subs	r3, r2, #2
 8005f0e:	2b22      	cmp	r3, #34	; 0x22
 8005f10:	b510      	push	{r4, lr}
 8005f12:	460c      	mov	r4, r1
 8005f14:	d904      	bls.n	8005f20 <__itoa+0x14>
 8005f16:	2300      	movs	r3, #0
 8005f18:	700b      	strb	r3, [r1, #0]
 8005f1a:	461c      	mov	r4, r3
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	bd10      	pop	{r4, pc}
 8005f20:	2a0a      	cmp	r2, #10
 8005f22:	d109      	bne.n	8005f38 <__itoa+0x2c>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	da07      	bge.n	8005f38 <__itoa+0x2c>
 8005f28:	232d      	movs	r3, #45	; 0x2d
 8005f2a:	700b      	strb	r3, [r1, #0]
 8005f2c:	4240      	negs	r0, r0
 8005f2e:	2101      	movs	r1, #1
 8005f30:	4421      	add	r1, r4
 8005f32:	f000 f887 	bl	8006044 <__utoa>
 8005f36:	e7f1      	b.n	8005f1c <__itoa+0x10>
 8005f38:	2100      	movs	r1, #0
 8005f3a:	e7f9      	b.n	8005f30 <__itoa+0x24>

08005f3c <itoa>:
 8005f3c:	f7ff bfe6 	b.w	8005f0c <__itoa>

08005f40 <__retarget_lock_acquire_recursive>:
 8005f40:	4770      	bx	lr

08005f42 <__retarget_lock_release_recursive>:
 8005f42:	4770      	bx	lr

08005f44 <memcpy>:
 8005f44:	440a      	add	r2, r1
 8005f46:	4291      	cmp	r1, r2
 8005f48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005f4c:	d100      	bne.n	8005f50 <memcpy+0xc>
 8005f4e:	4770      	bx	lr
 8005f50:	b510      	push	{r4, lr}
 8005f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f5a:	4291      	cmp	r1, r2
 8005f5c:	d1f9      	bne.n	8005f52 <memcpy+0xe>
 8005f5e:	bd10      	pop	{r4, pc}

08005f60 <memset>:
 8005f60:	4402      	add	r2, r0
 8005f62:	4603      	mov	r3, r0
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d100      	bne.n	8005f6a <memset+0xa>
 8005f68:	4770      	bx	lr
 8005f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f6e:	e7f9      	b.n	8005f64 <memset+0x4>

08005f70 <cleanup_glue>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	460c      	mov	r4, r1
 8005f74:	6809      	ldr	r1, [r1, #0]
 8005f76:	4605      	mov	r5, r0
 8005f78:	b109      	cbz	r1, 8005f7e <cleanup_glue+0xe>
 8005f7a:	f7ff fff9 	bl	8005f70 <cleanup_glue>
 8005f7e:	4621      	mov	r1, r4
 8005f80:	4628      	mov	r0, r5
 8005f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f86:	f000 b8ab 	b.w	80060e0 <_free_r>
	...

08005f8c <_reclaim_reent>:
 8005f8c:	4b2c      	ldr	r3, [pc, #176]	; (8006040 <_reclaim_reent+0xb4>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4283      	cmp	r3, r0
 8005f92:	b570      	push	{r4, r5, r6, lr}
 8005f94:	4604      	mov	r4, r0
 8005f96:	d051      	beq.n	800603c <_reclaim_reent+0xb0>
 8005f98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005f9a:	b143      	cbz	r3, 8005fae <_reclaim_reent+0x22>
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d14a      	bne.n	8006038 <_reclaim_reent+0xac>
 8005fa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005fa4:	6819      	ldr	r1, [r3, #0]
 8005fa6:	b111      	cbz	r1, 8005fae <_reclaim_reent+0x22>
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f000 f899 	bl	80060e0 <_free_r>
 8005fae:	6961      	ldr	r1, [r4, #20]
 8005fb0:	b111      	cbz	r1, 8005fb8 <_reclaim_reent+0x2c>
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 f894 	bl	80060e0 <_free_r>
 8005fb8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005fba:	b111      	cbz	r1, 8005fc2 <_reclaim_reent+0x36>
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f000 f88f 	bl	80060e0 <_free_r>
 8005fc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005fc4:	b111      	cbz	r1, 8005fcc <_reclaim_reent+0x40>
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f000 f88a 	bl	80060e0 <_free_r>
 8005fcc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005fce:	b111      	cbz	r1, 8005fd6 <_reclaim_reent+0x4a>
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 f885 	bl	80060e0 <_free_r>
 8005fd6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005fd8:	b111      	cbz	r1, 8005fe0 <_reclaim_reent+0x54>
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 f880 	bl	80060e0 <_free_r>
 8005fe0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005fe2:	b111      	cbz	r1, 8005fea <_reclaim_reent+0x5e>
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f000 f87b 	bl	80060e0 <_free_r>
 8005fea:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005fec:	b111      	cbz	r1, 8005ff4 <_reclaim_reent+0x68>
 8005fee:	4620      	mov	r0, r4
 8005ff0:	f000 f876 	bl	80060e0 <_free_r>
 8005ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ff6:	b111      	cbz	r1, 8005ffe <_reclaim_reent+0x72>
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 f871 	bl	80060e0 <_free_r>
 8005ffe:	69a3      	ldr	r3, [r4, #24]
 8006000:	b1e3      	cbz	r3, 800603c <_reclaim_reent+0xb0>
 8006002:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006004:	4620      	mov	r0, r4
 8006006:	4798      	blx	r3
 8006008:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800600a:	b1b9      	cbz	r1, 800603c <_reclaim_reent+0xb0>
 800600c:	4620      	mov	r0, r4
 800600e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006012:	f7ff bfad 	b.w	8005f70 <cleanup_glue>
 8006016:	5949      	ldr	r1, [r1, r5]
 8006018:	b941      	cbnz	r1, 800602c <_reclaim_reent+0xa0>
 800601a:	3504      	adds	r5, #4
 800601c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800601e:	2d80      	cmp	r5, #128	; 0x80
 8006020:	68d9      	ldr	r1, [r3, #12]
 8006022:	d1f8      	bne.n	8006016 <_reclaim_reent+0x8a>
 8006024:	4620      	mov	r0, r4
 8006026:	f000 f85b 	bl	80060e0 <_free_r>
 800602a:	e7ba      	b.n	8005fa2 <_reclaim_reent+0x16>
 800602c:	680e      	ldr	r6, [r1, #0]
 800602e:	4620      	mov	r0, r4
 8006030:	f000 f856 	bl	80060e0 <_free_r>
 8006034:	4631      	mov	r1, r6
 8006036:	e7ef      	b.n	8006018 <_reclaim_reent+0x8c>
 8006038:	2500      	movs	r5, #0
 800603a:	e7ef      	b.n	800601c <_reclaim_reent+0x90>
 800603c:	bd70      	pop	{r4, r5, r6, pc}
 800603e:	bf00      	nop
 8006040:	20000010 	.word	0x20000010

08006044 <__utoa>:
 8006044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006046:	4c1f      	ldr	r4, [pc, #124]	; (80060c4 <__utoa+0x80>)
 8006048:	b08b      	sub	sp, #44	; 0x2c
 800604a:	4605      	mov	r5, r0
 800604c:	460b      	mov	r3, r1
 800604e:	466e      	mov	r6, sp
 8006050:	f104 0c20 	add.w	ip, r4, #32
 8006054:	6820      	ldr	r0, [r4, #0]
 8006056:	6861      	ldr	r1, [r4, #4]
 8006058:	4637      	mov	r7, r6
 800605a:	c703      	stmia	r7!, {r0, r1}
 800605c:	3408      	adds	r4, #8
 800605e:	4564      	cmp	r4, ip
 8006060:	463e      	mov	r6, r7
 8006062:	d1f7      	bne.n	8006054 <__utoa+0x10>
 8006064:	7921      	ldrb	r1, [r4, #4]
 8006066:	7139      	strb	r1, [r7, #4]
 8006068:	1e91      	subs	r1, r2, #2
 800606a:	6820      	ldr	r0, [r4, #0]
 800606c:	6038      	str	r0, [r7, #0]
 800606e:	2922      	cmp	r1, #34	; 0x22
 8006070:	f04f 0100 	mov.w	r1, #0
 8006074:	d904      	bls.n	8006080 <__utoa+0x3c>
 8006076:	7019      	strb	r1, [r3, #0]
 8006078:	460b      	mov	r3, r1
 800607a:	4618      	mov	r0, r3
 800607c:	b00b      	add	sp, #44	; 0x2c
 800607e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006080:	1e58      	subs	r0, r3, #1
 8006082:	4684      	mov	ip, r0
 8006084:	fbb5 f7f2 	udiv	r7, r5, r2
 8006088:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800608c:	fb02 5617 	mls	r6, r2, r7, r5
 8006090:	4476      	add	r6, lr
 8006092:	460c      	mov	r4, r1
 8006094:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006098:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800609c:	462e      	mov	r6, r5
 800609e:	42b2      	cmp	r2, r6
 80060a0:	f101 0101 	add.w	r1, r1, #1
 80060a4:	463d      	mov	r5, r7
 80060a6:	d9ed      	bls.n	8006084 <__utoa+0x40>
 80060a8:	2200      	movs	r2, #0
 80060aa:	545a      	strb	r2, [r3, r1]
 80060ac:	1919      	adds	r1, r3, r4
 80060ae:	1aa5      	subs	r5, r4, r2
 80060b0:	42aa      	cmp	r2, r5
 80060b2:	dae2      	bge.n	800607a <__utoa+0x36>
 80060b4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80060b8:	780e      	ldrb	r6, [r1, #0]
 80060ba:	7006      	strb	r6, [r0, #0]
 80060bc:	3201      	adds	r2, #1
 80060be:	f801 5901 	strb.w	r5, [r1], #-1
 80060c2:	e7f4      	b.n	80060ae <__utoa+0x6a>
 80060c4:	0801816c 	.word	0x0801816c

080060c8 <__malloc_lock>:
 80060c8:	4801      	ldr	r0, [pc, #4]	; (80060d0 <__malloc_lock+0x8>)
 80060ca:	f7ff bf39 	b.w	8005f40 <__retarget_lock_acquire_recursive>
 80060ce:	bf00      	nop
 80060d0:	20004a88 	.word	0x20004a88

080060d4 <__malloc_unlock>:
 80060d4:	4801      	ldr	r0, [pc, #4]	; (80060dc <__malloc_unlock+0x8>)
 80060d6:	f7ff bf34 	b.w	8005f42 <__retarget_lock_release_recursive>
 80060da:	bf00      	nop
 80060dc:	20004a88 	.word	0x20004a88

080060e0 <_free_r>:
 80060e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060e2:	2900      	cmp	r1, #0
 80060e4:	d048      	beq.n	8006178 <_free_r+0x98>
 80060e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ea:	9001      	str	r0, [sp, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f1a1 0404 	sub.w	r4, r1, #4
 80060f2:	bfb8      	it	lt
 80060f4:	18e4      	addlt	r4, r4, r3
 80060f6:	f7ff ffe7 	bl	80060c8 <__malloc_lock>
 80060fa:	4a20      	ldr	r2, [pc, #128]	; (800617c <_free_r+0x9c>)
 80060fc:	9801      	ldr	r0, [sp, #4]
 80060fe:	6813      	ldr	r3, [r2, #0]
 8006100:	4615      	mov	r5, r2
 8006102:	b933      	cbnz	r3, 8006112 <_free_r+0x32>
 8006104:	6063      	str	r3, [r4, #4]
 8006106:	6014      	str	r4, [r2, #0]
 8006108:	b003      	add	sp, #12
 800610a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800610e:	f7ff bfe1 	b.w	80060d4 <__malloc_unlock>
 8006112:	42a3      	cmp	r3, r4
 8006114:	d90b      	bls.n	800612e <_free_r+0x4e>
 8006116:	6821      	ldr	r1, [r4, #0]
 8006118:	1862      	adds	r2, r4, r1
 800611a:	4293      	cmp	r3, r2
 800611c:	bf04      	itt	eq
 800611e:	681a      	ldreq	r2, [r3, #0]
 8006120:	685b      	ldreq	r3, [r3, #4]
 8006122:	6063      	str	r3, [r4, #4]
 8006124:	bf04      	itt	eq
 8006126:	1852      	addeq	r2, r2, r1
 8006128:	6022      	streq	r2, [r4, #0]
 800612a:	602c      	str	r4, [r5, #0]
 800612c:	e7ec      	b.n	8006108 <_free_r+0x28>
 800612e:	461a      	mov	r2, r3
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	b10b      	cbz	r3, 8006138 <_free_r+0x58>
 8006134:	42a3      	cmp	r3, r4
 8006136:	d9fa      	bls.n	800612e <_free_r+0x4e>
 8006138:	6811      	ldr	r1, [r2, #0]
 800613a:	1855      	adds	r5, r2, r1
 800613c:	42a5      	cmp	r5, r4
 800613e:	d10b      	bne.n	8006158 <_free_r+0x78>
 8006140:	6824      	ldr	r4, [r4, #0]
 8006142:	4421      	add	r1, r4
 8006144:	1854      	adds	r4, r2, r1
 8006146:	42a3      	cmp	r3, r4
 8006148:	6011      	str	r1, [r2, #0]
 800614a:	d1dd      	bne.n	8006108 <_free_r+0x28>
 800614c:	681c      	ldr	r4, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	6053      	str	r3, [r2, #4]
 8006152:	4421      	add	r1, r4
 8006154:	6011      	str	r1, [r2, #0]
 8006156:	e7d7      	b.n	8006108 <_free_r+0x28>
 8006158:	d902      	bls.n	8006160 <_free_r+0x80>
 800615a:	230c      	movs	r3, #12
 800615c:	6003      	str	r3, [r0, #0]
 800615e:	e7d3      	b.n	8006108 <_free_r+0x28>
 8006160:	6825      	ldr	r5, [r4, #0]
 8006162:	1961      	adds	r1, r4, r5
 8006164:	428b      	cmp	r3, r1
 8006166:	bf04      	itt	eq
 8006168:	6819      	ldreq	r1, [r3, #0]
 800616a:	685b      	ldreq	r3, [r3, #4]
 800616c:	6063      	str	r3, [r4, #4]
 800616e:	bf04      	itt	eq
 8006170:	1949      	addeq	r1, r1, r5
 8006172:	6021      	streq	r1, [r4, #0]
 8006174:	6054      	str	r4, [r2, #4]
 8006176:	e7c7      	b.n	8006108 <_free_r+0x28>
 8006178:	b003      	add	sp, #12
 800617a:	bd30      	pop	{r4, r5, pc}
 800617c:	200049dc 	.word	0x200049dc

08006180 <_init>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	bf00      	nop
 8006184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006186:	bc08      	pop	{r3}
 8006188:	469e      	mov	lr, r3
 800618a:	4770      	bx	lr

0800618c <_fini>:
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	bf00      	nop
 8006190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006192:	bc08      	pop	{r3}
 8006194:	469e      	mov	lr, r3
 8006196:	4770      	bx	lr
